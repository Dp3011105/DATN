@*     @model FE.Models.CheckoutTkViewModel
    @{
        ViewData["Title"] = "Thanh Toán";
    }

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">

    <style>
        :root {
            --primary: #3B82F6;
            --primary-dark: #2563EB;
            --secondary: #F59E0B;
            --light-bg: #F8FAFC;
            --card-bg: #FFFFFF;
            --text-primary: #1F2937;
            --text-secondary: #6B7280;
            --success: #10B981;
            --danger: #EF4444;
        }

        body {
            font-family: 'Roboto', sans-serif;
            background-color: var(--light-bg);
            color: var(--text-primary);
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }

        .modal-content {
            background: linear-gradient(135deg, #FFFFFF 0%, #F9FAFB 100%);
            margin: 10% auto;
            padding: 1.5rem;
            border: none;
            width: 90%;
            max-width: 600px;
            border-radius: 16px;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
        }

        .error-message {
            color: var(--danger);
            font-size: 0.75rem;
            margin-top: 0.5rem;
            display: none;
        }

        .form-group {
            margin-bottom: 1.25rem;
        }

        .cart-item {
            display: flex;
            align-items: flex-start;
            padding: 1rem;
            border-bottom: 1px solid #E5E7EB;
            transition: all 0.2s ease;
        }

            .cart-item:hover {
                background-color: #F9FAFB;
            }

        .cart-item-image {
            width: 64px;
            height: 64px;
            object-fit: cover;
            border-radius: 8px;
            margin-right: 1rem;
        }

        .cart-item-details {
            flex: 1;
        }

        .cart-item-name {
            font-size: 1rem;
            font-weight: 600;
            color: var(--text-primary);
        }

        .cart-item-options {
            font-size: 0.85rem;
            color: var(--text-secondary);
            margin-top: 0.5rem;
        }

        .cart-item-price {
            font-size: 1rem;
            font-weight: 600;
            color: var(--primary);
        }

        .cart-total {
            font-weight: 700;
            font-size: 1.25rem;
            color: var(--text-primary);
            margin-top: 1.5rem;
        }

        .original-price {
            text-decoration: line-through;
            color: var(--text-secondary);
            font-size: 0.9rem;
            margin-right: 0.5rem;
        }

        .discounted-price {
            color: var(--danger);
            font-weight: 600;
            font-size: 1rem;
        }

        .regular-price {
            color: var(--primary);
            font-weight: 600;
            font-size: 1rem;
        }

        .cart-item-controls {
            display: flex;
            align-items: center;
            justify-content: flex-end;
            min-width: 60px;
            font-size: 0.9rem;
            font-weight: 500;
            color: var(--text-primary);
        }

            .cart-item-controls .quantity {
                margin-left: 0.5rem;
                font-weight: 600;
            }

        .form-group label {
            font-size: 0.9rem;
            font-weight: 500;
            color: var(--text-primary);
            margin-bottom: 0.5rem;
            display: block;
        }

        .form-group input[type="radio"] {
            margin-right: 0.5rem;
        }

            .form-group input[type="radio"]:checked + .radio-label {
                background-color: #EFF6FF;
                border-color: var(--primary);
                color: var(--primary);
                box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
                font-weight: 700;
                border-width: 2px;
            }

        .add-address-btn, .submit-btn, .edit-address-btn {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            border: none;
            font-size: 0.9rem;
            font-weight: 500;
            transition: all 0.2s ease;
            position: relative;
        }

            .add-address-btn:hover, .submit-btn:hover, .edit-address-btn:hover {
                transform: translateY(-1px);
                box-shadow: 0 4px 8px rgba(59, 130, 246, 0.25);
            }

            .submit-btn.loading::after {
                content: '';
                display: inline-block;
                border: 3px solid #ffffff;
                border-top: 3px solid var(--primary);
                border-radius: 50%;
                width: 16px;
                height: 16px;
                animation: spin 1s linear infinite;
                position: absolute;
                right: 1rem;
                top: 50%;
                transform: translateY(-50%);
            }

        .alert-notification {
            border-radius: 8px;
            padding: 0.75rem 1rem;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            animation: slideIn 0.4s ease-out;
        }

        .alert-error {
            background-color: #FEF2F2;
            color: #991B1B;
            border-left: 3px solid var(--danger);
        }

        .alert-success {
            background-color: #ECFDF5;
            color: #065F46;
            border-left: 3px solid var(--success);
        }

        .close-button {
            background: none;
            border: none;
            font-size: 1.2rem;
            color: var(--text-secondary);
            transition: all 0.2s ease;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
        }

            .close-button:hover {
                background-color: #F3F4F6;
                color: var(--text-primary);
            }

        select {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #E5E7EB;
            border-radius: 8px;
            font-size: 0.9rem;
        }

            select:focus {
                outline: none;
                border-color: var(--primary);
                box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.25);
            }

            select:disabled {
                background-color: #F3F4F6;
                cursor: not-allowed;
            }

        .section-container {
            background: var(--card-bg);
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            margin-bottom: 1.5rem;
        }

        .radio-label {
            display: block;
            padding: 0.75rem;
            border: 1px solid #E5E7EB;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

            .radio-label:hover {
                border-color: var(--primary);
                box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
            }

        .qr-code-container {
            text-align: center;
            margin: 1rem 0;
        }

        .qr-code-image {
            max-width: 250px;
            width: 100%;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .qr-info {
            font-size: 0.9rem;
            color: var(--text-secondary);
            margin-top: 1rem;
        }

            .qr-info span {
                font-weight: 600;
                color: var(--text-primary);
            }

        .loading-spinner {
            display: none;
            border: 4px solid #f3f3f3;
            border-top: 4px solid var(--primary);
            border-radius: 50%;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }

   
        {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }

        }
    </style>

    <div class="container mx-auto py-8 px-4 sm:px-6 lg:px-8">
        <h2 class="text-3xl font-bold text-gray-800 mb-8">Thanh Toán</h2>

        <!-- Notifications -->
        @if (TempData["Error"] != null)
        {
            <div class="alert-notification alert-error animate__animated animate__fadeInDown">
                <i class="bi bi-exclamation-circle-fill mr-2 text-lg"></i>
                <div class="flex-1">@TempData["Error"]</div>
                <button type="button" class="close-button" data-bs-dismiss="alert">
                    <i class="bi bi-x"></i>
                </button>
            </div>
        }
        @if (TempData["Success"] != null)
        {
            <div class="alert-notification alert-success animate__animated animate__fadeInDown">
                <i class="bi bi-check-circle-fill mr-2 text-lg"></i>
                <div class="flex-1">@TempData["Success"]</div>
                <button type="button" class="close-button" data-bs-dismiss="alert">
                    <i class="bi bi-x"></i>
                </button>
            </div>
        }

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <!-- Left: Cart Items -->
            <div>
                <h3 class="text-xl font-bold text-gray-800 mb-4">Giỏ Hàng</h3>
                <div id="cartItems" class="section-container">
                    @if (Model.CartItems != null && Model.CartItems.Any())
                    {
                        <div id="cartItemsContainer"></div>
                        <div class="cart-total">
                            Tổng cộng: <span id="cartTotal">0 đ</span>
                        </div>
                    }
                    else
                    {
                        <p class="cart-empty text-gray-500">Không có sản phẩm nào được chọn để thanh toán. Vui lòng kiểm tra lại.</p>
                    }
                </div>
            </div>

            <!-- Right: Checkout Form -->
            <div>
                <h3 class="text-xl font-bold text-gray-800 mb-4">Thông Tin Thanh Toán</h3>
                <div class="section-container">
                    <form id="checkoutForm" method="post" asp-action="ProcessCheckout">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="selectedItems" value="@Html.Raw(ViewBag.SelectedItems)" />
                        <input type="hidden" id="customerId" value="@(ViewData["CustomerId"] ?? "0")" />

                        <h4 class="text-lg font-semibold text-gray-800 mb-3">Chọn Địa Chỉ</h4>
                        <div id="addresses" class="mb-6">
                            @if (Model.Addresses != null && Model.Addresses.Any())
                            {
                                foreach (var address in Model.Addresses)
                                {
                                    <div class="form-group">
                                        <input type="radio" id="address_@address.ID_Dia_Chi" name="selectedAddress" value="@address.ID_Dia_Chi" class="sr-only" required />
                                        <label for="address_@address.ID_Dia_Chi" class="radio-label flex items-center gap-2">
                                            <i class="bi bi-geo-alt text-primary"></i>
                                            @(address.Dia_Chi ?? "Không xác định"), @(address.Tinh_Thanh ?? "Không xác định") (@(address.Ghi_Chu_KhachHang ?? "Không có ghi chú"))
                                        </label>
                                        <button type="button" class="edit-address-btn ml-auto text-sm" onclick="openEditModal(@address.ID_Dia_Chi, '@(address.Dia_Chi?.Replace("'", "\\'") ?? "")', '@(address.Tinh_Thanh?.Replace("'", "\\'") ?? "")', '@(address.Ghi_Chu?.Replace("'", "\\'") ?? "")', '@(address.Ghi_Chu_KhachHang?.Replace("'", "\\'") ?? "")')">Sửa</button>
                                    </div>
                                }
                            }
                            else
                            {
                                <p class="text-gray-500">Không có địa chỉ nào.</p>
                            }
                        </div>
                        <span id="addressError" class="error-message">Vui lòng chọn một địa chỉ.</span>
                        <button type="button" class="add-address-btn mb-6 w-full" onclick="openAddAddressModal()"><i class="bi bi-plus-circle mr-2"></i>Thêm Địa Chỉ Mới</button>

                        <h4 class="text-lg font-semibold text-gray-800 mb-3">Chọn Voucher</h4>
                        <select name="selectedVoucher" id="voucherSelect" class="mb-6" onchange="applyVoucher()">
                            <option value="" data-minimum="0" data-discount="0">Không sử dụng voucher</option>
                            @if (Model.Vouchers != null && Model.Vouchers.Any())
                            {
                                foreach (var voucher in Model.Vouchers)
                                {
                                    <option value="@voucher.ID_Voucher" data-minimum="@voucher.So_Tien_Dat_Yeu_Cau" data-discount="@voucher.Gia_Tri_Giam">@(voucher.Ten ?? "Không xác định") (Giảm @voucher.Gia_Tri_Giam% - Đơn tối thiểu @voucher.So_Tien_Dat_Yeu_Cau.ToString("N0", new System.Globalization.CultureInfo("vi-VN")) đ)</option>
                                }
                            }
                        </select>
                        <span id="voucherError" class="error-message">Đơn hàng chưa đạt giá trị tối thiểu để sử dụng voucher này.</span>

                        <h4 class="text-lg font-semibold text-gray-800 mb-3">Chọn Phương Thức Thanh Toán</h4>
                        <div id="paymentMethods" class="mb-6">
                            @if (Model.PaymentMethods != null && Model.PaymentMethods.Any())
                            {
                                foreach (var method in Model.PaymentMethods.Where(m => new[] { 4, 5, 6 }.Contains(m.ID_Hinh_Thuc_Thanh_Toan)))
                                {
                                    string iconClass = method.ID_Hinh_Thuc_Thanh_Toan switch
                                    {
                                        4 => "bi-truck", // Thanh Toán Khi Nhận Hàng
                                        5 => "bi-wallet2", // Thanh Toán MOMO
                                        6 => "bi-qr-code", // Chuyển Khoản Mã QR
                                        _ => "bi-credit-card" // Mặc định
                                    };
                                    <div class="form-group">
                                        <input type="radio" id="payment_@method.ID_Hinh_Thuc_Thanh_Toan" name="selectedPaymentMethod" value="@method.ID_Hinh_Thuc_Thanh_Toan" class="sr-only" onchange="handlePaymentMethodChange(this)" required />
                                        <label for="payment_@method.ID_Hinh_Thuc_Thanh_Toan" class="radio-label flex items-center gap-2">
                                            <i class="bi @iconClass text-primary text-lg"></i>
                                            <span>@(method.Phuong_Thuc_Thanh_Toan ?? "Không xác định")</span>
                                            @if (!string.IsNullOrEmpty(method.Cong_Thanh_Toan))
                                            {
                                                <span class="text-sm text-gray-500">(@method.Cong_Thanh_Toan)</span>
                                            }
                                        </label>
                                    </div>
                                }
                            }
                            else
                            {
                                <p class="text-gray-500">Không có phương thức thanh toán nào khả dụng.</p>
                            }
                        </div>
                        <span id="paymentError" class="error-message">Vui lòng chọn một phương thức thanh toán.</span>

                        <button type="submit" class="submit-btn w-full mt-4" onclick="return validateForm()"><i class="bi bi-check-circle mr-2"></i>Xác Nhận Thanh Toán</button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Modal thêm địa chỉ -->
        <div id="addAddressModal" class="modal">
            <div class="modal-content">
                <h3 class="text-lg font-bold text-gray-800 mb-4">Thêm Địa Chỉ Mới</h3>
                <form asp-action="AddAddress" method="post">
                    @Html.AntiForgeryToken()
                    <div class="form-group">
                        <label for="add_Dia_Chi">Địa Chỉ:</label>
                        <input id="add_Dia_Chi" name="Dia_Chi" class="w-full p-2 border border-gray-300 rounded" required />
                    </div>
                    <div class="form-group">
                        <label for="add_Tinh_Thanh">Tỉnh/Thành:</label>
                        <input id="add_Tinh_Thanh" name="Tinh_Thanh" class="w-full p-2 border border-gray-300 rounded" required />
                    </div>
                    <div class="form-group">
                        <label for="add_Ghi_Chu">Ghi Chú:</label>
                        <input id="add_Ghi_Chu" name="Ghi_Chu" class="w-full p-2 border border-gray-300 rounded" />
                    </div>
                    <div class="form-group">
                        <label for="add_Ghi_Chu_KhachHang">Ghi Chú Khách Hàng:</label>
                        <input id="add_Ghi_Chu_KhachHang" name="Ghi_Chu_KhachHang" class="w-full p-2 border border-gray-300 rounded" />
                    </div>
                    <div class="flex justify-end gap-2">
                        <button type="submit" class="submit-btn">Thêm</button>
                        <button type="button" class="close-button" onclick="closeAddAddressModal()">Hủy</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Modal sửa địa chỉ -->
        <div id="editAddressModal" class="modal">
            <div class="modal-content">
                <h3 class="text-lg font-bold text-gray-800 mb-4">Sửa Địa Chỉ</h3>
                <form asp-action="UpdateAddress" method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="edit_ID_Dia_Chi" name="ID_Dia_Chi" />
                    <div class="form-group">
                        <label for="edit_Dia_Chi">Địa Chỉ:</label>
                        <input id="edit_Dia_Chi" name="Dia_Chi" class="w-full p-2 border border-gray-300 rounded" required />
                    </div>
                    <div class="form-group">
                        <label for="edit_Tinh_Thanh">Tỉnh/Thành:</label>
                        <input id="edit_Tinh_Thanh" name="Tinh_Thanh" class="w-full p-2 border border-gray-300 rounded" required />
                    </div>
                    <div class="form-group">
                        <label for="edit_Ghi_Chu">Ghi Chú:</label>
                        <input id="edit_Ghi_Chu" name="Ghi_Chu" class="w-full p-2 border border-gray-300 rounded" />
                    </div>
                    <div class="form-group">
                        <label for="edit_Ghi_Chu_KhachHang">Ghi Chú Khách Hàng:</label>
                        <input id="edit_Ghi_Chu_KhachHang" name="Ghi_Chu_KhachHang" class="w-full p-2 border border-gray-300 rounded" />
                    </div>
                    <input type="hidden" name="Trang_Thai" value="true" />
                    <div class="flex justify-end gap-2">
                        <button type="submit" class="submit-btn">Cập Nhật</button>
                        <button type="button" class="close-button" onclick="closeEditModal()">Hủy</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Modal hiển thị mã QR -->
        <div id="qrCodeModal" class="modal">
            <div class="modal-content">
                <h3 class="text-lg font-bold text-gray-800 mb-4">Quét Mã QR Để Thanh Toán</h3>
                <div id="qrLoading" class="loading-spinner"></div>
                <div class="qr-code-container" id="qrCodeContainer" style="display: none;">
                    <img id="qrCodeImage" class="qr-code-image" src="" alt="QR Code Thanh Toán" />
                    <div class="qr-info">
                        <p>Số tiền: <span id="qrAmount"></span></p>
                        <p>Nội dung: <span id="qrAddInfo"></span></p>
                        <p>Người nhận: <span>NGUYEN DUC PHUOC</span></p>
                    </div>
                </div>
                <div class="flex justify-end gap-2">
                    <button type="button" class="close-button" onclick="closeQRCodeModal()">Đóng</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Lấy dữ liệu từ cookie
        const selectedItemsCookie = '@Html.Raw(ViewBag.SelectedItems)';
        let selectedItems = [];
        let cartTotal = 0;
        let sizes = [];

        // Fetch size prices from API
        async function fetchSizes() {
            try {
                const response = await fetch('https://localhost:7169/api/Size');
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                sizes = await response.json();
                console.log('Sizes from API:', sizes);
            } catch (e) {
                console.error('Error fetching sizes:', e);
                showAlert('Lỗi khi lấy dữ liệu kích thước. Vui lòng thử lại.', 'error');
                sizes = [];
            }
        }

        // Get size price by ID
        function getSizePrice(idSize) {
            const size = sizes.find(s => s.iD_Size === idSize);
            return size ? size.gia : 0;
        }

        // Render cart items dynamically
        async function renderCartItems() {
            await fetchSizes();
            const cartItemsContainer = document.getElementById('cartItemsContainer');
            const cartTotalElement = document.getElementById('cartTotal');
            cartItemsContainer.innerHTML = '';

            if (!selectedItems.length) {
                cartItemsContainer.innerHTML = '<p class="cart-empty text-gray-500">Không có sản phẩm nào được chọn để thanh toán. Vui lòng kiểm tra lại.</p>';
                cartTotalElement.textContent = '0 đ';
                return;
            }

            cartTotal = 0;
            selectedItems.forEach(item => {
                const toppingTotal = item.toppings?.reduce((sum, t) => sum + (t.gia_Topping || 0), 0) || 0;
                const sizePrice = getSizePrice(item.iD_Size);
                const basePrice = item.khuyen_Mai && item.khuyen_Mai.ten_Khuyen_Mai ? item.gia_Hien_Thi : item.gia_Goc;
                const itemTotal = (basePrice + toppingTotal + sizePrice) * item.so_Luong;
                cartTotal += itemTotal;

                const cartItem = document.createElement('div');
                cartItem.className = 'cart-item';
                cartItem.innerHTML = `
                    <img src="https://localhost:7169${item.hinh_Anh || '/images/products/default.jpg'}" alt="${item.ten_San_Pham}" class="cart-item-image">
                    <div class="cart-item-details">
                        <div class="cart-item-name">${item.ten_San_Pham}</div>
                        <div class="cart-item-options">
                            ${item.ten_Size ? `Kích thước: ${item.ten_Size} (+${sizePrice.toLocaleString('vi-VN')} đ)<br>` : ''}
                            ${item.ten_LuongDa ? `Lượng đá: ${item.ten_LuongDa}<br>` : ''}
                            ${item.ten_DoNgot ? `Độ ngọt: ${item.ten_DoNgot}<br>` : ''}
                            ${item.toppings && item.toppings.length ? `Topping: ${item.toppings.map(t => `${t.ten_Topping} (+${t.gia_Topping.toLocaleString('vi-VN')} đ)`).join(', ')}<br>` : ''}
                            ${item.ghi_Chu ? `Ghi chú: ${item.ghi_Chu}` : ''}
                            ${item.khuyen_Mai && item.khuyen_Mai.ten_Khuyen_Mai ? `<br>Khuyến mãi: ${item.khuyen_Mai.ten_Khuyen_Mai} (Giảm ${(item.gia_Goc - item.gia_Hien_Thi).toLocaleString('vi-VN')} đ)` : ''}
                        </div>
                        <div class="cart-item-price">
                            ${item.khuyen_Mai && item.khuyen_Mai.ten_Khuyen_Mai ?
                                `<span class="original-price">${(item.gia_Goc + toppingTotal + sizePrice).toLocaleString('vi-VN')} đ</span>
                                 <span class="discounted-price">${(item.gia_Hien_Thi + toppingTotal + sizePrice).toLocaleString('vi-VN')} đ</span>` :
                                `<span class="regular-price">${(item.gia_Goc + toppingTotal + sizePrice).toLocaleString('vi-VN')} đ</span>`}
                        </div>
                    </div>
                    <div class="cart-item-controls">
                        <span class="quantity">x${item.so_Luong > 0 ? item.so_Luong : 'N/A'}</span>
                    </div>
                `;
                cartItemsContainer.appendChild(cartItem);
            });

            cartTotalElement.textContent = cartTotal.toLocaleString('vi-VN') + ' đ';
        }

        // Initialize cart
        try {
            selectedItems = JSON.parse(decodeURIComponent(selectedItemsCookie));
            console.log('Selected Items from Cookie:', selectedItems);
            renderCartItems();
        } catch (e) {
            console.error('Error parsing selectedItemsCookie:', e, 'Input:', selectedItemsCookie);
            showAlert('Lỗi khi xử lý dữ liệu giỏ hàng. Vui lòng thử lại.', 'error');
            selectedItems = [];
            document.getElementById('cartItemsContainer').innerHTML = '<p class="cart-empty text-gray-500">Không có sản phẩm nào được chọn để thanh toán. Vui lòng kiểm tra lại.</p>';
            document.getElementById('cartTotal').textContent = '0 đ';
        }

        let selectedVoucher = null;

        function openAddAddressModal() {
            document.getElementById('addAddressModal').style.display = 'block';
        }

        function closeAddAddressModal() {
            document.getElementById('addAddressModal').style.display = 'none';
        }

        function openEditModal(id, diaChi, tinhThanh, ghiChu, ghiChuKhachHang) {
            document.getElementById('edit_ID_Dia_Chi').value = id;
            document.getElementById('edit_Dia_Chi').value = diaChi;
            document.getElementById('edit_Tinh_Thanh').value = tinhThanh;
            document.getElementById('edit_Ghi_Chu').value = ghiChu;
            document.getElementById('edit_Ghi_Chu_KhachHang').value = ghiChuKhachHang;
            document.getElementById('editAddressModal').style.display = 'block';
        }

        function closeEditModal() {
            document.getElementById('editAddressModal').style.display = 'none';
        }

        function openQRCodeModal(total, addInfo) {
            const qrLoading = document.getElementById('qrLoading');
            const qrCodeContainer = document.getElementById('qrCodeContainer');
            const qrCodeImage = document.getElementById('qrCodeImage');
            const qrAmount = document.getElementById('qrAmount');
            const qrAddInfo = document.getElementById('qrAddInfo');

            // Hiển thị spinner trong khi tải mã QR
            qrLoading.style.display = 'block';
            qrCodeContainer.style.display = 'none';

            // Giả lập thời gian tải mã QR
            setTimeout(() => {
                const qrUrl = `https://img.vietqr.io/image/mbbank-0834119666-compact2.jpg?amount=${total}&addInfo=${encodeURIComponent(addInfo)}&accountName=NGUYEN%20DUC%20PHUOC`;
                qrCodeImage.src = qrUrl;
                qrAmount.textContent = total.toLocaleString('vi-VN') + ' đ';
                qrAddInfo.textContent = addInfo;

                // Ẩn spinner và hiển thị mã QR
                qrLoading.style.display = 'none';
                qrCodeContainer.style.display = 'block';
                document.getElementById('qrCodeModal').style.display = 'block';
            }, 1000); // Giả lập thời gian tải 1 giây
        }

        function closeQRCodeModal() {
            document.getElementById('qrCodeModal').style.display = 'none';
        }

        function handlePaymentMethodChange(radio) {
            const paymentMethodId = parseInt(radio.value);
            if (paymentMethodId === 6) { // Chuyển Khoản Mã QR
                const addInfo = 'Thanh toan don hang HD' + new Date().getTime();
                const total = selectedVoucher ? cartTotal * (1 - selectedVoucher.discountPercent / 100) : cartTotal;
                openQRCodeModal(total, addInfo);
            } else {
                closeQRCodeModal();
            }
        }

        function applyVoucher() {
            const voucherSelect = document.getElementById('voucherSelect');
            const voucherError = document.getElementById('voucherError');
            const cartTotalElement = document.getElementById('cartTotal');
            const selectedOption = voucherSelect.options[voucherSelect.selectedIndex];
            const minimumOrder = parseFloat(selectedOption.getAttribute('data-minimum')) || 0;
            const discountPercent = parseFloat(selectedOption.getAttribute('data-discount')) || 0;

            if (minimumOrder > 0 && cartTotal < minimumOrder) {
                voucherError.style.display = 'block';
                voucherSelect.value = '';
                selectedVoucher = null;
                cartTotalElement.textContent = cartTotal.toLocaleString('vi-VN') + ' đ';
                showAlert('Đơn hàng chưa đạt giá trị tối thiểu để sử dụng voucher này!', 'error');
                return;
            }

            voucherError.style.display = 'none';
            selectedVoucher = {
                id: selectedOption.value,
                discountPercent: discountPercent,
                minimumOrder: minimumOrder
            };

            const discount = cartTotal * (discountPercent / 100);
            const discountedTotal = cartTotal - discount;
            cartTotalElement.textContent = discountedTotal.toLocaleString('vi-VN') + ' đ';
        }

        function clearCartCookie() {
            document.cookie = 'selectedItems=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
            console.log('Cookie giỏ hàng đã được xóa');
        }

        async function deleteCartItems(cartItemIds) {
            if (!cartItemIds || cartItemIds.length === 0) {
                console.warn('Không có mục giỏ hàng nào để xóa');
                return true;
            }

            const deletePromises = cartItemIds.map(id =>
                fetch(`https://localhost:7169/api/Gio_Hang/delete/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        console.error(`Lỗi khi xóa giỏ hàng chi tiết ID ${id}: ${response.status} - ${response.statusText}`);
                        throw new Error(`Lỗi khi xóa giỏ hàng chi tiết ID ${id}`);
                    }
                    console.log(`Xóa giỏ hàng chi tiết ID ${id} thành công`);
                    return id;
                })
                .catch(error => {
                    console.error(`Lỗi khi xóa giỏ hàng chi tiết ID ${id}:`, error);
                    return null;
                })
            );

            try {
                const results = await Promise.all(deletePromises);
                const failedIds = results.filter(id => id === null);
                if (failedIds.length > 0) {
                    showAlert(`Lỗi khi xóa một số mục giỏ hàng: ${failedIds.join(', ')}`, 'error');
                    return false;
                }
                console.log('Tất cả mục giỏ hàng chi tiết đã được xóa');
                return true;
            } catch (error) {
                console.error('Lỗi khi xóa các mục giỏ hàng:', error);
                showAlert('Lỗi khi xóa giỏ hàng. Một số mục có thể vẫn còn.', 'error');
                return false;
            }
        }

        async function validateForm() {
            const paymentSelected = document.querySelector('input[name="selectedPaymentMethod"]:checked');
            const addressSelected = document.querySelector('input[name="selectedAddress"]:checked');
            const paymentError = document.getElementById('paymentError');
            const addressError = document.getElementById('addressError');
            const submitBtn = document.querySelector('.submit-btn');

            paymentError.style.display = paymentSelected ? 'none' : 'block';
            addressError.style.display = addressSelected ? 'none' : 'block';

            if (!paymentSelected || !addressSelected) {
                showAlert('Vui lòng chọn phương thức thanh toán và địa chỉ!', 'error');
                return false;
            }

            if (!selectedItems.length) {
                showAlert('Không có sản phẩm nào được chọn để thanh toán!', 'error');
                return false;
            }

            // Hiển thị hiệu ứng tải trên nút thanh toán
            submitBtn.classList.add('loading');
            submitBtn.disabled = true;

            // Tạo JSON thanh toán theo định dạng API
            const checkoutData = {
                iD_Khach_Hang: parseInt(document.getElementById('customerId').value) || 0,
                iD_Hinh_Thuc_Thanh_Toan: paymentSelected ? parseInt(paymentSelected.value) : 0,
                iD_Dia_Chi: addressSelected ? parseInt(addressSelected.value) : 0,
                iD_Voucher: selectedVoucher && selectedVoucher.id ? parseInt(selectedVoucher.id) : null,
                tong_Tien: selectedVoucher ? cartTotal * (1 - selectedVoucher.discountPercent / 100) : cartTotal,
                ghi_Chu: '',
                ma_Hoa_Don: 'HD' + new Date().getTime(),
                hoaDonChiTiets: selectedItems.map(item => {
                    const toppingTotal = item.toppings?.reduce((sum, t) => sum + (t.gia_Topping || 0), 0) || 0;
                    const sizePrice = getSizePrice(item.iD_Size);
                    const basePrice = item.khuyen_Mai && item.khuyen_Mai.ten_Khuyen_Mai ? item.gia_Hien_Thi : item.gia_Goc;
                    const itemTotal = (basePrice + toppingTotal + sizePrice) * item.so_Luong;

                    return {
                        iD_San_Pham: item.iD_San_Pham || 0,
                        ten_San_Pham: item.ten_San_Pham || '',
                        gia_Hien_Thi: item.gia_Hien_Thi || 0,
                        gia_Goc: item.gia_Goc || 0,
                        so_Luong: item.so_Luong || 0,
                        ten_Size: item.ten_Size || '',
                        ten_LuongDa: item.ten_LuongDa || '',
                        ten_DoNgot: item.ten_DoNgot || '',
                        ghi_Chu: item.ghi_Chu || '',
                        iD_Size: item.iD_Size || 0,
                        iD_SanPham_DoNgot: item.iD_SanPham_DoNgot || 0,
                        iD_LuongDa: item.iD_LuongDa || 0,
                        ma_HoaDon_ChiTiet: 'HDC' + item.iD_GioHang_ChiTiet,
                        gia_Them_Size: sizePrice,
                        gia_San_Pham: basePrice + toppingTotal + sizePrice,
                        tong_Tien: itemTotal,
                        hoaDonChiTietToppings: item.toppings?.map(t => ({
                            iD_Topping: t.iD_Topping || 0,
                            ten_Topping: t.ten_Topping || '',
                            so_Luong: 1,
                            gia_Topping: t.gia_Topping || 0
                        })) || []
                    };
                })
            };

            console.log('Checkout Data:', JSON.stringify(checkoutData, null, 2));

            // Gửi dữ liệu đến API thanh toán
            try {
                const response = await fetch('https://localhost:7169/api/BanHangTK/checkout', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(checkoutData)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    showAlert(`Lỗi khi gửi yêu cầu thanh toán: ${errorData.message || 'Không xác định'}`, 'error');
                    submitBtn.classList.remove('loading');
                    submitBtn.disabled = false;
                    return false;
                }

                const result = await response.json();
                showAlert('Thanh toán thành công!', 'success');

                // Xóa các mục giỏ hàng chi tiết
                const cartItemIds = selectedItems.map(item => item.iD_GioHang_ChiTiet);
                const deleteSuccess = await deleteCartItems(cartItemIds);

                if (deleteSuccess) {
                    // Xóa cookie giỏ hàng
                    clearCartCookie();
                    // Làm mới danh sách giỏ hàng trên giao diện
                    selectedItems = [];
                    await renderCartItems();
                }

                // Chuyển hướng đến trang /QLDonHangTk
                setTimeout(() => {
                    window.location.href = '/QLDonHangTk';
                }, 2000);

                submitBtn.classList.remove('loading');
                submitBtn.disabled = false;
                return false; // Ngăn form submit mặc định
            } catch (e) {
                console.error('Error sending checkout request:', e);
                showAlert('Lỗi khi gửi yêu cầu thanh toán. Vui lòng thử lại.', 'error');
                submitBtn.classList.remove('loading');
                submitBtn.disabled = false;
                return false;
            }
        }

        function showAlert(message, type) {
            const alert = document.createElement('div');
            alert.className = `alert-notification alert-${type} animate__animated animate__slideInRight fixed top-4 right-4 z-50 max-w-sm`;
            alert.innerHTML = `
                <i class="bi bi-${type === 'success' ? 'check-circle-fill' : 'exclamation-circle-fill'} mr-2 text-lg"></i>
                <div>${message}</div>
                <button type="button" class="close-button" onclick="this.parentElement.remove()">
                    <i class="bi bi-x"></i>
                </button>
            `;
            document.body.appendChild(alert);
            setTimeout(() => {
                if (alert.parentElement) {
                    alert.remove();
                }
            }, 3000);
        }
    </script>


 *@





@model FE.Models.CheckoutTkViewModel
@{
    ViewData["Title"] = "Thanh Toán";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css">
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">

<style>
    :root {
        --primary: #3B82F6;
        --primary-dark: #2563EB;
        --secondary: #F59E0B;
        --light-bg: #F8FAFC;
        --card-bg: #FFFFFF;
        --text-primary: #1F2937;
        --text-secondary: #6B7280;
        --success: #10B981;
        --danger: #EF4444;
    }

    body {
        font-family: 'Roboto', sans-serif;
        background-color: var(--light-bg);
        color: var(--text-primary);
    }

    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
    }

    .modal-content {
        background: linear-gradient(135deg, #FFFFFF 0%, #F9FAFB 100%);
        margin: 10% auto;
        padding: 1.5rem;
        border: none;
        width: 90%;
        max-width: 600px;
        border-radius: 16px;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
    }

    .error-message {
        color: var(--danger);
        font-size: 0.75rem;
        margin-top: 0.5rem;
        display: none;
    }

    .form-group {
        margin-bottom: 1.25rem;
    }

    .cart-item {
        display: flex;
        align-items: flex-start;
        padding: 1rem;
        border-bottom: 1px solid #E5E7EB;
        transition: all 0.2s ease;
    }

        .cart-item:hover {
            background-color: #F9FAFB;
        }

    .cart-item-image {
        width: 64px;
        height: 64px;
        object-fit: cover;
        border-radius: 8px;
        margin-right: 1rem;
    }

    .cart-item-details {
        flex: 1;
    }

    .cart-item-name {
        font-size: 1rem;
        font-weight: 600;
        color: var(--text-primary);
    }

    .cart-item-options {
        font-size: 0.85rem;
        color: var(--text-secondary);
        margin-top: 0.5rem;
    }

    .cart-item-price {
        font-size: 1rem;
        font-weight: 600;
        color: var(--primary);
    }

    .cart-total {
        font-weight: 700;
        font-size: 1.25rem;
        color: var(--text-primary);
        margin-top: 1.5rem;
    }

    .original-price {
        text-decoration: line-through;
        color: var(--text-secondary);
        font-size: 0.9rem;
        margin-right: 0.5rem;
    }

    .discounted-price {
        color: var(--danger);
        font-weight: 600;
        font-size: 1rem;
    }

    .regular-price {
        color: var(--primary);
        font-weight: 600;
        font-size: 1rem;
    }

    .cart-item-controls {
        display: flex;
        align-items: center;
        justify-content: flex-end;
        min-width: 60px;
        font-size: 0.9rem;
        font-weight: 500;
        color: var(--text-primary);
    }

        .cart-item-controls .quantity {
            margin-left: 0.5rem;
            font-weight: 600;
        }

    .form-group label {
        font-size: 0.9rem;
        font-weight: 500;
        color: var(--text-primary);
        margin-bottom: 0.5rem;
        display: block;
    }

    .form-group input[type="radio"] {
        margin-right: 0.5rem;
    }

        .form-group input[type="radio"]:checked + .radio-label {
            background-color: #EFF6FF;
            border-color: var(--primary);
            color: var(--primary);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
            font-weight: 700;
            border-width: 2px;
        }

    .add-address-btn, .submit-btn, .edit-address-btn {
        background: linear-gradient(135deg, var(--primary), var(--primary-dark));
        color: white;
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        border: none;
        font-size: 0.9rem;
        font-weight: 500;
        transition: all 0.2s ease;
        position: relative;
    }

        .add-address-btn:hover, .submit-btn:hover, .edit-address-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(59, 130, 246, 0.25);
        }

        .submit-btn.loading::after {
            content: '';
            display: inline-block;
            border: 3px solid #ffffff;
            border-top: 3px solid var(--primary);
            border-radius: 50%;
            width: 16px;
            height: 16px;
            animation: spin 1s linear infinite;
            position: absolute;
            right: 1rem;
            top: 50%;
            transform: translateY(-50%);
        }

    .alert-notification {
        border-radius: 8px;
        padding: 0.75rem 1rem;
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        animation: slideIn 0.4s ease-out;
    }

    .alert-error {
        background-color: #FEF2F2;
        color: #991B1B;
        border-left: 3px solid var(--danger);
    }

    .alert-success {
        background-color: #ECFDF5;
        color: #065F46;
        border-left: 3px solid var(--success);
    }

    .close-button {
        background: none;
        border: none;
        font-size: 1.2rem;
        color: var(--text-secondary);
        transition: all 0.2s ease;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
    }

        .close-button:hover {
            background-color: #F3F4F6;
            color: var(--text-primary);
        }

    select {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #E5E7EB;
        border-radius: 8px;
        font-size: 0.9rem;
    }

        select:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.25);
        }

        select:disabled {
            background-color: #F3F4F6;
            cursor: not-allowed;
        }

    .section-container {
        background: var(--card-bg);
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        margin-bottom: 1.5rem;
    }

    .radio-label {
        display: block;
        padding: 0.75rem;
        border: 1px solid #E5E7EB;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .radio-label:hover {
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

    .qr-code-container {
        text-align: center;
        margin: 1rem 0;
    }

    .qr-code-image {
        max-width: 250px;
        width: 100%;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .qr-info {
        font-size: 0.9rem;
        color: var(--text-secondary);
        margin-top: 1rem;
    }

        .qr-info span {
            font-weight: 600;
            color: var(--text-primary);
        }

    .loading-spinner {
        display: none;
        border: 4px solid #f3f3f3;
        border-top: 4px solid var(--primary);
        border-radius: 50%;
        width: 24px;
        height: 24px;
        animation: spin 1s linear infinite;
        margin: 0 auto;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    @@keyframes slideIn {
        from {
            transform: translateY(-20px);
            opacity: 0;
        }

        to {
            transform: translateY(0);
            opacity: 1;
        }
    }
</style>

<div class="container mx-auto py-8 px-4 sm:px-6 lg:px-8">
    <h2 class="text-3xl font-bold text-gray-800 mb-8">Thanh Toán</h2>

    <!-- Notifications -->
@if (TempData["Error"] != null)
{
        <div class="alert-notification alert-error animate__animated animate__fadeInDown">
            <i class="bi bi-exclamation-circle-fill mr-2 text-lg"></i>
            <div class="flex-1">@TempData["Error"]</div>
            <button type="button" class="close-button" data-bs-dismiss="alert">
                <i class="bi bi-x"></i>
            </button>
        </div>
}
@if (TempData["Success"] != null)
{
        <div class="alert-notification alert-success animate__animated animate__fadeInDown">
            <i class="bi bi-check-circle-fill mr-2 text-lg"></i>
            <div class="flex-1">@TempData["Success"]</div>
            <button type="button" class="close-button" data-bs-dismiss="alert">
                <i class="bi bi-x"></i>
            </button>
        </div>
}

    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <!-- Left: Cart Items -->
        <div>
            <h3 class="text-xl font-bold text-gray-800 mb-4">Giỏ Hàng</h3>
            <div id="cartItems" class="section-container">
                @if (Model.CartItems != null && Model.CartItems.Any())
                {
                    <div id="cartItemsContainer"></div>
                    <div class="cart-total">
                        Tổng cộng: <span id="cartTotal">0 đ</span>
                    </div>
                }
                else
                {
                    <p class="cart-empty text-gray-500">Không có sản phẩm nào được chọn để thanh toán. Vui lòng kiểm tra lại.</p>
                }
            </div>
        </div>

        <!-- Right: Checkout Form -->
        <div>
            <h3 class="text-xl font-bold text-gray-800 mb-4">Thông Tin Thanh Toán</h3>
            <div class="section-container">
                <form id="checkoutForm" method="post" asp-action="ProcessCheckout">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="selectedItems" value="@Html.Raw(ViewBag.SelectedItems)" />
                    <input type="hidden" id="customerId" value="@(ViewData["CustomerId"] ?? "0")" />

                    <h4 class="text-lg font-semibold text-gray-800 mb-3">Chọn Địa Chỉ</h4>
                    <div id="addresses" class="mb-6">
                        @if (Model.Addresses != null && Model.Addresses.Any())
                        {
                            foreach (var address in Model.Addresses)
                            {
                                <div class="form-group">
                                    <input type="radio" id="address_@address.ID_Dia_Chi" name="selectedAddress" value="@address.ID_Dia_Chi" class="sr-only" required />
                                    <label for="address_@address.ID_Dia_Chi" class="radio-label flex items-center gap-2">
                                        <i class="bi bi-geo-alt text-primary"></i>
                                        @(address.Dia_Chi ?? "Không xác định"), @(address.Tinh_Thanh ?? "Không xác định") (@(address.Ghi_Chu_KhachHang ?? "Không có ghi chú"))
                                    </label>
                                    <button type="button" class="edit-address-btn ml-auto text-sm" onclick="openEditModal(@address.ID_Dia_Chi, '@(address.Dia_Chi?.Replace("'", "\\'") ?? "")', '@(address.Tinh_Thanh?.Replace("'", "\\'") ?? "")', '@(address.Ghi_Chu?.Replace("'", "\\'") ?? "")', '@(address.Ghi_Chu_KhachHang?.Replace("'", "\\'") ?? "")')">Sửa</button>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="text-gray-500">Không có địa chỉ nào.</p>
                        }
                    </div>
                    <span id="addressError" class="error-message">Vui lòng chọn một địa chỉ.</span>
                    <button type="button" class="add-address-btn mb-6 w-full" onclick="openAddAddressModal()"><i class="bi bi-plus-circle mr-2"></i>Thêm Địa Chỉ Mới</button>

                    <h4 class="text-lg font-semibold text-gray-800 mb-3">Chọn Voucher</h4>
                    <select name="selectedVoucher" id="voucherSelect" class="mb-6" onchange="applyVoucher()">
                        <option value="" data-minimum="0" data-discount="0">Không sử dụng voucher</option>
                        @if (Model.Vouchers != null && Model.Vouchers.Any())
                        {
                            foreach (var voucher in Model.Vouchers)
                            {
                                <option value="@voucher.ID_Voucher" data-minimum="@voucher.So_Tien_Dat_Yeu_Cau" data-discount="@voucher.Gia_Tri_Giam">@(voucher.Ten ?? "Không xác định") (Giảm @voucher.Gia_Tri_Giam% - Đơn tối thiểu @voucher.So_Tien_Dat_Yeu_Cau.ToString("N0", new System.Globalization.CultureInfo("vi-VN")) đ)</option>
                            }
                        }
                    </select>
                    <span id="voucherError" class="error-message">Đơn hàng chưa đạt giá trị tối thiểu để sử dụng voucher này.</span>

                    <h4 class="text-lg font-semibold text-gray-800 mb-3">Chọn Phương Thức Thanh Toán</h4>
                    <div id="paymentMethods" class="mb-6">
                        @{
                            var allowedIds = new[] { 4, 5, 6 };
                        }
                        @if (Model.PaymentMethods != null && Model.PaymentMethods.Any())
                        {
                            foreach (var method in Model.PaymentMethods)
                            {
                                if (allowedIds.Contains((int)method.ID_Hinh_Thuc_Thanh_Toan))
                                {
                                    string iconClass = method.ID_Hinh_Thuc_Thanh_Toan switch
                                    {
                                        4 => "bi-truck", // Thanh Toán Khi Nhận Hàng
                                        5 => "bi-wallet2", // Thanh Toán MOMO
                                        6 => "bi-qr-code", // Chuyển Khoản Mã QR
                                        _ => "bi-credit-card" // Mặc định
                                    };
                                    <div class="form-group">
                                        <input type="radio" id="payment_@method.ID_Hinh_Thuc_Thanh_Toan" name="selectedPaymentMethod" value="@method.ID_Hinh_Thuc_Thanh_Toan" class="sr-only" onchange="handlePaymentMethodChange(this)" required />
                                        <label for="payment_@method.ID_Hinh_Thuc_Thanh_Toan" class="radio-label flex items-center gap-2">
                                            <i class="bi @iconClass text-primary text-lg"></i>
                                            <span>@(method.Phuong_Thuc_Thanh_Toan ?? "Không xác định")</span>
                                            @if (!string.IsNullOrEmpty(method.Cong_Thanh_Toan))
                                            {
                                                <span class="text-sm text-gray-500">(@method.Cong_Thanh_Toan)</span>
                                            }
                                        </label>
                                    </div>
                                }
                            }
                        }
                        else
                        {
                            <p class="text-gray-500">Không có phương thức thanh toán nào khả dụng.</p>
                        }
                    </div>
                    <span id="paymentError" class="error-message">Vui lòng chọn một phương thức thanh toán.</span>

                    <button type="submit" class="submit-btn w-full mt-4" onclick="return validateForm()"><i class="bi bi-check-circle mr-2"></i>Xác Nhận Thanh Toán</button>
                </form>
            </div>
        </div>
    </div>

    <!-- Modal thêm địa chỉ -->
    <div id="addAddressModal" class="modal">
        <div class="modal-content">
            <h3 class="text-lg font-bold text-gray-800 mb-4">Thêm Địa Chỉ Mới</h3>
            <form asp-action="AddAddress" method="post">
                @Html.AntiForgeryToken()
                <div class="form-group">
                    <label for="add_Dia_Chi">Địa Chỉ:</label>
                    <input id="add_Dia_Chi" name="Dia_Chi" class="w-full p-2 border border-gray-300 rounded" required />
                </div>
                <div class="form-group">
                    <label for="add_Tinh_Thanh">Tỉnh/Thành:</label>
                    <input id="add_Tinh_Thanh" name="Tinh_Thanh" class="w-full p-2 border border-gray-300 rounded" required />
                </div>
                <div class="form-group">
                    <label for="add_Ghi_Chu">Ghi Chú:</label>
                    <input id="add_Ghi_Chu" name="Ghi_Chu" class="w-full p-2 border border-gray-300 rounded" />
                </div>
                <div class="form-group">
                    <label for="add_Ghi_Chu_KhachHang">Ghi Chú Khách Hàng:</label>
                    <input id="add_Ghi_Chu_KhachHang" name="Ghi_Chu_KhachHang" class="w-full p-2 border border-gray-300 rounded" />
                </div>
                <div class="flex justify-end gap-2">
                    <button type="submit" class="submit-btn">Thêm</button>
                    <button type="button" class="close-button" onclick="closeAddAddressModal()">Hủy</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal sửa địa chỉ -->
    <div id="editAddressModal" class="modal">
        <div class="modal-content">
            <h3 class="text-lg font-bold text-gray-800 mb-4">Sửa Địa Chỉ</h3>
            <form asp-action="UpdateAddress" method="post">
                @Html.AntiForgeryToken()
                <input type="hidden" id="edit_ID_Dia_Chi" name="ID_Dia_Chi" />
                <div class="form-group">
                    <label for="edit_Dia_Chi">Địa Chỉ:</label>
                    <input id="edit_Dia_Chi" name="Dia_Chi" class="w-full p-2 border border-gray-300 rounded" required />
                </div>
                <div class="form-group">
                    <label for="edit_Tinh_Thanh">Tỉnh/Thành:</label>
                    <input id="edit_Tinh_Thanh" name="Tinh_Thanh" class="w-full p-2 border border-gray-300 rounded" required />
                </div>
                <div class="form-group">
                    <label for="edit_Ghi_Chu">Ghi Chú:</label>
                    <input id="edit_Ghi_Chu" name="Ghi_Chu" class="w-full p-2 border border-gray-300 rounded" />
                </div>
                <div class="form-group">
                    <label for="edit_Ghi_Chu_KhachHang">Ghi Chú Khách Hàng:</label>
                    <input id="edit_Ghi_Chu_KhachHang" name="Ghi_Chu_KhachHang" class="w-full p-2 border border-gray-300 rounded" />
                </div>
                <input type="hidden" name="Trang_Thai" value="true" />
                <div class="flex justify-end gap-2">
                    <button type="submit" class="submit-btn">Cập Nhật</button>
                    <button type="button" class="close-button" onclick="closeEditModal()">Hủy</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal hiển thị mã QR -->
    <div id="qrCodeModal" class="modal">
        <div class="modal-content">
            <h3 class="text-lg font-bold text-gray-800 mb-4">Quét Mã QR Để Thanh Toán</h3>
            <div id="qrLoading" class="loading-spinner"></div>
            <div class="qr-code-container" id="qrCodeContainer" style="display: none;">
                <img id="qrCodeImage" class="qr-code-image" src="" alt="QR Code Thanh Toán" />
                <div class="qr-info">
                    <p>Số tiền: <span id="qrAmount"></span></p>
                    <p>Nội dung: <span id="qrAddInfo"></span></p>
                    <p>Người nhận: <span>NGUYEN DUC PHUOC</span></p>
                </div>
            </div>
            <div class="flex justify-end gap-2">
                <button type="button" class="close-button" onclick="closeQRCodeModal()">Đóng</button>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Lấy dữ liệu từ cookie
        const selectedItemsCookie = '@Html.Raw(ViewBag.SelectedItems)';
        let selectedItems = [];
        let cartTotal = 0;
        let sizes = [];

        // Fetch size prices from API
        async function fetchSizes() {
            try {
                const response = await fetch('https://localhost:7169/api/Size');
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                sizes = await response.json();
                console.log('Sizes from API:', sizes);
            } catch (e) {
                console.error('Error fetching sizes:', e);
                showAlert('Lỗi khi lấy dữ liệu kích thước. Vui lòng thử lại.', 'error');
                sizes = [];
            }
        }

        // Get size price by ID
        function getSizePrice(idSize) {
            const size = sizes.find(s => s.iD_Size === idSize);
            return size ? size.gia : 0;
        }

        // Render cart items dynamically
        async function renderCartItems() {
            await fetchSizes();
            const cartItemsContainer = document.getElementById('cartItemsContainer');
            const cartTotalElement = document.getElementById('cartTotal');
            cartItemsContainer.innerHTML = '';

            if (!selectedItems.length) {
                cartItemsContainer.innerHTML = '<p class="cart-empty text-gray-500">Không có sản phẩm nào được chọn để thanh toán. Vui lòng kiểm tra lại.</p>';
                cartTotalElement.textContent = '0 đ';
                return;
            }

            cartTotal = 0;
            selectedItems.forEach(item => {
                const toppingTotal = item.toppings?.reduce((sum, t) => sum + (t.gia_Topping || 0), 0) || 0;
                const sizePrice = getSizePrice(item.iD_Size);
                const basePrice = item.khuyen_Mai && item.khuyen_Mai.ten_Khuyen_Mai ? item.gia_Hien_Thi : item.gia_Goc;
                const itemTotal = (basePrice + toppingTotal + sizePrice) * item.so_Luong;
                cartTotal += itemTotal;

                const cartItem = document.createElement('div');
                cartItem.className = 'cart-item';
                cartItem.innerHTML = `
                    <img src="https://localhost:7169${item.hinh_Anh || '/images/products/default.jpg'}" alt="${item.ten_San_Pham}" class="cart-item-image">
                    <div class="cart-item-details">
                        <div class="cart-item-name">${item.ten_San_Pham}</div>
                        <div class="cart-item-options">
                            ${item.ten_Size ? `Kích thước: ${item.ten_Size} (+${sizePrice.toLocaleString('vi-VN')} đ)<br>` : ''}
                            ${item.ten_LuongDa ? `Lượng đá: ${item.ten_LuongDa}<br>` : ''}
                            ${item.ten_DoNgot ? `Độ ngọt: ${item.ten_DoNgot}<br>` : ''}
                            ${item.toppings && item.toppings.length ? `Topping: ${item.toppings.map(t => `${t.ten_Topping} (+${t.gia_Topping.toLocaleString('vi-VN')} đ)`).join(', ')}<br>` : ''}
                            ${item.ghi_Chu ? `Ghi chú: ${item.ghi_Chu}` : ''}
                            ${item.khuyen_Mai && item.khuyen_Mai.ten_Khuyen_Mai ? `<br>Khuyến mãi: ${item.khuyen_Mai.ten_Khuyen_Mai} (Giảm ${(item.gia_Goc - item.gia_Hien_Thi).toLocaleString('vi-VN')} đ)` : ''}
                        </div>
                        <div class="cart-item-price">
                            ${item.khuyen_Mai && item.khuyen_Mai.ten_Khuyen_Mai ?
                                `<span class="original-price">${(item.gia_Goc + toppingTotal + sizePrice).toLocaleString('vi-VN')} đ</span>
                                 <span class="discounted-price">${(item.gia_Hien_Thi + toppingTotal + sizePrice).toLocaleString('vi-VN')} đ</span>` :
                                `<span class="regular-price">${(item.gia_Goc + toppingTotal + sizePrice).toLocaleString('vi-VN')} đ</span>`}
                        </div>
                    </div>
                    <div class="cart-item-controls">
                        <span class="quantity">x${item.so_Luong > 0 ? item.so_Luong : 'N/A'}</span>
                    </div>
                `;
                cartItemsContainer.appendChild(cartItem);
            });

            cartTotalElement.textContent = cartTotal.toLocaleString('vi-VN') + ' đ';
        }

        // Initialize cart
        try {
            selectedItems = JSON.parse(decodeURIComponent(selectedItemsCookie));
            console.log('Selected Items from Cookie:', selectedItems);
            renderCartItems();
        } catch (e) {
            console.error('Error parsing selectedItemsCookie:', e, 'Input:', selectedItemsCookie);
            showAlert('Lỗi khi xử lý dữ liệu giỏ hàng. Vui lòng thử lại.', 'error');
            selectedItems = [];
            document.getElementById('cartItemsContainer').innerHTML = '<p class="cart-empty text-gray-500">Không có sản phẩm nào được chọn để thanh toán. Vui lòng kiểm tra lại.</p>';
            document.getElementById('cartTotal').textContent = '0 đ';
        }

        let selectedVoucher = null;

        function openAddAddressModal() {
            document.getElementById('addAddressModal').style.display = 'block';
        }

        function closeAddAddressModal() {
            document.getElementById('addAddressModal').style.display = 'none';
        }

        function openEditModal(id, diaChi, tinhThanh, ghiChu, ghiChuKhachHang) {
            document.getElementById('edit_ID_Dia_Chi').value = id;
            document.getElementById('edit_Dia_Chi').value = diaChi;
            document.getElementById('edit_Tinh_Thanh').value = tinhThanh;
            document.getElementById('edit_Ghi_Chu').value = ghiChu;
            document.getElementById('edit_Ghi_Chu_KhachHang').value = ghiChuKhachHang;
            document.getElementById('editAddressModal').style.display = 'block';
        }

        function closeEditModal() {
            document.getElementById('editAddressModal').style.display = 'none';
        }

        function openQRCodeModal(total, addInfo) {
            const qrLoading = document.getElementById('qrLoading');
            const qrCodeContainer = document.getElementById('qrCodeContainer');
            const qrCodeImage = document.getElementById('qrCodeImage');
            const qrAmount = document.getElementById('qrAmount');
            const qrAddInfo = document.getElementById('qrAddInfo');

            qrLoading.style.display = 'block';
            qrCodeContainer.style.display = 'none';

            setTimeout(() => {
                const qrUrl = `https://img.vietqr.io/image/mbbank-0834119666-compact2.jpg?amount=${total}&addInfo=${encodeURIComponent(addInfo)}&accountName=NGUYEN%20DUC%20PHUOC`;
                qrCodeImage.src = qrUrl;
                qrAmount.textContent = total.toLocaleString('vi-VN') + ' đ';
                qrAddInfo.textContent = addInfo;

                qrLoading.style.display = 'none';
                qrCodeContainer.style.display = 'block';
                document.getElementById('qrCodeModal').style.display = 'block';
            }, 1000);
        }

        function closeQRCodeModal() {
            document.getElementById('qrCodeModal').style.display = 'none';
        }

        function handlePaymentMethodChange(radio) {
            const paymentMethodId = parseInt(radio.value);
            if (paymentMethodId === 6) {
                const addInfo = 'Thanh toan don hang HD' + new Date().getTime();
                const total = selectedVoucher ? cartTotal * (1 - selectedVoucher.discountPercent / 100) : cartTotal;
                openQRCodeModal(total, addInfo);
            } else {
                closeQRCodeModal();
            }
        }

        function applyVoucher() {
            const voucherSelect = document.getElementById('voucherSelect');
            const voucherError = document.getElementById('voucherError');
            const cartTotalElement = document.getElementById('cartTotal');
            const selectedOption = voucherSelect.options[voucherSelect.selectedIndex];
            const minimumOrder = parseFloat(selectedOption.getAttribute('data-minimum')) || 0;
            const discountPercent = parseFloat(selectedOption.getAttribute('data-discount')) || 0;

            if (minimumOrder > 0 && cartTotal < minimumOrder) {
                voucherError.style.display = 'block';
                voucherSelect.value = '';
                selectedVoucher = null;
                cartTotalElement.textContent = cartTotal.toLocaleString('vi-VN') + ' đ';
                showAlert('Đơn hàng chưa đạt giá trị tối thiểu để sử dụng voucher này!', 'error');
                return;
            }

            voucherError.style.display = 'none';
            selectedVoucher = {
                id: selectedOption.value,
                discountPercent: discountPercent,
                minimumOrder: minimumOrder
            };

            const discount = cartTotal * (discountPercent / 100);
            const discountedTotal = cartTotal - discount;
            cartTotalElement.textContent = discountedTotal.toLocaleString('vi-VN') + ' đ';
        }

        function clearCartCookie() {
            document.cookie = 'selectedItems=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
            console.log('Cookie giỏ hàng đã được xóa');
        }

        async function deleteCartItems(cartItemIds) {
            if (!cartItemIds || cartItemIds.length === 0) {
                console.warn('Không có mục giỏ hàng nào để xóa');
                return true;
            }

            const deletePromises = cartItemIds.map(id =>
                fetch(`https://localhost:7169/api/Gio_Hang/delete/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        console.error(`Lỗi khi xóa giỏ hàng chi tiết ID ${id}: ${response.status} - ${response.statusText}`);
                        throw new Error(`Lỗi khi xóa giỏ hàng chi tiết ID ${id}`);
                    }
                    console.log(`Xóa giỏ hàng chi tiết ID ${id} thành công`);
                    return id;
                })
                .catch(error => {
                    console.error(`Lỗi khi xóa giỏ hàng chi tiết ID ${id}:`, error);
                    return null;
                })
            );

            try {
                const results = await Promise.all(deletePromises);
                const failedIds = results.filter(id => id === null);
                if (failedIds.length > 0) {
                    showAlert(`Lỗi khi xóa một số mục giỏ hàng: ${failedIds.join(', ')}`, 'error');
                    return false;
                }
                console.log('Tất cả mục giỏ hàng chi tiết đã được xóa');
                return true;
            } catch (error) {
                console.error('Lỗi khi xóa các mục giỏ hàng:', error);
                showAlert('Lỗi khi xóa giỏ hàng. Một số mục có thể vẫn còn.', 'error');
                return false;
            }
        }

        async function validateForm() {
            const paymentSelected = document.querySelector('input[name="selectedPaymentMethod"]:checked');
            const addressSelected = document.querySelector('input[name="selectedAddress"]:checked');
            const paymentError = document.getElementById('paymentError');
            const addressError = document.getElementById('addressError');
            const submitBtn = document.querySelector('.submit-btn');

            paymentError.style.display = paymentSelected ? 'none' : 'block';
            addressError.style.display = addressSelected ? 'none' : 'block';

            if (!paymentSelected || !addressSelected) {
                showAlert('Vui lòng chọn phương thức thanh toán và địa chỉ!', 'error');
                return false;
            }

            if (!selectedItems.length) {
                showAlert('Không có sản phẩm nào được chọn để thanh toán!', 'error');
                return false;
            }

            submitBtn.classList.add('loading');
            submitBtn.disabled = true;

            const checkoutData = {
                iD_Khach_Hang: parseInt(document.getElementById('customerId').value) || 0,
                iD_Hinh_Thuc_Thanh_Toan: paymentSelected ? parseInt(paymentSelected.value) : 0,
                iD_Dia_Chi: addressSelected ? parseInt(addressSelected.value) : 0,
                iD_Voucher: selectedVoucher && selectedVoucher.id ? parseInt(selectedVoucher.id) : null,
                tong_Tien: selectedVoucher ? cartTotal * (1 - selectedVoucher.discountPercent / 100) : cartTotal,
                ghi_Chu: '',
                ma_Hoa_Don: 'HD' + new Date().getTime(),
                hoaDonChiTiets: selectedItems.map(item => {
                    const toppingTotal = item.toppings?.reduce((sum, t) => sum + (t.gia_Topping || 0), 0) || 0;
                    const sizePrice = getSizePrice(item.iD_Size);
                    const basePrice = item.khuyen_Mai && item.khuyen_Mai.ten_Khuyen_Mai ? item.gia_Hien_Thi : item.gia_Goc;
                    const itemTotal = (basePrice + toppingTotal + sizePrice) * item.so_Luong;

                    return {
                        iD_San_Pham: item.iD_San_Pham || 0,
                        ten_San_Pham: item.ten_San_Pham || '',
                        gia_Hien_Thi: item.gia_Hien_Thi || 0,
                        gia_Goc: item.gia_Goc || 0,
                        so_Luong: item.so_Luong || 0,
                        ten_Size: item.ten_Size || '',
                        ten_LuongDa: item.ten_LuongDa || '',
                        ten_DoNgot: item.ten_DoNgot || '',
                        ghi_Chu: item.ghi_Chu || '',
                        iD_Size: item.iD_Size || 0,
                        iD_SanPham_DoNgot: item.iD_SanPham_DoNgot || 0,
                        iD_LuongDa: item.iD_LuongDa || 0,
                        ma_HoaDon_ChiTiet: 'HDC' + item.iD_GioHang_ChiTiet,
                        gia_Them_Size: sizePrice,
                        gia_San_Pham: basePrice + toppingTotal + sizePrice,
                        tong_Tien: itemTotal,
                        hoaDonChiTietToppings: item.toppings?.map(t => ({
                            iD_Topping: t.iD_Topping || 0,
                            ten_Topping: t.ten_Topping || '',
                            so_Luong: 1,
                            gia_Topping: t.gia_Topping || 0
                        })) || []
                    };
                })
            };

            console.log('Checkout Data:', JSON.stringify(checkoutData, null, 2));

            try {
                const response = await fetch('https://localhost:7169/api/BanHangTK/checkout', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(checkoutData)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    showAlert(`Lỗi khi gửi yêu cầu thanh toán: ${errorData.message || 'Không xác định'}`, 'error');
                    submitBtn.classList.remove('loading');
                    submitBtn.disabled = false;
                    return false;
                }

                const result = await response.json();
                showAlert('Thanh toán thành công!', 'success');

                const cartItemIds = selectedItems.map(item => item.iD_GioHang_ChiTiet);
                const deleteSuccess = await deleteCartItems(cartItemIds);

                if (deleteSuccess) {
                    clearCartCookie();
                    selectedItems = [];
                    await renderCartItems();
                }

                setTimeout(() => {
                    window.location.href = '/QLDonHangTk';
                }, 2000);

                submitBtn.classList.remove('loading');
                submitBtn.disabled = false;
                return false;
            } catch (e) {
                console.error('Error sending checkout request:', e);
                showAlert('Lỗi khi gửi yêu cầu thanh toán. Vui lòng thử lại.', 'error');
                submitBtn.classList.remove('loading');
                submitBtn.disabled = false;
                return false;
            }
        }

        function showAlert(message, type) {
            const alert = document.createElement('div');
            alert.className = `alert-notification alert-${type} animate__animated animate__slideInRight fixed top-4 right-4 z-50 max-w-sm`;
            alert.innerHTML = `
                <i class="bi bi-${type === 'success' ? 'check-circle-fill' : 'exclamation-circle-fill'} mr-2 text-lg"></i>
                <div>${message}</div>
                <button type="button" class="close-button" onclick="this.parentElement.remove()">
                    <i class="bi bi-x"></i>
                </button>
            `;
            document.body.appendChild(alert);
            setTimeout(() => {
                if (alert.parentElement) {
                    alert.remove();
                }
            }, 3000);
        }
    </script>
