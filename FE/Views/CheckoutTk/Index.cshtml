@* @model FE.Models.CheckoutTkViewModel
@{
    ViewData["Title"] = "Thanh Toán";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css">
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">

<style>
    :root {
        --primary: #3B82F6;
        --primary-dark: #2563EB;
        --secondary: #F59E0B;
        --light-bg: #F8FAFC;
        --card-bg: #FFFFFF;
        --text-primary: #1F2937;
        --text-secondary: #6B7280;
        --success: #10B981;
        --danger: #EF4444;
    }

    body {
        font-family: 'Roboto', sans-serif;
        background-color: var(--light-bg);
        color: var(--text-primary);
        margin: 0;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
    }

    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
        overflow-y: auto;
    }

    .modal-content {
        background: linear-gradient(135deg, #FFFFFF 0%, #F9FAFB 100%);
        margin: 5% auto;
        padding: 2rem;
        border: none;
        width: 90%;
        max-width: 600px;
        border-radius: 16px;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
    }

    .error-message {
        color: var(--danger);
        font-size: 0.75rem;
        margin-top: 0.5rem;
        display: none;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .cart-item {
        display: flex;
        align-items: flex-start;
        padding: 1.25rem;
        border-bottom: 1px solid #E5E7EB;
        transition: background-color 0.2s ease;
    }

        .cart-item:hover {
            background-color: #F9FAFB;
        }

    .cart-item-details {
        flex: 1;
    }

    .cart-item-name {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--text-primary);
    }

    .cart-item-options {
        font-size: 0.9rem;
        color: var(--text-secondary);
        margin-top: 0.75rem;
    }

    .cart-item-price {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--primary);
    }

    .cart-total {
        font-weight: 700;
        font-size: 1.3rem;
        color: var(--text-primary);
        margin-top: 2rem;
        text-align: right;
    }

    .original-price {
        text-decoration: line-through;
        color: var(--text-secondary);
        font-size: 0.95rem;
        margin-right: 0.5rem;
    }

    .discounted-price {
        color: var(--danger);
        font-weight: 600;
        font-size: 1.1rem;
    }

    .regular-price {
        color: var(--primary);
        font-weight: 600;
        font-size: 1.1rem;
    }

    .cart-item-controls {
        display: flex;
        align-items: center;
        justify-content: flex-end;
        min-width: 70px;
        font-size: 0.95rem;
        font-weight: 500;
        color: var(--text-primary);
    }

        .cart-item-controls .quantity {
            margin-left: 0.75rem;
            font-weight: 600;
        }

    .form-group label {
        font-size: 0.95rem;
        font-weight: 500;
        color: var(--text-primary);
        margin-bottom: 0.75rem;
        display: block;
    }

    .form-group input[type="radio"] {
        margin-right: 0.75rem;
    }

        .form-group input[type="radio"]:checked + .radio-label {
            background-color: #EFF6FF;
            border-color: var(--primary);
            color: var(--primary);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
            font-weight: 700;
            border-width: 2px;
        }

    .add-address-btn, .submit-btn, .edit-user-btn {
        background: linear-gradient(135deg, var(--primary), var(--primary-dark));
        color: white;
        padding: 0.85rem 1.75rem;
        border-radius: 10px;
        border: none;
        font-size: 0.95rem;
        font-weight: 500;
        transition: all 0.2s ease;
        position: relative;
        width: 100%;
    }

    .edit-address-btn {
        background: linear-gradient(135deg, var(--primary), var(--primary-dark));
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        border: none;
        font-size: 0.85rem;
        font-weight: 500;
        transition: all 0.2s ease;
        line-height: 1;
    }

        .add-address-btn:hover, .submit-btn:hover, .edit-address-btn:hover, .edit-user-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(59, 130, 246, 0.3);
        }

    .submit-btn:disabled, .edit-user-btn:disabled {
        background: #A1A1AA;
        cursor: not-allowed;
    }

    .submit-btn.loading::after, .edit-user-btn.loading::after {
        content: '';
        display: inline-block;
        border: 3px solid #ffffff;
        border-top: 3px solid var(--primary);
        border-radius: 50%;
        width: 18px;
        height: 18px;
        animation: spin 1s linear infinite;
        position: absolute;
        right: 1.25rem;
        top: 50%;
        transform: translateY(-50%);
    }

    .alert-notification {
        border-radius: 10px;
        padding: 1rem 1.5rem;
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        animation: slideIn 0.4s ease-out;
    }

    .alert-error {
        background-color: #FEF2F2;
        color: #991B1B;
        border-left: 4px solid var(--danger);
    }

    .alert-success {
        background-color: #ECFDF5;
        color: #065F46;
        border-left: 4px solid var(--success);
    }

    .close-button {
        background: none;
        border: none;
        font-size: 1.3rem;
        color: var(--text-secondary);
        transition: all 0.2s ease;
        width: 36px;
        height: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
    }

        .close-button:hover {
            background-color: #F3F4F6;
            color: var(--text-primary);
        }

    select, input[type="text"], input[type="tel"], input[type="email"] {
        width: 100%;
        padding: 0.85rem;
        border: 1px solid #E5E7EB;
        border-radius: 10px;
        font-size: 0.95rem;
    }

        select:focus, input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.25);
        }

        select:disabled {
            background-color: #F3F4F6;
            cursor: not-allowed;
        }

    .section-container {
        background: var(--card-bg);
        border-radius: 14px;
        padding: 2rem;
        box-shadow: 0 6px 10px rgba(0, 0, 0, 0.08);
        margin-bottom: 2rem;
    }

    .radio-label {
        display: block;
        padding: 1rem;
        border: 1px solid #E5E7EB;
        border-radius: 10px;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .radio-label:hover {
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.15);
        }

    .loading-spinner {
        display: none;
        border: 5px solid #f3f3f3;
        border-top: 5px solid var(--primary);
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin: 2.5rem auto;
    }

    #cartItemsContainer {
        max-height: 550px;
        overflow-y: auto;
        scrollbar-width: thin;
        scrollbar-color: var(--primary) #f1f1f1;
    }

        #cartItemsContainer::-webkit-scrollbar {
            width: 8px;
        }

        #cartItemsContainer::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        #cartItemsContainer::-webkit-scrollbar-thumb {
            background: var(--primary);
            border-radius: 4px;
        }

    keyframes spin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }

    keyframes slideIn {
        from

    {
        transform: translateY(-20px);
        opacity: 0;
    }

    to {
        transform: translateY(0);
        opacity: 1;
    }

    }

    .footer {
        background: linear-gradient(135deg, #1F2937 0%, #111827 100%);
        color: white;
        padding: 3rem 1rem;
        width: 100vw;
        margin-left: calc(-50vw + 50%);
        flex-shrink: 0;
        margin-top: auto;
    }

    .footer-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 1.5rem;
    }

    .footer-section {
        margin-bottom: 2.5rem;
    }

    .footer-title {
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 1.25rem;
        color: var(--secondary);
    }

    .footer-link {
        display: block;
        color: #D1D5DB;
        text-decoration: none;
        font-size: 0.95rem;
        transition: color 0.2s ease;
        margin-bottom: 0.75rem;
    }

        .footer-link:hover {
            color: var(--primary);
        }

    .footer-social {
        display: flex;
        gap: 1.25rem;
    }

    .social-icon {
        width: 44px;
        height: 44px;
        background: var(--primary);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        text-decoration: none;
        transition: background 0.2s ease;
    }

        .social-icon:hover {
            background: var(--primary-dark);
        }

    .footer-bottom {
        border-top: 1px solid #374151;
        padding-top: 2rem;
        text-align: center;
        color: #9CA3AF;
        font-size: 0.9rem;
    }

    media (max-width: 768px) {
        .footer

    {
        padding: 2rem 1rem;
    }

    .footer-social {
        justify-content: center;
    }

    .grid-cols-1.lg\:grid-cols-2 {
        grid-template-columns: 1fr;
    }

    }

    media (max-width: 480px) {
        .cart-item

    {
        flex-direction: column;
        align-items: flex-start;
    }

    .cart-item-controls {
        width: 100%;
        justify-content: flex-start;
    }

    }

    #loadingOverlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.6);
        z-index: 9999;
        backdrop-filter: blur(4px);
    }

        #loadingOverlay.show {
            display: flex;
            align-items: center;
            justify-content: center;
            animation: fadeIn 0.3s ease-out;
        }

        #loadingOverlay .loading-content {
            background: linear-gradient(135deg, #FFFFFF 0%, #F0F9FF 100%);
            padding: 2.5rem;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
            text-align: center;
            max-width: 300px;
            animation: bounceIn 0.5s ease-out;
        }

        #loadingOverlay .loading-spinner {
            display: block !important;
            margin: 0 auto 1.5rem;
            width: 50px;
            height: 50px;
            border-width: 4px;
        }

        #loadingOverlay p {
            font-size: 1.1rem;
            font-weight: 500;
            color: var(--text-primary);
            margin: 0;
        }

    keyframes fadeIn {
        from

    {
        opacity: 0;
    }

    to {
        opacity: 1;
    }

    }

    keyframes bounceIn {
        0%

    {
        transform: scale(0.3);
        opacity: 0;
    }

    50% {
        transform: scale(1.05);
    }

    70% {
        transform: scale(0.9);
    }

    100% {
        transform: scale(1);
        opacity: 1;
    }

    }

    .address-select-container {
        position: relative;
        display: flex;
        align-items: center;
    }

        .address-select-container select {
            flex: 1;
        }

        .address-select-container .edit-address-btn {
            margin-left: 0.5rem;
        }

    .voucher-info {
        margin-top: 1rem;
        font-size: 0.95rem;
        color: var(--text-secondary);
    }

        .voucher-info .original-price {
            text-decoration: line-through;
            color: var(--text-secondary);
            margin-right: 0.5rem;
        }

        .voucher-info .discounted-price {
            color: var(--success);
            font-weight: 600;
        }

        .voucher-info .discount-amount {
            color: var(--danger);
            font-weight: 600;
        }

    .user-info-container {
        background: var(--card-bg);
        border-radius: 14px;
        padding: 1.5rem;
        box-shadow: 0 6px 10px rgba(0, 0, 0, 0.08);
        margin-bottom: 2rem;
    }

        .user-info-container p {
            margin: 0.5rem 0;
            font-size: 0.95rem;
            color: var(--text-primary);
        }

        .user-info-container .edit-user-btn {
            width: auto;
            padding: 0.5rem 1rem;
            font-size: 0.85rem;
            margin-top: 1rem;
        }
</style>

<div class="container mx-auto py-10 px-4 sm:px-6 lg:px-8 max-w-7xl">
    <h2 class="text-3xl font-bold text-gray-800 mb-8">Thanh Toán</h2>

    <!-- User Info Section -->
    <div class="user-info-container">
        <h3 class="text-lg font-semibold text-gray-800 mb-3">Thông Tin Người Dùng</h3>
        <p><strong>Họ Tên:</strong> <span id="userName">Đang tải...</span></p>
        <p><strong>Email:</strong> <span id="userEmail">Đang tải...</span></p>
        <p><strong>Số Điện Thoại:</strong> <span id="userPhone">Đang tải...</span></p>
        <button type="button" class="edit-user-btn" onclick="openEditUserModal()">Thay Đổi</button>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <!-- Left: Cart Items -->
        <div class="section-container">
            <h3 class="text-xl font-bold text-gray-800 mb-4">Giỏ Hàng</h3>
            <div id="cartItems">
                @if (Model.CartItems != null && Model.CartItems.Any())
                {
                    <div id="cartItemsContainer"></div>
                    <div class="cart-total">
                        Tổng tiền hàng: <span id="cartTotal">0 đ</span><br />
                        Phí ship: <span id="shippingFee">0 đ</span><br />
                        Tổng cộng (bao gồm phí ship): <span id="finalTotal">0 đ</span>
                        <div id="voucherInfo" class="voucher-info" style="display: none;">
                            <span>Giá gốc: <span id="originalTotal">0 đ</span></span><br />
                            <span>Giá sau giảm: <span id="discountedTotal" class="discounted-price">0 đ</span></span><br />
                            <span>Tổng tiền giảm: <span id="discountAmount" class="discount-amount">0 đ</span></span>
                        </div>
                    </div>
                }
                else
                {
                    <p class="cart-empty text-gray-500">Không có sản phẩm nào được chọn để thanh toán. Vui lòng kiểm tra lại.</p>
                }
            </div>
        </div>

        <!-- Right: Checkout Form -->
        <div>
            <!-- Notifications -->
            @if (TempData["Error"] != null)
            {
                <div class="alert-notification alert-error animate__animated animate__fadeInDown">
                    <i class="bi bi-exclamation-circle-fill mr-2 text-lg"></i>
                    <div class="flex-1">@TempData["Error"]</div>
                    <button type="button" class="close-button" data-bs-dismiss="alert">
                        <i class="bi bi-x"></i>
                    </button>
                </div>
            }
            @if (TempData["Success"] != null)
            {
                <div class="alert-notification alert-success animate__animated animate__fadeInDown">
                    <i class="bi bi-check-circle-fill mr-2 text-lg"></i>
                    <div class="flex-1">@TempData["Success"]</div>
                    <button type="button" class="close-button" data-bs-dismiss="alert">
                        <i class="bi bi-x"></i>
                    </button>
                </div>
            }

            <div class="section-container">
                <form id="checkoutForm" method="post" asp-action="ProcessCheckout">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="selectedItems" value="@Html.Raw(ViewBag.SelectedItems)" />
                    <input type="hidden" id="customerId" value="@(ViewData["CustomerId"] ?? "0")" />

                    <h4 class="text-lg font-semibold text-gray-800 mb-3">Chọn Địa Chỉ</h4>
                    <p class="text-red-500 text-sm mb-2">Xin lỗi, hiện cửa hàng chỉ có chi nhánh tại Hà Nội.</p>
                    <div id="addresses" class="mb-6">
                        @if (Model.Addresses != null && Model.Addresses.Any())
                        {
                            <div class="form-group address-select-container">
                                <select name="selectedAddress" id="addressSelect" class="w-full" required onchange="updateSelectedAddress()">
                                    <option value="">Chọn địa chỉ</option>
                                    @foreach (var address in Model.Addresses)
                                    {
                                        <option value="@address.ID_Dia_Chi" data-id="@address.ID_Dia_Chi" data-address="@(address.Dia_Chi?.Replace("'", "\\'") ?? "")" data-tinh-thanh="@(address.Tinh_Thanh?.Replace("'", "\\'") ?? "")" data-ghi-chu="@(address.Ghi_Chu?.Replace("'", "\\'") ?? "")" data-ghi-chu-khach-hang="@(address.Ghi_Chu_KhachHang?.Replace("'", "\\'") ?? "")">
                                            @(address.Ghi_Chu ?? "Không xác định"), @(address.Ghi_Chu_KhachHang ?? "Không có ghi chú")
                                        </option>
                                    }
                                </select>
                                <button type="button" id="editAddressBtn" class="edit-address-btn hidden" onclick="openEditModalFromSelect()">Sửa</button>
                            </div>
                        }
                        else
                        {
                            <p class="text-gray-500">Không có địa chỉ nào.</p>
                        }
                    </div>
                    <span id="addressError" class="error-message">Vui lòng chọn một địa chỉ.</span>
                    <button type="button" class="add-address-btn mb-6" onclick="openAddAddressModal()"><i class="bi bi-plus-circle mr-2"></i>Thêm Địa Chỉ Mới</button>

                    <h4 class="text-lg font-semibold text-gray-800 mb-3">Chọn Voucher</h4>
                    <select name="selectedVoucher" id="voucherSelect" class="mb-6" onchange="applyVoucher()">
                        <option value="" data-minimum="0" data-discount="0">Không sử dụng voucher</option>
                        @if (Model.Vouchers != null && Model.Vouchers.Any())
                        {
                            foreach (var voucher in Model.Vouchers)
                            {
                                <option value="@voucher.ID_Voucher" data-minimum="@voucher.So_Tien_Dat_Yeu_Cau" data-discount="@voucher.Gia_Tri_Giam">@(voucher.Ten ?? "Không xác định") (Giảm @voucher.Gia_Tri_Giam% - Đơn tối thiểu @voucher.So_Tien_Dat_Yeu_Cau.ToString("N0", new System.Globalization.CultureInfo("vi-VN")) đ)</option>
                            }
                        }
                    </select>
                    <span id="voucherError" class="error-message">Đơn hàng chưa đạt giá trị tối thiểu để sử dụng voucher này.</span>

                    <h4 class="text-lg font-semibold text-gray-800 mb-3">Chọn Phương Thức Thanh Toán</h4>
                    <div id="paymentMethods" class="mb-6">
                        @{
                            var paymentMethods = new Dictionary<int, (string Name, string Icon)>
                                                {
                                                { 4, ("Thanh toán khi nhận hàng", "bi-truck") },
                                                { 5, ("Thanh toán VNPAY", "bi-wallet2") }
                                                };
                        }
                        @if (Model.PaymentMethods != null && Model.PaymentMethods.Any())
                        {
                            foreach (var method in Model.PaymentMethods)
                            {
                                if (paymentMethods.ContainsKey((int)method.ID_Hinh_Thuc_Thanh_Toan))
                                {
                                    var paymentInfo = paymentMethods[(int)method.ID_Hinh_Thuc_Thanh_Toan];
                                    <div class="form-group">
                                        <input type="radio" id="payment_@method.ID_Hinh_Thuc_Thanh_Toan" name="selectedPaymentMethod" value="@method.ID_Hinh_Thuc_Thanh_Toan" class="sr-only" required />
                                        <label for="payment_@method.ID_Hinh_Thuc_Thanh_Toan" class="radio-label flex items-center gap-2">
                                            <i class="bi @paymentInfo.Icon text-primary text-lg"></i>
                                            <span>@paymentInfo.Name</span>
                                            @if (!string.IsNullOrEmpty(method.Cong_Thanh_Toan))
                                            {
                                                <span class="text-sm text-gray-500">(@method.Cong_Thanh_Toan)</span>
                                            }
                                        </label>
                                    </div>
                                }
                            }
                        }
                        else
                        {
                            <p class="text-gray-500">Không có phương thức thanh toán nào khả dụng.</p>
                        }
                    </div>
                    <span id="paymentError" class="error-message">Vui lòng chọn một phương thức thanh toán.</span>

                    <!-- Thêm trường Ghi chú -->
                    <div class="form-group">
                        <label for="ghiChu">Ghi Chú (Không bắt buộc):</label>
                        <input id="ghiChu" name="ghi_Chu" class="w-full" placeholder="Nhập ghi chú nếu có" />
                    </div>

                    <button type="button" id="submitBtn" class="submit-btn mt-6" disabled onclick="validateForm()"><i class="bi bi-check-circle mr-2"></i>Xác Nhận Thanh Toán</button>
                </form>
            </div>
        </div>
    </div>

    <!-- Loading Overlay -->
    <div id="loadingOverlay">
        <div class="loading-content animate__animated">
            <div class="loading-spinner"></div>
            <p>Đang xử lý thanh toán...</p>
        </div>
    </div>

    <!-- Modal thêm địa chỉ -->
    <div id="addAddressModal" class="modal">
        <div class="modal-content">
            <h3 class="text-lg font-bold text-gray-800 mb-4">Thêm Địa Chỉ Mới</h3>
            <p class="text-red-500 text-sm mb-2">Xin lỗi, hiện cửa hàng chỉ có chi nhánh tại Hà Nội.</p>
            <form asp-action="AddAddress" method="post" onsubmit="handleAddAddressSubmit(event)">
                @Html.AntiForgeryToken()
                <div class="form-group">
                    <label for="add_District">Quận/Huyện:</label>
                    <select id="add_District" name="District" class="w-full" onchange="updateAddWards()" required>
                        <option value="">Chọn Quận/Huyện</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="add_Ward">Phường/Xã:</label>
                    <select id="add_Ward" name="Ward" class="w-full" required>
                        <option value="">Chọn Phường/Xã</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="add_Tinh_Thanh">Tỉnh/Thành:</label>
                    <input id="add_Tinh_Thanh" name="Tinh_Thanh" class="w-full" value="201" readonly />
                </div>
                <div class="form-group">
                    <label for="add_Ghi_Chu">Địa chỉ chi tiết (Bắt buộc):</label>
                    <input id="add_Ghi_Chu" name="Ghi_Chu" class="w-full" required />
                </div>
                <div class="form-group">
                    <label for="add_Ghi_Chu_KhachHang">Ghi Chú Khách Hàng:</label>
                    <input id="add_Ghi_Chu_KhachHang" name="Ghi_Chu_KhachHang" class="w-full" />
                </div>
                <input type="hidden" id="add_Dia_Chi" name="Dia_Chi" />
                <div class="flex justify-end gap-3 mt-4">
                    <button type="submit" class="submit-btn">Thêm</button>
                    <button type="button" class="close-button" onclick="closeAddAddressModal()">Hủy</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal sửa địa chỉ -->
    <div id="editAddressModal" class="modal">
        <div class="modal-content">
            <h3 class="text-lg font-bold text-gray-800 mb-4">Sửa Địa Chỉ</h3>
            <p class="text-red-500 text-sm mb-2">Xin lỗi, hiện cửa hàng chỉ có chi nhánh tại Hà Nội.</p>
            <form asp-action="UpdateAddress" method="post" onsubmit="handleEditAddressSubmit(event)">
                @Html.AntiForgeryToken()
                <input type="hidden" id="edit_ID_Dia_Chi" name="ID_Dia_Chi" />
                <div class="form-group">
                    <label for="edit_District">Quận/Huyện:</label>
                    <select id="edit_District" name="District" class="w-full" onchange="updateEditWards()" required>
                        <option value="">Chọn Quận/Huyện</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="edit_Ward">Phường/Xã:</label>
                    <select id="edit_Ward" name="Ward" class="w-full" required>
                        <option value="">Chọn Phường/Xã</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="edit_Tinh_Thanh">Tỉnh/Thành:</label>
                    <input id="edit_Tinh_Thanh" name="Tinh_Thanh" class="w-full" value="201" readonly />
                </div>
                <div class="form-group">
                    <label for="edit_Ghi_Chu">Địa chỉ chi tiết (Bắt buộc):</label>
                    <input id="edit_Ghi_Chu" name="Ghi_Chu" class="w-full" required />
                </div>
                <div class="form-group">
                    <label for="edit_Ghi_Chu_KhachHang">Ghi Chú Khách Hàng:</label>
                    <input id="edit_Ghi_Chu_KhachHang" name="Ghi_Chu_KhachHang" class="w-full" />
                </div>
                <input type="hidden" id="edit_Dia_Chi" name="Dia_Chi" />
                <input type="hidden" name="Trang_Thai" value="true" />
                <div class="flex justify-end gap-3 mt-4">
                    <button type="submit" class="submit-btn">Cập Nhật</button>
                    <button type="button" class="close-button" onclick="closeEditModal()">Hủy</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal sửa thông tin người dùng -->
    <div id="editUserModal" class="modal">
        <div class="modal-content">
            <h3 class="text-lg font-bold text-gray-800 mb-4">Sửa Thông Tin Người Dùng</h3>
            <form id="editUserForm" onsubmit="handleEditUserSubmit(event)">
                @Html.AntiForgeryToken()
                <input type="hidden" id="editUser_ID_Khach_Hang" name="iD_Khach_Hang" />
                <div class="form-group">
                    <label for="editUser_Ho_Ten">Họ Tên:</label>
                    <input id="editUser_Ho_Ten" name="ho_Ten" type="text" class="w-full" required />
                    <span id="editUserNameError" class="error-message">Vui lòng nhập họ tên.</span>
                </div>
                <div class="form-group">
                    <label for="editUser_Email">Email:</label>
                    <input id="editUser_Email" name="email" type="email" class="w-full" required />
                    <span id="editUserEmailError" class="error-message">Vui lòng nhập email hợp lệ.</span>
                </div>
                <div class="form-group">
                    <label for="editUser_So_Dien_Thoai">Số Điện Thoại:</label>
                    <input id="editUser_So_Dien_Thoai" name="so_Dien_Thoai" type="tel" class="w-full" required pattern="[0-9]{10}" title="Số điện thoại phải là 10 chữ số" oninput="validateUserPhoneNumber(this)" />
                    <span id="editUserPhoneError" class="error-message">Số điện thoại phải là 10 chữ số.</span>
                </div>
                <div class="flex justify-end gap-3 mt-4">
                    <button type="submit" class="edit-user-btn">Cập Nhật</button>
                    <button type="button" class="close-button" onclick="closeEditUserModal()">Hủy</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Footer -->
    <footer class="footer">
        <div class="footer-container">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div class="footer-section">
                    <h3 class="footer-title">TheBoy Trà Sữa</h3>
                    <p class="text-sm text-gray-300 mb-4">Cửa hàng trà sữa tươi ngon, nguyên liệu chất lượng cao. Mang đến những ly trà sữa thơm ngon, đậm đà hương vị Việt Nam.</p>
                    <div class="flex items-center gap-4">
                        <i class="bi bi-geo-alt text-primary text-lg"></i>
                        <span class="text-sm">123 Đường ABC, Quận 1, TP. HCM</span>
                    </div>
                    <div class="flex items-center gap-4 mt-2">
                        <i class="bi bi-telephone text-primary text-lg"></i>
                        <span class="text-sm">+84 123 456 789</span>
                    </div>
                    <div class="flex items-center gap-4 mt-2">
                        <i class="bi bi-envelope text-primary text-lg"></i>
                        <span class="text-sm">theboy@trasua.vn</span>
                    </div>
                </div>
                <div class="footer-section">
                    <h3 class="footer-title">Menu</h3>
                    <a href="/" class="footer-link">Trang chủ</a>
                    <a href="/SanPham" class="footer-link">Sản phẩm</a>
                    <a href="/GioiThieu" class="footer-link">Giới thiệu</a>
                    <a href="/LienHe" class="footer-link">Liên hệ</a>
                    <a href="/KhuyenMai" class="footer-link">Khuyến mãi</a>
                </div>
                <div class="footer-section">
                    <h3 class="footer-title">Dịch vụ</h3>
                    <a href="/GiaoHang" class="footer-link">Giao hàng</a>
                    <a href="/ThanhToan" class="footer-link">Thanh toán</a>
                    <a href="/ChinhSach" class="footer-link">Chính sách</a>
                    <a href="/HoiDap" class="footer-link">Hỏi đáp</a>
                </div>
                <div class="footer-section">
                    <h3 class="footer-title">Theo dõi chúng tôi</h3>
                    <div class="footer-social">
                        <a href="https://facebook.com/theboytrasua" class="social-icon" target="_blank" rel="noopener">
                            <i class="bi bi-facebook"></i>
                        </a>
                        <a href="https://instagram.com/theboytrasua" class="social-icon" target="_blank" rel="noopener">
                            <i class="bi bi-instagram"></i>
                        </a>
                        <a href="https://tiktok.com/theboytrasua" class="social-icon" target="_blank" rel="noopener">
                            <i class="bi bi-tiktok"></i>
                        </a>
                        <a href="https://zalo.me/theboytrasua" class="social-icon" target="_blank" rel="noopener">
                            <i class="bi bi-chat-dots"></i>
                        </a>
                    </div>
                    <p class="text-sm text-gray-300 mt-4">Nhận ưu đãi đặc biệt qua app!</p>
                </div>
            </div>
            <div class="footer-bottom">
                <p>&copy; 2025 TheBoy Trà Sữa. Tất cả quyền được bảo lưu. | Thiết kế bởi xAI</p>
            </div>
        </div>
    </footer>

    <script>
        let selectedItems = [];
        let cartTotal = 0;
        let shippingFee = 0;
        let finalTotal = 0;
        let sizes = [];
        let selectedVoucher = null;
        let districts = [];
        let wards = [];

        async function fetchSizes() {
            try {
                const response = await fetch('https://localhost:7169/api/Size');
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                sizes = await response.json();
            } catch (e) {
                console.error('Error fetching sizes:', e);
                showAlert('Lỗi khi lấy dữ liệu kích thước. Vui lòng thử lại.', 'error');
                sizes = [];
            }
        }

        function getSizePrice(idSize) {
            const size = sizes.find(s => s.iD_Size === idSize);
            return size ? size.gia : 0;
        }

        async function fetchUserInfo() {
            const customerId = document.getElementById('customerId').value;
            try {
                const response = await fetch(`https://localhost:7169/api/BanHangTK/khachhang/${customerId}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                const userData = await response.json();
                document.getElementById('userName').textContent = userData.ho_Ten || 'Không xác định';
                document.getElementById('userEmail').textContent = userData.email || 'Không xác định';
                document.getElementById('userPhone').textContent = userData.so_Dien_Thoai || 'Không xác định';
            } catch (e) {
                console.error('Error fetching user info:', e);
                showAlert('Lỗi khi tải thông tin người dùng. Vui lòng thử lại.', 'error');
                document.getElementById('userName').textContent = 'Lỗi tải dữ liệu';
                document.getElementById('userEmail').textContent = 'Lỗi tải dữ liệu';
                document.getElementById('userPhone').textContent = 'Lỗi tải dữ liệu';
            }
        }

        async function fetchDistricts() {
            try {
                const response = await fetch('https://localhost:7169/api/Shipping/districts/201');
                const result = await response.json();
                if (result.code === 200) {
                    districts = result.data;
                    return districts;
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                console.error('Lỗi khi lấy danh sách quận/huyện:', error);
                showAlert('Lỗi khi lấy danh sách quận/huyện. Vui lòng thử lại.', 'error');
                return [];
            }
        }

        async function fetchWards(districtId) {
            try {
                const response = await fetch(`https://localhost:7169/api/Shipping/wards/${districtId}`);
                const result = await response.json();
                if (result.code === 200) {
                    wards = result.data;
                    return wards;
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                console.error('Lỗi khi lấy danh sách phường/xã:', error);
                showAlert('Lỗi khi lấy danh sách phường/xã. Vui lòng thử lại.', 'error');
                return [];
            }
        }

        async function calculateShippingFee(districtId, wardCode, insuranceValue) {
            const payload = {
                FromDistrictId: 1482,
                ToDistrictId: parseInt(districtId),
                ToWardCode: wardCode,
                Weight: 1000,
                Length: 20,
                Width: 15,
                Height: 15,
                InsuranceValue: insuranceValue
            };

            try {
                const response = await fetch('https://localhost:7169/api/Shipping/calculate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(payload)
                });
                const result = await response.json();
                if (result.code === 200) {
                    return result.data.service_fee;
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                console.error('Lỗi khi tính phí ship:', error);
                showAlert('Lỗi khi tính phí ship. Vui lòng thử lại.', 'error');
                return 0;
            }
        }

        async function populateDistricts() {
            const addDistrictSelect = document.getElementById('add_District');
            const editDistrictSelect = document.getElementById('edit_District');

            addDistrictSelect.innerHTML = '<option value="">Chọn Quận/Huyện</option>';
            editDistrictSelect.innerHTML = '<option value="">Chọn Quận/Huyện</option>';

            districts = await fetchDistricts();
            districts.forEach(district => {
                const addOption = document.createElement('option');
                addOption.value = district.DistrictID;
                addOption.textContent = district.DistrictName;
                addDistrictSelect.appendChild(addOption);

                const editOption = document.createElement('option');
                editOption.value = district.DistrictID;
                editOption.textContent = district.DistrictName;
                editDistrictSelect.appendChild(editOption);
            });
        }

        async function updateAddWards() {
            const districtSelect = document.getElementById('add_District');
            const wardSelect = document.getElementById('add_Ward');
            const selectedDistrictId = districtSelect.value;

            wardSelect.innerHTML = '<option value="">Chọn Phường/Xã</option>';
            if (selectedDistrictId) {
                wards = await fetchWards(selectedDistrictId);
                wards.forEach(ward => {
                    const option = document.createElement('option');
                    option.value = ward.WardCode;
                    option.textContent = ward.WardName;
                    wardSelect.appendChild(option);
                });
            }
            updateSubmitButtonState();
        }

        async function updateEditWards() {
            const districtSelect = document.getElementById('edit_District');
            const wardSelect = document.getElementById('edit_Ward');
            const selectedDistrictId = districtSelect.value;

            wardSelect.innerHTML = '<option value="">Chọn Phường/Xã</option>';
            if (selectedDistrictId) {
                wards = await fetchWards(selectedDistrictId);
                wards.forEach(ward => {
                    const option = document.createElement('option');
                    option.value = ward.WardCode;
                    option.textContent = ward.WardName;
                    wardSelect.appendChild(option);
                });
            }
        }

        function combineAddress(formType) {
            const districtId = document.getElementById(`${formType}_District`).value;
            const wardCode = document.getElementById(`${formType}_Ward`).value;
            if (districtId && wardCode) {
                document.getElementById(`${formType}_Dia_Chi`).value = `${wardCode}, ${districtId}`;
            }
        }

        async function handleAddAddressSubmit(event) {
            event.preventDefault();
            const form = event.target;
            const addBtn = form.querySelector('.submit-btn');
            addBtn.classList.add('loading');
            addBtn.disabled = true;

            combineAddress('add');
            const ghiChuKhachHangInput = document.getElementById('add_Ghi_Chu_KhachHang');
            ghiChuKhachHangInput.value = ghiChuKhachHangInput.value.trim() || 'Không có';

            try {
                const formData = new FormData(form);
                const response = await fetch(form.action, {
                    method: 'POST',
                    headers: {
                        'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: formData
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                showAlert('Thêm địa chỉ thành công!', 'success');
                closeAddAddressModal();
                window.location.reload();
            } catch (e) {
                console.error('Error adding address:', e);
                showAlert('Lỗi khi thêm địa chỉ. Vui lòng thử lại.', 'error');
            } finally {
                addBtn.classList.remove('loading');
                addBtn.disabled = false;
            }
        }

        async function handleEditAddressSubmit(event) {
            event.preventDefault();
            const form = event.target;
            const editBtn = form.querySelector('.submit-btn');
            editBtn.classList.add('loading');
            editBtn.disabled = true;

            combineAddress('edit');
            const ghiChuKhachHangInput = document.getElementById('edit_Ghi_Chu_KhachHang');
            ghiChuKhachHangInput.value = ghiChuKhachHangInput.value.trim() || 'Không có';

            try {
                const formData = new FormData(form);
                const response = await fetch(form.action, {
                    method: 'POST',
                    headers: {
                        'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: formData
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                showAlert('Cập nhật địa chỉ thành công!', 'success');
                closeEditModal();
                window.location.reload();
            } catch (e) {
                console.error('Error updating address:', e);
                showAlert('Lỗi khi cập nhật địa chỉ. Vui lòng thử lại.', 'error');
            } finally {
                editBtn.classList.remove('loading');
                editBtn.disabled = false;
            }
        }

        async function renderCartItems() {
            await fetchSizes();
            const cartItemsContainer = document.getElementById('cartItemsContainer');
            const cartTotalElement = document.getElementById('cartTotal');
            const shippingFeeElement = document.getElementById('shippingFee');
            const finalTotalElement = document.getElementById('finalTotal');
            cartItemsContainer.innerHTML = '';

            if (!selectedItems.length) {
                cartItemsContainer.innerHTML = '<p class="cart-empty text-gray-500">Không có sản phẩm nào được chọn để thanh toán. Vui lòng kiểm tra lại.</p>';
                cartTotalElement.textContent = '0 đ';
                shippingFeeElement.textContent = '0 đ';
                finalTotalElement.textContent = '0 đ';
                return;
            }

            cartTotal = 0;
            selectedItems.forEach(item => {
                const toppingTotal = item.toppings ? item.toppings.reduce((sum, t) => sum + (t.gia_Topping || 0), 0) : 0;
                const sizePrice = getSizePrice(item.iD_Size);
                const basePrice = item.khuyen_Mai && item.khuyen_Mai.ten_Khuyen_Mai ? item.gia_Hien_Thi : item.gia_Goc;
                const itemTotal = (basePrice + toppingTotal + sizePrice) * item.so_Luong;
                cartTotal += itemTotal;

                const cartItem = document.createElement('div');
                cartItem.className = 'cart-item';
                cartItem.innerHTML = `
                    <div class="cart-item-details">
                        <div class="cart-item-name">${item.ten_San_Pham}</div>
                        <div class="cart-item-options">
                            ${item.ten_Size ? `Kích thước: ${item.ten_Size} (+${sizePrice.toLocaleString('vi-VN')} đ)<br>` : ''}
                            ${item.ten_LuongDa ? `Lượng đá: ${item.ten_LuongDa}<br>` : ''}
                            ${item.ten_DoNgot ? `Độ ngọt: ${item.ten_DoNgot}<br>` : ''}
                            ${item.toppings && item.toppings.length ? `Topping: ${item.toppings.map(t => `${t.ten_Topping} (+${t.gia_Topping.toLocaleString('vi-VN')} đ)`).join(', ')}<br>` : ''}
                            ${item.ghi_Chu ? `Ghi chú: ${item.ghi_Chu}` : ''}
                            ${item.khuyen_Mai && item.khuyen_Mai.ten_Khuyen_Mai ? `<br>Khuyến mãi: ${item.khuyen_Mai.ten_Khuyen_Mai} (Giảm ${(item.gia_Goc - item.gia_Hien_Thi).toLocaleString('vi-VN')} đ)` : ''}
                        </div>
                        <div class="cart-item-price">
                            ${item.khuyen_Mai && item.khuyen_Mai.ten_Khuyen_Mai ?
                                `<span class="original-price">${(item.gia_Goc + toppingTotal + sizePrice).toLocaleString('vi-VN')} đ</span>
                                 <span class="discounted-price">${(item.gia_Hien_Thi + toppingTotal + sizePrice).toLocaleString('vi-VN')} đ</span>` :
                                `<span class="regular-price">${(item.gia_Goc + toppingTotal + sizePrice).toLocaleString('vi-VN')} đ</span>`}
                        </div>
                    </div>
                    <div class="cart-item-controls">
                        <span class="quantity">x${item.so_Luong > 0 ? item.so_Luong : 'N/A'}</span>
                    </div>
                `;
                cartItemsContainer.appendChild(cartItem);
            });

            cartTotalElement.textContent = cartTotal.toLocaleString('vi-VN') + ' đ';
            applyVoucher();
            await updateSelectedAddress();
        }

        try {
            selectedItems = JSON.parse(decodeURIComponent('@Html.Raw(ViewBag.SelectedItems)'));
            renderCartItems();
            fetchUserInfo();
            populateDistricts();
        } catch (e) {
            console.error('Error parsing selectedItemsCookie:', e);
            showAlert('Lỗi khi xử lý dữ liệu giỏ hàng. Vui lòng thử lại.', 'error');
            selectedItems = [];
            document.getElementById('cartItemsContainer').innerHTML = '<p class="cart-empty text-gray-500">Không có sản phẩm nào được chọn để thanh toán. Vui lòng kiểm tra lại.</p>';
            document.getElementById('cartTotal').textContent = '0 đ';
            document.getElementById('shippingFee').textContent = '0 đ';
            document.getElementById('finalTotal').textContent = '0 đ';
        }

        function openAddAddressModal() {
            document.getElementById('addAddressModal').style.display = 'block';
            document.getElementById('add_District').value = '';
            document.getElementById('add_Ward').innerHTML = '<option value="">Chọn Phường/Xã</option>';
            document.getElementById('add_Ghi_Chu').value = '';
            document.getElementById('add_Ghi_Chu_KhachHang').value = '';
            updateAddWards();
        }

        function closeAddAddressModal() {
            document.getElementById('addAddressModal').style.display = 'none';
        }

        async function openEditModal(id, diaChi, tinhThanh, ghiChu, ghiChuKhachHang) {
            document.getElementById('edit_ID_Dia_Chi').value = id;
            document.getElementById('edit_Ghi_Chu').value = ghiChu || '';
            document.getElementById('edit_Ghi_Chu_KhachHang').value = ghiChuKhachHang || '';
            document.getElementById('edit_Tinh_Thanh').value = '201';

            const [wardCode, districtId] = diaChi ? diaChi.split(',').map(item => item.trim()) : ['', ''];
            document.getElementById('edit_District').value = districtId || '';
            await updateEditWards();
            document.getElementById('edit_Ward').value = wardCode || '';
            document.getElementById('editAddressModal').style.display = 'block';
        }

        function openEditModalFromSelect() {
            const addressSelect = document.getElementById('addressSelect');
            const selectedOption = addressSelect.options[addressSelect.selectedIndex];
            if (selectedOption.value) {
                openEditModal(
                    selectedOption.getAttribute('data-id'),
                    selectedOption.getAttribute('data-address'),
                    selectedOption.getAttribute('data-tinh-thanh'),
                    selectedOption.getAttribute('data-ghi-chu'),
                    selectedOption.getAttribute('data-ghi-chu-khach-hang')
                );
            }
        }

        async function updateSelectedAddress() {
            const addressSelect = document.getElementById('addressSelect');
            const editAddressBtn = document.getElementById('editAddressBtn');
            const cartTotalElement = document.getElementById('cartTotal');
            const shippingFeeElement = document.getElementById('shippingFee');
            const finalTotalElement = document.getElementById('finalTotal');

            if (addressSelect.value) {
                editAddressBtn.classList.remove('hidden');
                const selectedOption = addressSelect.options[addressSelect.selectedIndex];
                const diaChi = selectedOption.getAttribute('data-address');
                const [wardCode, districtId] = diaChi ? diaChi.split(',').map(item => item.trim()) : ['', ''];

                if (districtId && wardCode) {
                    shippingFee = await calculateShippingFee(districtId, wardCode, cartTotal);
                    shippingFeeElement.textContent = shippingFee.toLocaleString('vi-VN') + ' đ';
                    const discountedTotal = selectedVoucher ? cartTotal * (1 - selectedVoucher.discountPercent / 100) : cartTotal;
                    finalTotal = discountedTotal + shippingFee;
                    finalTotalElement.textContent = finalTotal.toLocaleString('vi-VN') + ' đ';
                } else {
                    shippingFee = 0;
                    shippingFeeElement.textContent = '0 đ';
                    const discountedTotal = selectedVoucher ? cartTotal * (1 - selectedVoucher.discountPercent / 100) : cartTotal;
                    finalTotal = discountedTotal + shippingFee;
                    finalTotalElement.textContent = finalTotal.toLocaleString('vi-VN') + ' đ';
                }
            } else {
                editAddressBtn.classList.add('hidden');
                shippingFee = 0;
                shippingFeeElement.textContent = '0 đ';
                const discountedTotal = selectedVoucher ? cartTotal * (1 - selectedVoucher.discountPercent / 100) : cartTotal;
                finalTotal = discountedTotal + shippingFee;
                finalTotalElement.textContent = finalTotal.toLocaleString('vi-VN') + ' đ';
            }
            updateSubmitButtonState();
        }

        function closeEditModal() {
            document.getElementById('editAddressModal').style.display = 'none';
        }

        function openEditUserModal() {
            const customerId = document.getElementById('customerId').value;
            fetch(`https://localhost:7169/api/BanHangTK/khachhang/${customerId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    document.getElementById('editUser_ID_Khach_Hang').value = data.iD_Khach_Hang;
                    document.getElementById('editUser_Ho_Ten').value = data.ho_Ten || '';
                    document.getElementById('editUser_Email').value = data.email || '';
                    document.getElementById('editUser_So_Dien_Thoai').value = data.so_Dien_Thoai || '';
                    document.getElementById('editUserModal').style.display = 'block';
                })
                .catch(e => {
                    console.error('Error fetching user info for edit:', e);
                    showAlert('Lỗi khi tải thông tin người dùng. Vui lòng thử lại.', 'error');
                });
        }

        function closeEditUserModal() {
            document.getElementById('editUserModal').style.display = 'none';
        }

        function validateUserPhoneNumber(input) {
            const errorElement = document.getElementById('editUserPhoneError');
            const value = input.value;
            if (value.length !== 10 || !/^[0-9]{10}$/.test(value)) {
                errorElement.style.display = 'block';
                input.setCustomValidity('Số điện thoại phải là 10 chữ số');
            } else {
                errorElement.style.display = 'none';
                input.setCustomValidity('');
            }
        }

        async function handleEditUserSubmit(event) {
            event.preventDefault();
            const form = event.target;
            const editBtn = form.querySelector('.edit-user-btn');
            editBtn.classList.add('loading');
            editBtn.disabled = true;

            const formData = new FormData(form);
            const data = {
                iD_Khach_Hang: parseInt(formData.get('iD_Khach_Hang')),
                ho_Ten: formData.get('ho_Ten').trim(),
                email: formData.get('email').trim(),
                so_Dien_Thoai: formData.get('so_Dien_Thoai').trim()
            };

            if (!data.ho_Ten) {
                document.getElementById('editUserNameError').style.display = 'block';
                editBtn.classList.remove('loading');
                editBtn.disabled = false;
                return;
            }

            try {
                const response = await fetch(`https://localhost:7169/api/BanHangTK/khachhang/${data.iD_Khach_Hang}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(data)
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                showAlert('Cập nhật thông tin người dùng thành công!', 'success');
                closeEditUserModal();
                await fetchUserInfo();
            } catch (e) {
                console.error('Error updating user info:', e);
                showAlert('Lỗi khi cập nhật thông tin người dùng. Vui lòng thử lại.', 'error');
            } finally {
                editBtn.classList.remove('loading');
                editBtn.disabled = false;
            }
        }

        function applyVoucher() {
            const voucherSelect = document.getElementById('voucherSelect');
            const voucherError = document.getElementById('voucherError');
            const cartTotalElement = document.getElementById('cartTotal');
            const voucherInfo = document.getElementById('voucherInfo');
            const originalTotalElement = document.getElementById('originalTotal');
            const discountedTotalElement = document.getElementById('discountedTotal');
            const discountAmountElement = document.getElementById('discountAmount');
            const finalTotalElement = document.getElementById('finalTotal');

            const selectedOption = voucherSelect.options[voucherSelect.selectedIndex];
            const minimumOrder = parseFloat(selectedOption.getAttribute('data-minimum')) || 0;
            const discountPercent = parseFloat(selectedOption.getAttribute('data-discount')) || 0;

            if (minimumOrder > 0 && cartTotal < minimumOrder) {
                voucherError.style.display = 'block';
                voucherSelect.value = '';
                selectedVoucher = null;
                cartTotalElement.textContent = cartTotal.toLocaleString('vi-VN') + ' đ';
                voucherInfo.style.display = 'none';
                finalTotal = cartTotal + shippingFee;
                finalTotalElement.textContent = finalTotal.toLocaleString('vi-VN') + ' đ';
                showAlert('Đơn hàng chưa đạt giá trị tối thiểu để sử dụng voucher này!', 'error');
                return;
            }

            voucherError.style.display = 'none';
            selectedVoucher = {
                id: selectedOption.value,
                discountPercent: discountPercent,
                minimumOrder: minimumOrder
            };

            const discount = cartTotal * (discountPercent / 100);
            const discountedTotal = cartTotal - discount;

            if (selectedVoucher.id) {
                voucherInfo.style.display = 'block';
                originalTotalElement.textContent = cartTotal.toLocaleString('vi-VN') + ' đ';
                discountedTotalElement.textContent = discountedTotal.toLocaleString('vi-VN') + ' đ';
                discountAmountElement.textContent = discount.toLocaleString('vi-VN') + ' đ';
            } else {
                voucherInfo.style.display = 'none';
            }

            cartTotalElement.textContent = discountedTotal.toLocaleString('vi-VN') + ' đ';
            finalTotal = discountedTotal + shippingFee;
            finalTotalElement.textContent = finalTotal.toLocaleString('vi-VN') + ' đ';

            // Hiển thị thông báo nếu chọn VNPay
            const paymentSelected = document.querySelector('input[name="selectedPaymentMethod"]:checked');
            if (paymentSelected && parseInt(paymentSelected.value) === 5) {
                showAlert(`Tổng cộng thanh toán qua VNPay: ${finalTotal.toLocaleString('vi-VN')} đ (bao gồm phí ship)`, 'success');
            }
        }

        function clearCartCookie() {
            document.cookie = 'selectedItems=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
        }

        async function deleteCartItems(cartItemIds) {
            if (!cartItemIds || cartItemIds.length === 0) {
                console.warn('Không có mục giỏ hàng nào để xóa');
                return true;
            }

            const deletePromises = cartItemIds.map(id =>
                fetch(`https://localhost:7169/api/Gio_Hang/delete/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Lỗi khi xóa giỏ hàng chi tiết ID ${id}`);
                    }
                    return id;
                })
                .catch(error => {
                    console.error(`Lỗi khi xóa giỏ hàng chi tiết ID ${id}:`, error);
                    return null;
                })
            );

            const results = await Promise.all(deletePromises);
            const failedIds = results.filter(id => id === null);
            if (failedIds.length > 0) {
                showAlert(`Lỗi khi xóa một số mục giỏ hàng: ${failedIds.join(', ')}`, 'error');
                return false;
            }
            return true;
        }

        function updateSubmitButtonState() {
            const paymentSelected = document.querySelector('input[name="selectedPaymentMethod"]:checked');
            const addressSelected = document.getElementById('addressSelect').value;
            const submitBtn = document.getElementById('submitBtn');

            submitBtn.disabled = !(paymentSelected && addressSelected && selectedItems.length > 0);
        }

        function showLoading() {
            document.getElementById('loadingOverlay').classList.add('show');
        }

        function hideLoading() {
            document.getElementById('loadingOverlay').classList.remove('show');
        }

        async function validateForm() {
            const paymentSelected = document.querySelector('input[name="selectedPaymentMethod"]:checked');
            const addressSelected = document.getElementById('addressSelect').value;
            const ghiChuInput = document.getElementById('ghiChu'); // Lấy giá trị ghi chú
            const paymentError = document.getElementById('paymentError');
            const addressError = document.getElementById('addressError');

            paymentError.style.display = paymentSelected ? 'none' : 'block';
            addressError.style.display = addressSelected ? 'none' : 'block';

            if (!paymentSelected || !addressSelected) {
                showAlert('Vui lòng chọn phương thức thanh toán và địa chỉ!', 'error');
                return false;
            }

            if (!selectedItems.length) {
                showAlert('Không có sản phẩm nào được chọn để thanh toán!', 'error');
                return false;
            }

            const submitBtn = document.getElementById('submitBtn');
            submitBtn.classList.add('loading');
            submitBtn.disabled = true;
            showLoading();

            const isVNPAY = parseInt(paymentSelected.value) === 5;
            const discountedTotal = selectedVoucher ? cartTotal * (1 - selectedVoucher.discountPercent / 100) : cartTotal;

            // Tính tổng tiền hàng (chỉ bao gồm tiền sản phẩm, không tính phí ship)
            const tongTienHang = discountedTotal;

            // Tổng cộng (bao gồm phí ship) dùng cho VNPay
            const tongCong = isVNPAY ? discountedTotal + shippingFee : discountedTotal;

            const checkoutData = {
                iD_Khach_Hang: parseInt(document.getElementById('customerId').value) || 0,
                iD_Hinh_Thuc_Thanh_Toan: paymentSelected ? parseInt(paymentSelected.value) : 0,
                iD_Dia_Chi: addressSelected ? parseInt(addressSelected) : 0,
                iD_Voucher: selectedVoucher && selectedVoucher.id ? parseInt(selectedVoucher.id) : null,
                phi_Ship: shippingFee, // Phí ship được tính từ API calculateShippingFee
                tong_Tien: tongTienHang, // Tổng tiền hàng (không bao gồm phí ship)
                ghi_Chu: ghiChuInput.value.trim() || (isVNPAY ? 'Thanh toán qua VNPAY' : ''), // Ghi chú từ input hoặc mặc định cho VNPay
                ma_Hoa_Don: 'HD' + new Date().getTime(),
                hoaDonChiTiets: selectedItems.map(item => {
                    const toppingTotal = item.toppings ? item.toppings.reduce((sum, t) => sum + (t.gia_Topping || 0), 0) : 0;
                    const sizePrice = getSizePrice(item.iD_Size);
                    const basePrice = item.khuyen_Mai && item.khuyen_Mai.ten_Khuyen_Mai ? item.gia_Hien_Thi : item.gia_Goc;
                    const itemTotal = (basePrice + toppingTotal + sizePrice) * item.so_Luong;

                    return {
                        iD_San_Pham: item.iD_San_Pham || 0,
                        ten_San_Pham: item.ten_San_Pham || '',
                        gia_Hien_Thi: item.gia_Hien_Thi || 0,
                        gia_Goc: item.gia_Goc || 0,
                        so_Luong: item.so_Luong || 0,
                        ten_Size: item.ten_Size || '',
                        ten_LuongDa: item.ten_LuongDa || '',
                        ten_DoNgot: item.ten_DoNgot || '',
                        ghi_Chu: item.ghi_Chu || '',
                        iD_Size: item.iD_Size || 0,
                        iD_SanPham_DoNgot: item.iD_SanPham_DoNgot || 0,
                        iD_LuongDa: item.iD_LuongDa || 0,
                        ma_HoaDon_ChiTiet: 'HDC' + item.iD_GioHang_ChiTiet,
                        gia_Them_Size: sizePrice,
                        gia_San_Pham: basePrice + toppingTotal + sizePrice,
                        tong_Tien: itemTotal,
                        hoaDonChiTietToppings: item.toppings ? item.toppings.map(t => ({
                            iD_Topping: t.iD_Topping || 0,
                            ten_Topping: t.ten_Topping || '',
                            so_Luong: 1,
                            gia_Topping: t.gia_Topping || 0
                        })) : []
                    };
                })
            };

            try {
                const response = await fetch('https://localhost:7169/api/BanHangTK/checkout', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(checkoutData)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    showAlert(`Lỗi khi gửi yêu cầu thanh toán: ${errorData.message || 'Không xác định'}`, 'error');
                    hideLoading();
                    submitBtn.classList.remove('loading');
                    submitBtn.disabled = false;
                    return false;
                }

                const result = await response.json();
                const cartItemIds = selectedItems.map(item => item.iD_GioHang_ChiTiet);

                if (isVNPAY) {
                    const paymentData = {
                        orderId: checkoutData.ma_Hoa_Don,
                        orderType: 'string',
                        amount: tongCong, // Tổng cộng (bao gồm phí ship) cho VNPay
                        orderDescription: 'Thanh toan don hang ' + checkoutData.ma_Hoa_Don,
                        name: document.getElementById('userName').textContent
                    };

                    const paymentResponse = await fetch('https://localhost:7169/api/Payment/create', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify(paymentData)
                    });

                    if (!paymentResponse.ok) {
                        throw new Error(`HTTP error! Status: ${paymentResponse.status}`);
                    }

                    const paymentResult = await paymentResponse.json();
                    if (paymentResult.paymentUrl) {
                        window.open(paymentResult.paymentUrl, '_blank');
                    } else {
                        showAlert('Không nhận được URL thanh toán từ VNPAY.', 'error');
                        hideLoading();
                        submitBtn.classList.remove('loading');
                        submitBtn.disabled = false;
                        return false;
                    }
                }

                showAlert('Thanh toán thành công!', 'success');

                const deleteSuccess = await deleteCartItems(cartItemIds);

                if (deleteSuccess) {
                    clearCartCookie();
                    selectedItems = [];
                    await renderCartItems();
                }

                setTimeout(() => {
                    window.location.href = '/QLDonHangTk';
                }, 2000);

                hideLoading();
                submitBtn.classList.remove('loading');
                submitBtn.disabled = false;
                return false;
            } catch (e) {
                console.error('Error sending checkout request:', e);
                showAlert('Lỗi khi gửi yêu cầu thanh toán. Vui lòng thử lại.', 'error');
                hideLoading();
                submitBtn.classList.remove('loading');
                submitBtn.disabled = false;
                return false;
            }
        }

        function showAlert(message, type) {
            const alert = document.createElement('div');
            alert.className = `alert-notification alert-${type} animate__animated animate__slideInRight fixed top-4 right-4 z-50 max-w-sm`;
            alert.innerHTML = `
                <i class="bi bi-${type === 'success' ? 'check-circle-fill' : 'exclamation-circle-fill'} mr-2 text-lg"></i>
                <div>${message}</div>
                <button type="button" class="close-button" onclick="this.parentElement.remove()">
                    <i class="bi bi-x"></i>
                </button>
            `;
            document.body.appendChild(alert);
            setTimeout(() => {
                if (alert.parentElement) {
                    alert.remove();
                }
            }, 3000);
        }

        document.querySelectorAll('input[name="selectedPaymentMethod"]').forEach(input => {
            input.addEventListener('change', updateSubmitButtonState);
        });

        document.getElementById('addressSelect')?.addEventListener('change', updateSelectedAddress);

        window.addEventListener('load', async function () {
            updateSelectedAddress();
            fetchUserInfo();
            await populateDistricts();
        });
    </script>
</div> *@



@model FE.Models.CheckoutTkViewModel
@{
    ViewData["Title"] = "Thanh Toán";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css">
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">

<style>
    :root {
        --primary: #3B82F6;
        --primary-dark: #2563EB;
        --secondary: #F59E0B;
        --light-bg: #F8FAFC;
        --card-bg: #FFFFFF;
        --text-primary: #1F2937;
        --text-secondary: #6B7280;
        --success: #10B981;
        --danger: #EF4444;
    }

    body {
        font-family: 'Roboto', sans-serif;
        background-color: var(--light-bg);
        color: var(--text-primary);
        margin: 0;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
    }

    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
        overflow-y: auto;
    }

    .modal-content {
        background: linear-gradient(135deg, #FFFFFF 0%, #F9FAFB 100%);
        margin: 5% auto;
        padding: 2rem;
        border: none;
        width: 90%;
        max-width: 600px;
        border-radius: 16px;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
    }

    .error-message {
        color: var(--danger);
        font-size: 0.75rem;
        margin-top: 0.5rem;
        display: none;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .cart-item {
        display: flex;
        align-items: flex-start;
        padding: 1.25rem;
        border-bottom: 1px solid #E5E7EB;
        transition: background-color 0.2s ease;
    }

        .cart-item:hover {
            background-color: #F9FAFB;
        }

    .cart-item-details {
        flex: 1;
    }

    .cart-item-name {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--text-primary);
    }

    .cart-item-options {
        font-size: 0.9rem;
        color: var(--text-secondary);
        margin-top: 0.75rem;
    }

    .cart-item-price {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--primary);
    }

    .cart-total {
        font-weight: 700;
        font-size: 1.3rem;
        color: var(--text-primary);
        margin-top: 2rem;
        text-align: right;
    }

    .original-price {
        text-decoration: line-through;
        color: var(--text-secondary);
        font-size: 0.95rem;
        margin-right: 0.5rem;
    }

    .discounted-price {
        color: var(--danger);
        font-weight: 600;
        font-size: 1.1rem;
    }

    .regular-price {
        color: var(--primary);
        font-weight: 600;
        font-size: 1.1rem;
    }

    .cart-item-controls {
        display: flex;
        align-items: center;
        justify-content: flex-end;
        min-width: 70px;
        font-size: 0.95rem;
        font-weight: 500;
        color: var(--text-primary);
    }

        .cart-item-controls .quantity {
            margin-left: 0.75rem;
            font-weight: 600;
        }

    .form-group label {
        font-size: 0.95rem;
        font-weight: 500;
        color: var(--text-primary);
        margin-bottom: 0.75rem;
        display: block;
    }

    .form-group input[type="radio"] {
        margin-right: 0.75rem;
    }

        .form-group input[type="radio"]:checked + .radio-label {
            background-color: #EFF6FF;
            border-color: var(--primary);
            color: var(--primary);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
            font-weight: 700;
            border-width: 2px;
        }

    .add-address-btn, .submit-btn, .edit-user-btn {
        background: linear-gradient(135deg, var(--primary), var(--primary-dark));
        color: white;
        padding: 0.85rem 1.75rem;
        border-radius: 10px;
        border: none;
        font-size: 0.95rem;
        font-weight: 500;
        transition: all 0.2s ease;
        position: relative;
        width: 100%;
    }

    .edit-address-btn {
        background: linear-gradient(135deg, var(--primary), var(--primary-dark));
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        border: none;
        font-size: 0.85rem;
        font-weight: 500;
        transition: all 0.2s ease;
        line-height: 1;
    }

        .add-address-btn:hover, .submit-btn:hover, .edit-address-btn:hover, .edit-user-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(59, 130, 246, 0.3);
        }

    .submit-btn:disabled, .edit-user-btn:disabled {
        background: #A1A1AA;
        cursor: not-allowed;
    }

    .submit-btn.loading::after, .edit-user-btn.loading::after {
        content: '';
        display: inline-block;
        border: 3px solid #ffffff;
        border-top: 3px solid var(--primary);
        border-radius: 50%;
        width: 18px;
        height: 18px;
        animation: spin 1s linear infinite;
        position: absolute;
        right: 1.25rem;
        top: 50%;
        transform: translateY(-50%);
    }

    .alert-notification {
        border-radius: 10px;
        padding: 1rem 1.5rem;
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        animation: slideInRight 0.4s ease-out;
        position: fixed;
        top: 20vh; /* Second fifth of the screen */
        right: 1rem;
        width: 90%;
        max-width: 400px;
        z-index: 1050;
    }

    .alert-error {
        background-color: #FEF2F2;
        color: #991B1B;
        border-left: 4px solid var(--danger);
    }

    .alert-success {
        background-color: #ECFDF5;
        color: #065F46;
        border-left: 4px solid var(--success);
    }

    .close-button {
        background: none;
        border: none;
        font-size: 1.3rem;
        color: var(--text-secondary);
        transition: all 0.2s ease;
        width: 36px;
        height: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
    }

        .close-button:hover {
            background-color: #F3F4F6;
            color: var(--text-primary);
        }

    select, input[type="text"], input[type="tel"], input[type="email"] {
        width: 100%;
        padding: 0.85rem;
        border: 1px solid #E5E7EB;
        border-radius: 10px;
        font-size: 0.95rem;
    }

        select:focus, input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.25);
        }

        select:disabled {
            background-color: #F3F4F6;
            cursor: not-allowed;
        }

    .section-container {
        background: var(--card-bg);
        border-radius: 14px;
        padding: 2rem;
        box-shadow: 0 6px 10px rgba(0, 0, 0, 0.08);
        margin-bottom: 2rem;
    }

    .radio-label {
        display: block;
        padding: 1rem;
        border: 1px solid #E5E7EB;
        border-radius: 10px;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .radio-label:hover {
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.15);
        }

    .loading-spinner {
        display: none;
        border: 5px solid #f3f3f3;
        border-top: 5px solid var(--primary);
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin: 2.5rem auto;
    }

    #cartItemsContainer {
        max-height: 550px;
        overflow-y: auto;
        scrollbar-width: thin;
        scrollbar-color: var(--primary) #f1f1f1;
    }

        #cartItemsContainer::-webkit-scrollbar {
            width: 8px;
        }

        #cartItemsContainer::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        #cartItemsContainer::-webkit-scrollbar-thumb {
            background: var(--primary);
            border-radius: 4px;
        }

    keyframes spin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }

    keyframes slideInRight {
        from

    {
        transform: translateX(100%);
        opacity: 0;
    }

    to {
        transform: translateX(0);
        opacity: 1;
    }

    }

    .footer {
        background: linear-gradient(135deg, #1F2937 0%, #111827 100%);
        color: white;
        padding: 3rem 1rem;
        width: 100vw;
        margin-left: calc(-50vw + 50%);
        flex-shrink: 0;
        margin-top: auto;
    }

    .footer-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 1.5rem;
    }

    .footer-section {
        margin-bottom: 2.5rem;
    }

    .footer-title {
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 1.25rem;
        color: var(--secondary);
    }

    .footer-link {
        display: block;
        color: #D1D5DB;
        text-decoration: none;
        font-size: 0.95rem;
        transition: color 0.2s ease;
        margin-bottom: 0.75rem;
    }

        .footer-link:hover {
            color: var(--primary);
        }

    .footer-social {
        display: flex;
        gap: 1.25rem;
    }

    .social-icon {
        width: 44px;
        height: 44px;
        background: var(--primary);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        text-decoration: none;
        transition: background 0.2s ease;
    }

        .social-icon:hover {
            background: var(--primary-dark);
        }

    .footer-bottom {
        border-top: 1px solid #374151;
        padding-top: 2rem;
        text-align: center;
        color: #9CA3AF;
        font-size: 0.9rem;
    }

   media (max-width: 768px) {
        .footer

    {
        padding: 2rem 1rem;
    }

    .footer-social {
        justify-content: center;
    }

    .grid-cols-1.lg\:grid-cols-2 {
        grid-template-columns: 1fr;
    }

    }

    media (max-width: 480px) {
        .cart-item

    {
        flex-direction: column;
        align-items: flex-start;
    }

    .cart-item-controls {
        width: 100%;
        justify-content: flex-start;
    }

    }

    #loadingOverlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.6);
        z-index: 9999;
        backdrop-filter: blur(4px);
    }

        #loadingOverlay.show {
            display: flex;
            align-items: center;
            justify-content: center;
            animation: fadeIn 0.3s ease-out;
        }

        #loadingOverlay .loading-content {
            background: linear-gradient(135deg, #FFFFFF 0%, #F0F9FF 100%);
            padding: 2.5rem;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
            text-align: center;
            max-width: 300px;
            animation: bounceIn 0.5s ease-out;
        }

        #loadingOverlay .loading-spinner {
            display: block !important;
            margin: 0 auto 1.5rem;
            width: 50px;
            height: 50px;
            border-width: 4px;
        }

        #loadingOverlay p {
            font-size: 1.1rem;
            font-weight: 500;
            color: var(--text-primary);
            margin: 0;
        }

    keyframes fadeIn {
        from

    {
        opacity: 0;
    }

    to {
        opacity: 1;
    }

    }

    keyframes bounceIn {
        0%

    {
        transform: scale(0.3);
        opacity: 0;
    }

    50% {
        transform: scale(1.05);
    }

    70% {
        transform: scale(0.9);
    }

    100% {
        transform: scale(1);
        opacity: 1;
    }

    }

    .address-select-container {
        position: relative;
        display: flex;
        align-items: center;
    }

        .address-select-container select {
            flex: 1;
        }

        .address-select-container .edit-address-btn {
            margin-left: 0.5rem;
        }

    .voucher-info {
        margin-top: 1rem;
        font-size: 0.95rem;
        color: var(--text-secondary);
    }

        .voucher-info .original-price {
            text-decoration: line-through;
            color: var(--text-secondary);
            margin-right: 0.5rem;
        }

        .voucher-info .discounted-price {
            color: var(--success);
            font-weight: 600;
        }

        .voucher-info .discount-amount {
            color: var(--danger);
            font-weight: 600;
        }

    .user-info-container {
        background: var(--card-bg);
        border-radius: 14px;
        padding: 1.5rem;
        box-shadow: 0 6px 10px rgba(0, 0, 0, 0.08);
        margin-bottom: 2rem;
    }

        .user-info-container p {
            margin: 0.5rem 0;
            font-size: 0.95rem;
            color: var(--text-primary);
        }

        .user-info-container .edit-user-btn {
            width: auto;
            padding: 0.5rem 1rem;
            font-size: 0.85rem;
            margin-top: 1rem;
        }

    .cart-total-final {
        font-weight: 700;
        font-size: 1.4rem;
        color: var(--primary);
        margin-top: 1rem;
        text-align: right;
        border-top: 1px solid #E5E7EB;
        padding-top: 1rem;
    }

    .hidden-field {
        display: none;
    }
</style>

<div class="container mx-auto py-10 px-4 sm:px-6 lg:px-8 max-w-7xl">
    <h2 class="text-3xl font-bold text-gray-800 mb-8">Thanh Toán</h2>

    <!-- User Info Section -->
    <div class="user-info-container">
        <h3 class="text-lg font-semibold text-gray-800 mb-3">Thông Tin Người Dùng</h3>
        <p><strong>Họ Tên:</strong> <span id="userName">Đang tải...</span></p>
        <p><strong>Email:</strong> <span id="userEmail">Đang tải...</span></p>
        <p><strong>Số Điện Thoại:</strong> <span id="userPhone">Đang tải...</span></p>
        <button type="button" class="edit-user-btn" onclick="openEditUserModal()">Thay Đổi</button>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <!-- Left: Cart Items -->
        <div class="section-container">
            <h3 class="text-xl font-bold text-gray-800 mb-4">Giỏ Hàng</h3>
            <div id="cartItems">
                @if (Model.CartItems != null && Model.CartItems.Any())
                {
                    <div id="cartItemsContainer"></div>
                    <div class="cart-total">
                        <div>Tổng tiền hàng: <span id="cartTotal">0 đ</span></div>
                        <div>Phí ship: <span id="shippingFee">0 đ</span></div>
                        <div id="voucherInfo" class="voucher-info" style="display: none;">
                            <div>Giá gốc: <span id="originalTotal">0 đ</span></div>
                            <div>Giá sau giảm: <span id="discountedTotal" class="discounted-price">0 đ</span></div>
                            <div>Tổng tiền giảm: <span id="discountAmount" class="discount-amount">0 đ</span></div>
                        </div>
                        <div class="cart-total-final">Tổng cộng (bao gồm phí ship): <span id="finalTotal">0 đ</span></div>
                    </div>
                }
                else
                {
                    <p class="cart-empty text-gray-500">Không có sản phẩm nào được chọn để thanh toán. Vui lòng kiểm tra lại.</p>
                }
            </div>
        </div>

        <!-- Right: Checkout Form -->
        <div>
            <!-- Notifications -->
            @if (TempData["Error"] != null)
            {
                <div class="alert-notification alert-error animate__animated animate__slideInRight">
                    <i class="bi bi-exclamation-circle-fill mr-2 text-lg"></i>
                    <div class="flex-1">@TempData["Error"]</div>
                    <button type="button" class="close-button" data-bs-dismiss="alert">
                        <i class="bi bi-x"></i>
                    </button>
                </div>
            }
            @if (TempData["Success"] != null)
            {
                <div class="alert-notification alert-success animate__animated animate__slideInRight">
                    <i class="bi bi-check-circle-fill mr-2 text-lg"></i>
                    <div class="flex-1">@TempData["Success"]</div>
                    <button type="button" class="close-button" data-bs-dismiss="alert">
                        <i class="bi bi-x"></i>
                    </button>
                </div>
            }

            <div class="section-container">
                <form id="checkoutForm" method="post" asp-action="ProcessCheckout">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="selectedItems" value="@Html.Raw(ViewBag.SelectedItems)" />
                    <input type="hidden" id="customerId" value="@(ViewData["CustomerId"] ?? "0")" />

                    <h4 class="text-lg font-semibold text-gray-800 mb-3">Chọn Địa Chỉ</h4>
                    <p class="text-red-500 text-sm mb-2">Xin lỗi, hiện cửa hàng chỉ có chi nhánh tại Hà Nội.</p>
                    <div id="addresses" class="mb-6">
                        @if (Model.Addresses != null && Model.Addresses.Any())
                        {
                            <div class="form-group address-select-container">
                                <select name="selectedAddress" id="addressSelect" class="w-full" required onchange="updateSelectedAddress()">
                                    <option value="">Chọn địa chỉ</option>
                                    @foreach (var address in Model.Addresses)
                                    {
                                        <option value="@address.ID_Dia_Chi" data-id="@address.ID_Dia_Chi" data-address="@(address.Dia_Chi?.Replace("'", "\\'") ?? "")" data-tinh-thanh="@(address.Tinh_Thanh?.Replace("'", "\\'") ?? "")" data-ghi-chu="@(address.Ghi_Chu?.Replace("'", "\\'") ?? "")" data-ghi-chu-khach-hang="@(address.Ghi_Chu_KhachHang?.Replace("'", "\\'") ?? "")">
                                            @(address.Ghi_Chu ?? "Không xác định"), @(address.Ghi_Chu_KhachHang ?? "Không có ghi chú")
                                        </option>
                                    }
                                </select>
                                <button type="button" id="editAddressBtn" class="edit-address-btn hidden" onclick="openEditModalFromSelect()">Sửa</button>
                            </div>
                        }
                        else
                        {
                            <p class="text-gray-500">Không có địa chỉ nào.</p>
                        }
                    </div>
                    <span id="addressError" class="error-message">Vui lòng chọn một địa chỉ.</span>
                    <button type="button" class="add-address-btn mb-6" onclick="openAddAddressModal()"><i class="bi bi-plus-circle mr-2"></i>Thêm Địa Chỉ Mới</button>

                    <h4 class="text-lg font-semibold text-gray-800 mb-3">Chọn Voucher</h4>
                    <select name="selectedVoucher" id="voucherSelect" class="mb-6" onchange="applyVoucher()">
                        <option value="" data-minimum="0" data-discount="0">Không sử dụng voucher</option>
                        @if (Model.Vouchers != null && Model.Vouchers.Any())
                        {
                            foreach (var voucher in Model.Vouchers)
                            {
                                <option value="@voucher.ID_Voucher" data-minimum="@voucher.So_Tien_Dat_Yeu_Cau" data-discount="@voucher.Gia_Tri_Giam">@(voucher.Ten ?? "Không xác định") (Giảm @voucher.Gia_Tri_Giam% - Đơn tối thiểu @voucher.So_Tien_Dat_Yeu_Cau.ToString("N0", new System.Globalization.CultureInfo("vi-VN")) đ)</option>
                            }
                        }
                    </select>
                    <span id="voucherError" class="error-message">Đơn hàng chưa đạt giá trị tối thiểu để sử dụng voucher này.</span>

                    <h4 class="text-lg font-semibold text-gray-800 mb-3">Chọn Phương Thức Thanh Toán</h4>
                    <div id="paymentMethods" class="mb-6">
                        @{
                            var paymentMethods = new Dictionary<int, (string Name, string Icon)>
                                                {
                                                { 4, ("Thanh toán khi nhận hàng", "bi-truck") },
                                                { 5, ("Thanh toán VNPAY", "bi-wallet2") }
                                                };
                        }
                        @if (Model.PaymentMethods != null && Model.PaymentMethods.Any())
                        {
                            foreach (var method in Model.PaymentMethods)
                            {
                                if (paymentMethods.ContainsKey((int)method.ID_Hinh_Thuc_Thanh_Toan))
                                {
                                    var paymentInfo = paymentMethods[(int)method.ID_Hinh_Thuc_Thanh_Toan];
                                    <div class="form-group">
                                        <input type="radio" id="payment_@method.ID_Hinh_Thuc_Thanh_Toan" name="selectedPaymentMethod" value="@method.ID_Hinh_Thuc_Thanh_Toan" class="sr-only" required />
                                        <label for="payment_@method.ID_Hinh_Thuc_Thanh_Toan" class="radio-label flex items-center gap-2">
                                            <i class="bi @paymentInfo.Icon text-primary text-lg"></i>
                                            <span>@paymentInfo.Name</span>
                                            @if (!string.IsNullOrEmpty(method.Cong_Thanh_Toan))
                                            {
                                                <span class="text-sm text-gray-500">(@method.Cong_Thanh_Toan)</span>
                                            }
                                        </label>
                                    </div>
                                }
                            }
                        }
                        else
                        {
                            <p class="text-gray-500">Không có phương thức thanh toán nào khả dụng.</p>
                        }
                    </div>
                    <span id="paymentError" class="error-message">Vui lòng chọn một phương thức thanh toán.</span>

                    <div class="form-group">
                        <label for="ghiChu">Ghi Chú (Không bắt buộc):</label>
                        <input id="ghiChu" name="ghi_Chu" class="w-full" placeholder="Nhập ghi chú nếu có" />
                    </div>

                    <button type="button" id="submitBtn" class="submit-btn mt-6" disabled onclick="validateForm()"><i class="bi bi-check-circle mr-2"></i>Xác Nhận Thanh Toán</button>
                </form>
            </div>
        </div>
    </div>

    <!-- Loading Overlay -->
    <div id="loadingOverlay">
        <div class="loading-content animate__animated">
            <div class="loading-spinner"></div>
            <p>Đang xử lý thanh toán...</p>
        </div>
    </div>

    <!-- Modal thêm địa chỉ -->
    <div id="addAddressModal" class="modal">
        <div class="modal-content">
            <h3 class="text-lg font-bold text-gray-800 mb-4">Thêm Địa Chỉ Mới</h3>
            <p class="text-red-500 text-sm mb-2">Xin lỗi, hiện cửa hàng chỉ có chi nhánh tại Hà Nội.</p>
            <form asp-action="AddAddress" method="post" onsubmit="handleAddAddressSubmit(event)">
                @Html.AntiForgeryToken()
                <div class="form-group">
                    <label for="add_District">Quận/Huyện:</label>
                    <select id="add_District" name="District" class="w-full" onchange="updateAddWards()" required>
                        <option value="">Chọn Quận/Huyện</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="add_Ward">Phường/Xã:</label>
                    <select id="add_Ward" name="Ward" class="w-full" required>
                        <option value="">Chọn Phường/Xã</option>
                    </select>
                </div>
                <div class="form-group hidden-field">
                    <label for="add_Tinh_Thanh">Tỉnh/Thành:</label>
                    <input id="add_Tinh_Thanh" name="Tinh_Thanh" class="w-full" value="201" readonly />
                </div>
                <div class="form-group">
                    <label for="add_Ghi_Chu">Địa chỉ chi tiết (Bắt buộc):</label>
                    <input id="add_Ghi_Chu" name="Ghi_Chu" class="w-full" required />
                </div>
                <div class="form-group">
                    <label for="add_Ghi_Chu_KhachHang">Ghi Chú Khách Hàng:</label>
                    <input id="add_Ghi_Chu_KhachHang" name="Ghi_Chu_KhachHang" class="w-full" />
                </div>
                <input type="hidden" id="add_Dia_Chi" name="Dia_Chi" />
                <div class="flex justify-end gap-3 mt-4">
                    <button type="submit" class="submit-btn">Thêm</button>
                    <button type="button" class="close-button" onclick="closeAddAddressModal()">Hủy</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal sửa địa chỉ -->
    <div id="editAddressModal" class="modal">
        <div class="modal-content">
            <h3 class="text-lg font-bold text-gray-800 mb-4">Sửa Địa Chỉ</h3>
            <p class="text-red-500 text-sm mb-2">Xin lỗi, hiện cửa hàng chỉ có chi nhánh tại Hà Nội.</p>
            <form asp-action="UpdateAddress" method="post" onsubmit="handleEditAddressSubmit(event)">
                @Html.AntiForgeryToken()
                <input type="hidden" id="edit_ID_Dia_Chi" name="ID_Dia_Chi" />
                <div class="form-group">
                    <label for="edit_District">Quận/Huyện:</label>
                    <select id="edit_District" name="District" class="w-full" onchange="updateEditWards()" required>
                        <option value="">Chọn Quận/Huyện</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="edit_Ward">Phường/Xã:</label>
                    <select id="edit_Ward" name="Ward" class="w-full" required>
                        <option value="">Chọn Phường/Xã</option>
                    </select>
                </div>
                <div class="form-group hidden-field">
                    <label for="edit_Tinh_Thanh">Tỉnh/Thành:</label>
                    <input id="edit_Tinh_Thanh" name="Tinh_Thanh" class="w-full" value="201" readonly />
                </div>
                <div class="form-group">
                    <label for="edit_Ghi_Chu">Địa chỉ chi tiết (Bắt buộc):</label>
                    <input id="edit_Ghi_Chu" name="Ghi_Chu" class="w-full" required />
                </div>
                <div class="form-group">
                    <label for="edit_Ghi_Chu_KhachHang">Ghi Chú Khách Hàng:</label>
                    <input id="edit_Ghi_Chu_KhachHang" name="Ghi_Chu_KhachHang" class="w-full" />
                </div>
                <input type="hidden" id="edit_Dia_Chi" name="Dia_Chi" />
                <input type="hidden" name="Trang_Thai" value="true" />
                <div class="flex justify-end gap-3 mt-4">
                    <button type="submit" class="submit-btn">Cập Nhật</button>
                    <button type="button" class="close-button" onclick="closeEditModal()">Hủy</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal sửa thông tin người dùng -->
    <div id="editUserModal" class="modal">
        <div class="modal-content">
            <h3 class="text-lg font-bold text-gray-800 mb-4">Sửa Thông Tin Người Dùng</h3>
            <form id="editUserForm" onsubmit="handleEditUserSubmit(event)">
                @Html.AntiForgeryToken()
                <input type="hidden" id="editUser_ID_Khach_Hang" name="iD_Khach_Hang" />
                <div class="form-group">
                    <label for="editUser_Ho_Ten">Họ Tên:</label>
                    <input id="editUser_Ho_Ten" name="ho_Ten" type="text" class="w-full" required />
                    <span id="editUserNameError" class="error-message">Vui lòng nhập họ tên.</span>
                </div>
                <div class="form-group">
                    <label for="editUser_Email">Email:</label>
                    <input id="editUser_Email" name="email" type="email" class="w-full" required />
                    <span id="editUserEmailError" class="error-message">Vui lòng nhập email hợp lệ.</span>
                </div>
                <div class="form-group">
                    <label for="editUser_So_Dien_Thoai">Số Điện Thoại:</label>
                    <input id="editUser_So_Dien_Thoai" name="so_Dien_Thoai" type="tel" class="w-full" required pattern="[0-9]{10}" title="Số điện thoại phải là 10 chữ số" oninput="validateUserPhoneNumber(this)" />
                    <span id="editUserPhoneError" class="error-message">Số điện thoại phải là 10 chữ số.</span>
                </div>
                <div class="flex justify-end gap-3 mt-4">
                    <button type="submit" class="edit-user-btn">Cập Nhật</button>
                    <button type="button" class="close-button" onclick="closeEditUserModal()">Hủy</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Footer -->
    <footer class="footer">
        <div class="footer-container">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div class="footer-section">
                    <h3 class="footer-title">TheBoy Trà Sữa</h3>
                    <p class="text-sm text-gray-300 mb-4">Cửa hàng trà sữa tươi ngon, nguyên liệu chất lượng cao. Mang đến những ly trà sữa thơm ngon, đậm đà hương vị Việt Nam.</p>
                    <div class="flex items-center gap-4">
                        <i class="bi bi-geo-alt text-primary text-lg"></i>
                        <span class="text-sm">123 Đường ABC, Quận 1, TP. HCM</span>
                    </div>
                    <div class="flex items-center gap-4 mt-2">
                        <i class="bi bi-telephone text-primary text-lg"></i>
                        <span class="text-sm">+84 123 456 789</span>
                    </div>
                    <div class="flex items-center gap-4 mt-2">
                        <i class="bi bi-envelope text-primary text-lg"></i>
                        <span class="text-sm">theboy@trasua.vn</span>
                    </div>
                </div>
                <div class="footer-section">
                    <h3 class="footer-title">Menu</h3>
                    <a href="/" class="footer-link">Trang chủ</a>
                    <a href="/SanPham" class="footer-link">Sản phẩm</a>
                    <a href="/GioiThieu" class="footer-link">Giới thiệu</a>
                    <a href="/LienHe" class="footer-link">Liên hệ</a>
                    <a href="/KhuyenMai" class="footer-link">Khuyến mãi</a>
                </div>
                <div class="footer-section">
                    <h3 class="footer-title">Dịch vụ</h3>
                    <a href="/GiaoHang" class="footer-link">Giao hàng</a>
                    <a href="/ThanhToan" class="footer-link">Thanh toán</a>
                    <a href="/ChinhSach" class="footer-link">Chính sách</a>
                    <a href="/HoiDap" class="footer-link">Hỏi đáp</a>
                </div>
                <div class="footer-section">
                    <h3 class="footer-title">Theo dõi chúng tôi</h3>
                    <div class="footer-social">
                        <a href="https://facebook.com/theboytrasua" class="social-icon" target="_blank" rel="noopener">
                            <i class="bi bi-facebook"></i>
                        </a>
                        <a href="https://instagram.com/theboytrasua" class="social-icon" target="_blank" rel="noopener">
                            <i class="bi bi-instagram"></i>
                        </a>
                        <a href="https://tiktok.com/theboytrasua" class="social-icon" target="_blank" rel="noopener">
                            <i class="bi bi-tiktok"></i>
                        </a>
                        <a href="https://zalo.me/theboytrasua" class="social-icon" target="_blank" rel="noopener">
                            <i class="bi bi-chat-dots"></i>
                        </a>
                    </div>
                    <p class="text-sm text-gray-300 mt-4">Nhận ưu đãi đặc biệt qua app!</p>
                </div>
            </div>
            <div class="footer-bottom">
                <p>&copy; 2025 TheBoy Trà Sữa. Tất cả quyền được bảo lưu. | Thiết kế bởi xAI</p>
            </div>
        </div>
    </footer>

    <script>
        let selectedItems = [];
        let cartTotal = 0;
        let shippingFee = 0;
        let finalTotal = 0;
        let sizes = [];
        let selectedVoucher = null;
        let districts = [];
        let wards = [];

        async function fetchSizes() {
            try {
                const response = await fetch('https://localhost:7169/api/Size');
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                sizes = await response.json();
            } catch (e) {
                console.error('Error fetching sizes:', e);
                showAlert('Lỗi khi lấy dữ liệu kích thước. Vui lòng thử lại.', 'error');
                sizes = [];
            }
        }

        function getSizePrice(idSize) {
            const size = sizes.find(s => s.iD_Size === idSize);
            return size ? size.gia : 0;
        }

        async function fetchUserInfo() {
            const customerId = document.getElementById('customerId').value;
            try {
                const response = await fetch(`https://localhost:7169/api/BanHangTK/khachhang/${customerId}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                const userData = await response.json();
                document.getElementById('userName').textContent = userData.ho_Ten || 'Không xác định';
                document.getElementById('userEmail').textContent = userData.email || 'Không xác định';
                document.getElementById('userPhone').textContent = userData.so_Dien_Thoai || 'Không xác định';
            } catch (e) {
                console.error('Error fetching user info:', e);
                showAlert('Lỗi khi tải thông tin người dùng. Vui lòng thử lại.', 'error');
                document.getElementById('userName').textContent = 'Lỗi tải dữ liệu';
                document.getElementById('userEmail').textContent = 'Lỗi tải dữ liệu';
                document.getElementById('userPhone').textContent = 'Lỗi tải dữ liệu';
            }
        }

        async function fetchDistricts() {
            try {
                const response = await fetch('https://localhost:7169/api/Shipping/districts/201');
                const result = await response.json();
                if (result.code === 200) {
                    districts = result.data;
                    return districts;
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                console.error('Lỗi khi lấy danh sách quận/huyện:', error);
                showAlert('Lỗi khi lấy danh sách quận/huyện. Vui lòng thử lại.', 'error');
                return [];
            }
        }

        async function fetchWards(districtId) {
            try {
                const response = await fetch(`https://localhost:7169/api/Shipping/wards/${districtId}`);
                const result = await response.json();
                if (result.code === 200) {
                    wards = result.data;
                    return wards;
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                console.error('Lỗi khi lấy danh sách phường/xã:', error);
                showAlert('Lỗi khi lấy danh sách phường/xã. Vui lòng thử lại.', 'error');
                return [];
            }
        }

        async function calculateShippingFee(districtId, wardCode, insuranceValue) {
            const payload = {
                FromDistrictId: 1482,
                ToDistrictId: parseInt(districtId),
                ToWardCode: wardCode,
                Weight: 1000,
                Length: 20,
                Width: 15,
                Height: 15,
                InsuranceValue: insuranceValue
            };

            try {
                const response = await fetch('https://localhost:7169/api/Shipping/calculate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(payload)
                });
                const result = await response.json();
                if (result.code === 200) {
                    return result.data.service_fee;
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                console.error('Lỗi khi tính phí ship:', error);
                showAlert('Lỗi khi tính phí ship. Vui lòng thử lại.', 'error');
                return 0;
            }
        }

        async function populateDistricts() {
            const addDistrictSelect = document.getElementById('add_District');
            const editDistrictSelect = document.getElementById('edit_District');

            addDistrictSelect.innerHTML = '<option value="">Chọn Quận/Huyện</option>';
            editDistrictSelect.innerHTML = '<option value="">Chọn Quận/Huyện</option>';

            districts = await fetchDistricts();
            districts.forEach(district => {
                const addOption = document.createElement('option');
                addOption.value = district.DistrictID;
                addOption.textContent = district.DistrictName;
                addDistrictSelect.appendChild(addOption);

                const editOption = document.createElement('option');
                editOption.value = district.DistrictID;
                editOption.textContent = district.DistrictName;
                editDistrictSelect.appendChild(editOption);
            });
        }

        async function updateAddWards() {
            const districtSelect = document.getElementById('add_District');
            const wardSelect = document.getElementById('add_Ward');
            const selectedDistrictId = districtSelect.value;

            wardSelect.innerHTML = '<option value="">Chọn Phường/Xã</option>';
            if (selectedDistrictId) {
                wards = await fetchWards(selectedDistrictId);
                wards.forEach(ward => {
                    const option = document.createElement('option');
                    option.value = ward.WardCode;
                    option.textContent = ward.WardName;
                    wardSelect.appendChild(option);
                });
            }
            updateSubmitButtonState();
        }

        async function updateEditWards() {
            const districtSelect = document.getElementById('edit_District');
            const wardSelect = document.getElementById('edit_Ward');
            const selectedDistrictId = districtSelect.value;

            wardSelect.innerHTML = '<option value="">Chọn Phường/Xã</option>';
            if (selectedDistrictId) {
                wards = await fetchWards(selectedDistrictId);
                wards.forEach(ward => {
                    const option = document.createElement('option');
                    option.value = ward.WardCode;
                    option.textContent = ward.WardName;
                    wardSelect.appendChild(option);
                });
            }
        }

        function combineAddress(formType) {
            const districtId = document.getElementById(`${formType}_District`).value;
            const wardCode = document.getElementById(`${formType}_Ward`).value;
            if (districtId && wardCode) {
                document.getElementById(`${formType}_Dia_Chi`).value = `${wardCode}, ${districtId}`;
            }
        }

        async function handleAddAddressSubmit(event) {
            event.preventDefault();
            const form = event.target;
            const addBtn = form.querySelector('.submit-btn');
            addBtn.classList.add('loading');
            addBtn.disabled = true;

            combineAddress('add');
            const ghiChuKhachHangInput = document.getElementById('add_Ghi_Chu_KhachHang');
            ghiChuKhachHangInput.value = ghiChuKhachHangInput.value.trim() || 'Không có';

            try {
                const formData = new FormData(form);
                const response = await fetch(form.action, {
                    method: 'POST',
                    headers: {
                        'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: formData
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                showAlert('Thêm địa chỉ thành công!', 'success');
                closeAddAddressModal();
                window.location.reload();
            } catch (e) {
                console.error('Error adding address:', e);
                showAlert('Lỗi khi thêm địa chỉ. Vui lòng thử lại.', 'error');
            } finally {
                addBtn.classList.remove('loading');
                addBtn.disabled = false;
            }
        }

        async function handleEditAddressSubmit(event) {
            event.preventDefault();
            const form = event.target;
            const editBtn = form.querySelector('.submit-btn');
            editBtn.classList.add('loading');
            editBtn.disabled = true;

            combineAddress('edit');
            const ghiChuKhachHangInput = document.getElementById('edit_Ghi_Chu_KhachHang');
            ghiChuKhachHangInput.value = ghiChuKhachHangInput.value.trim() || 'Không có';

            try {
                const formData = new FormData(form);
                const response = await fetch(form.action, {
                    method: 'POST',
                    headers: {
                        'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: formData
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                showAlert('Cập nhật địa chỉ thành công!', 'success');
                closeEditModal();
                window.location.reload();
            } catch (e) {
                console.error('Error updating address:', e);
                showAlert('Lỗi khi cập nhật địa chỉ. Vui lòng thử lại.', 'error');
            } finally {
                editBtn.classList.remove('loading');
                editBtn.disabled = false;
            }
        }

        async function renderCartItems() {
            await fetchSizes();
            const cartItemsContainer = document.getElementById('cartItemsContainer');
            const cartTotalElement = document.getElementById('cartTotal');
            const shippingFeeElement = document.getElementById('shippingFee');
            const finalTotalElement = document.getElementById('finalTotal');
            cartItemsContainer.innerHTML = '';

            if (!selectedItems.length) {
                cartItemsContainer.innerHTML = '<p class="cart-empty text-gray-500">Không có sản phẩm nào được chọn để thanh toán. Vui lòng kiểm tra lại.</p>';
                cartTotalElement.textContent = '0 đ';
                shippingFeeElement.textContent = '0 đ';
                finalTotalElement.textContent = '0 đ';
                return;
            }

            cartTotal = 0;
            selectedItems.forEach(item => {
                const toppingTotal = item.toppings ? item.toppings.reduce((sum, t) => sum + (t.gia_Topping || 0), 0) : 0;
                const sizePrice = getSizePrice(item.iD_Size);
                const basePrice = item.khuyen_Mai && item.khuyen_Mai.ten_Khuyen_Mai ? item.gia_Hien_Thi : item.gia_Goc;
                const itemTotal = (basePrice + toppingTotal + sizePrice) * item.so_Luong;
                cartTotal += itemTotal;

                const cartItem = document.createElement('div');
                cartItem.className = 'cart-item';
                cartItem.innerHTML = `
                    <div class="cart-item-details">
                        <div class="cart-item-name">${item.ten_San_Pham}</div>
                        <div class="cart-item-options">
                            ${item.ten_Size ? `Kích thước: ${item.ten_Size} (+${sizePrice.toLocaleString('vi-VN')} đ)<br>` : ''}
                            ${item.ten_LuongDa ? `Lượng đá: ${item.ten_LuongDa}<br>` : ''}
                            ${item.ten_DoNgot ? `Độ ngọt: ${item.ten_DoNgot}<br>` : ''}
                            ${item.toppings && item.toppings.length ? `Topping: ${item.toppings.map(t => `${t.ten_Topping} (+${t.gia_Topping.toLocaleString('vi-VN')} đ)`).join(', ')}<br>` : ''}
                            ${item.ghi_Chu ? `Ghi chú: ${item.ghi_Chu}` : ''}
                            ${item.khuyen_Mai && item.khuyen_Mai.ten_Khuyen_Mai ? `<br>Khuyến mãi: ${item.khuyen_Mai.ten_Khuyen_Mai} (Giảm ${(item.gia_Goc - item.gia_Hien_Thi).toLocaleString('vi-VN')} đ)` : ''}
                        </div>
                        <div class="cart-item-price">
                            ${item.khuyen_Mai && item.khuyen_Mai.ten_Khuyen_Mai ?
                                `<span class="original-price">${(item.gia_Goc + toppingTotal + sizePrice).toLocaleString('vi-VN')} đ</span>
                                 <span class="discounted-price">${(item.gia_Hien_Thi + toppingTotal + sizePrice).toLocaleString('vi-VN')} đ</span>` :
                                `<span class="regular-price">${(item.gia_Goc + toppingTotal + sizePrice).toLocaleString('vi-VN')} đ</span>`}
                        </div>
                    </div>
                    <div class="cart-item-controls">
                        <span class="quantity">x${item.so_Luong > 0 ? item.so_Luong : 'N/A'}</span>
                    </div>
                `;
                cartItemsContainer.appendChild(cartItem);
            });

            cartTotalElement.textContent = cartTotal.toLocaleString('vi-VN') + ' đ';
            applyVoucher();
            await updateSelectedAddress();
        }

        try {
            selectedItems = JSON.parse(decodeURIComponent('@Html.Raw(ViewBag.SelectedItems)'));
            renderCartItems();
            fetchUserInfo();
            populateDistricts();
        } catch (e) {
            console.error('Error parsing selectedItemsCookie:', e);
            showAlert('Lỗi khi xử lý dữ liệu giỏ hàng. Vui lòng thử lại.', 'error');
            selectedItems = [];
            document.getElementById('cartItemsContainer').innerHTML = '<p class="cart-empty text-gray-500">Không có sản phẩm nào được chọn để thanh toán. Vui lòng kiểm tra lại.</p>';
            document.getElementById('cartTotal').textContent = '0 đ';
            document.getElementById('shippingFee').textContent = '0 đ';
            document.getElementById('finalTotal').textContent = '0 đ';
        }

        function openAddAddressModal() {
            document.getElementById('addAddressModal').style.display = 'block';
            document.getElementById('add_District').value = '';
            document.getElementById('add_Ward').innerHTML = '<option value="">Chọn Phường/Xã</option>';
            document.getElementById('add_Ghi_Chu').value = '';
            document.getElementById('add_Ghi_Chu_KhachHang').value = '';
            updateAddWards();
        }

        function closeAddAddressModal() {
            document.getElementById('addAddressModal').style.display = 'none';
        }

        async function openEditModal(id, diaChi, tinhThanh, ghiChu, ghiChuKhachHang) {
            document.getElementById('edit_ID_Dia_Chi').value = id;
            document.getElementById('edit_Ghi_Chu').value = ghiChu || '';
            document.getElementById('edit_Ghi_Chu_KhachHang').value = ghiChuKhachHang || '';
            document.getElementById('edit_Tinh_Thanh').value = '201';

            const [wardCode, districtId] = diaChi ? diaChi.split(',').map(item => item.trim()) : ['', ''];
            document.getElementById('edit_District').value = districtId || '';
            await updateEditWards();
            document.getElementById('edit_Ward').value = wardCode || '';
            document.getElementById('editAddressModal').style.display = 'block';
        }

        function openEditModalFromSelect() {
            const addressSelect = document.getElementById('addressSelect');
            const selectedOption = addressSelect.options[addressSelect.selectedIndex];
            if (selectedOption.value) {
                openEditModal(
                    selectedOption.getAttribute('data-id'),
                    selectedOption.getAttribute('data-address'),
                    selectedOption.getAttribute('data-tinh-thanh'),
                    selectedOption.getAttribute('data-ghi-chu'),
                    selectedOption.getAttribute('data-ghi-chu-khach-hang')
                );
            }
        }

        async function updateSelectedAddress() {
            const addressSelect = document.getElementById('addressSelect');
            const editAddressBtn = document.getElementById('editAddressBtn');
            const cartTotalElement = document.getElementById('cartTotal');
            const shippingFeeElement = document.getElementById('shippingFee');
            const finalTotalElement = document.getElementById('finalTotal');

            if (addressSelect.value) {
                editAddressBtn.classList.remove('hidden');
                const selectedOption = addressSelect.options[addressSelect.selectedIndex];
                const diaChi = selectedOption.getAttribute('data-address');
                const [wardCode, districtId] = diaChi ? diaChi.split(',').map(item => item.trim()) : ['', ''];

                if (districtId && wardCode) {
                    shippingFee = await calculateShippingFee(districtId, wardCode, cartTotal);
                    shippingFeeElement.textContent = shippingFee.toLocaleString('vi-VN') + ' đ';
                    const discountedTotal = selectedVoucher ? cartTotal * (1 - selectedVoucher.discountPercent / 100) : cartTotal;
                    finalTotal = discountedTotal + shippingFee;
                    finalTotalElement.textContent = finalTotal.toLocaleString('vi-VN') + ' đ';
                } else {
                    shippingFee = 0;
                    shippingFeeElement.textContent = '0 đ';
                    const discountedTotal = selectedVoucher ? cartTotal * (1 - selectedVoucher.discountPercent / 100) : cartTotal;
                    finalTotal = discountedTotal + shippingFee;
                    finalTotalElement.textContent = finalTotal.toLocaleString('vi-VN') + ' đ';
                }
            } else {
                editAddressBtn.classList.add('hidden');
                shippingFee = 0;
                shippingFeeElement.textContent = '0 đ';
                const discountedTotal = selectedVoucher ? cartTotal * (1 - selectedVoucher.discountPercent / 100) : cartTotal;
                finalTotal = discountedTotal + shippingFee;
                finalTotalElement.textContent = finalTotal.toLocaleString('vi-VN') + ' đ';
            }
            updateSubmitButtonState();
        }

        function closeEditModal() {
            document.getElementById('editAddressModal').style.display = 'none';
        }

        function openEditUserModal() {
            const customerId = document.getElementById('customerId').value;
            fetch(`https://localhost:7169/api/BanHangTK/khachhang/${customerId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    document.getElementById('editUser_ID_Khach_Hang').value = data.iD_Khach_Hang;
                    document.getElementById('editUser_Ho_Ten').value = data.ho_Ten || '';
                    document.getElementById('editUser_Email').value = data.email || '';
                    document.getElementById('editUser_So_Dien_Thoai').value = data.so_Dien_Thoai || '';
                    document.getElementById('editUserModal').style.display = 'block';
                })
                .catch(e => {
                    console.error('Error fetching user info for edit:', e);
                    showAlert('Lỗi khi tải thông tin người dùng. Vui lòng thử lại.', 'error');
                });
        }

        function closeEditUserModal() {
            document.getElementById('editUserModal').style.display = 'none';
        }

        function validateUserPhoneNumber(input) {
            const errorElement = document.getElementById('editUserPhoneError');
            const value = input.value;
            if (value.length !== 10 || !/^[0-9]{10}$/.test(value)) {
                errorElement.style.display = 'block';
                input.setCustomValidity('Số điện thoại phải là 10 chữ số');
            } else {
                errorElement.style.display = 'none';
                input.setCustomValidity('');
            }
        }

        async function handleEditUserSubmit(event) {
            event.preventDefault();
            const form = event.target;
            const editBtn = form.querySelector('.edit-user-btn');
            editBtn.classList.add('loading');
            editBtn.disabled = true;

            const formData = new FormData(form);
            const data = {
                iD_Khach_Hang: parseInt(formData.get('iD_Khach_Hang')),
                ho_Ten: formData.get('ho_Ten').trim(),
                email: formData.get('email').trim(),
                so_Dien_Thoai: formData.get('so_Dien_Thoai').trim()
            };

            if (!data.ho_Ten) {
                document.getElementById('editUserNameError').style.display = 'block';
                editBtn.classList.remove('loading');
                editBtn.disabled = false;
                return;
            }

            try {
                const response = await fetch(`https://localhost:7169/api/BanHangTK/khachhang/${data.iD_Khach_Hang}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(data)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    if (errorData.message === "Email đã được sử dụng bởi một khách hàng khác.") {
                        showAlert('Email đã được sử dụng bởi một khách hàng khác. Vui lòng sử dụng email khác.', 'error');
                    } else {
                        showAlert(`Lỗi khi cập nhật thông tin người dùng: ${errorData.message || 'Không xác định'}`, 'error');
                    }
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                showAlert('Cập nhật thông tin người dùng thành công!', 'success');
                closeEditUserModal();
                await fetchUserInfo();
            } catch (e) {
                console.error('Error updating user info:', e);
                // Error is already handled above with specific message for email conflict
            } finally {
                editBtn.classList.remove('loading');
                editBtn.disabled = false;
            }
        }

        function applyVoucher() {
            const voucherSelect = document.getElementById('voucherSelect');
            const voucherError = document.getElementById('voucherError');
            const cartTotalElement = document.getElementById('cartTotal');
            const voucherInfo = document.getElementById('voucherInfo');
            const originalTotalElement = document.getElementById('originalTotal');
            const discountedTotalElement = document.getElementById('discountedTotal');
            const discountAmountElement = document.getElementById('discountAmount');
            const finalTotalElement = document.getElementById('finalTotal');

            const selectedOption = voucherSelect.options[voucherSelect.selectedIndex];
            const minimumOrder = parseFloat(selectedOption.getAttribute('data-minimum')) || 0;
            const discountPercent = parseFloat(selectedOption.getAttribute('data-discount')) || 0;

            if (minimumOrder > 0 && cartTotal < minimumOrder) {
                voucherError.style.display = 'block';
                voucherSelect.value = '';
                selectedVoucher = null;
                cartTotalElement.textContent = cartTotal.toLocaleString('vi-VN') + ' đ';
                voucherInfo.style.display = 'none';
                finalTotal = cartTotal + shippingFee;
                finalTotalElement.textContent = finalTotal.toLocaleString('vi-VN') + ' đ';
                showAlert('Đơn hàng chưa đạt giá trị tối thiểu để sử dụng voucher này!', 'error');
                return;
            }

            voucherError.style.display = 'none';
            selectedVoucher = {
                id: selectedOption.value,
                discountPercent: discountPercent,
                minimumOrder: minimumOrder
            };

            const discount = cartTotal * (discountPercent / 100);
            const discountedTotal = cartTotal - discount;

            if (selectedVoucher.id) {
                voucherInfo.style.display = 'block';
                originalTotalElement.textContent = cartTotal.toLocaleString('vi-VN') + ' đ';
                discountedTotalElement.textContent = discountedTotal.toLocaleString('vi-VN') + ' đ';
                discountAmountElement.textContent = discount.toLocaleString('vi-VN') + ' đ';
            } else {
                voucherInfo.style.display = 'none';
            }

            cartTotalElement.textContent = discountedTotal.toLocaleString('vi-VN') + ' đ';
            finalTotal = discountedTotal + shippingFee;
            finalTotalElement.textContent = finalTotal.toLocaleString('vi-VN') + ' đ';

            const paymentSelected = document.querySelector('input[name="selectedPaymentMethod"]:checked');
            if (paymentSelected && parseInt(paymentSelected.value) === 5) {
                showAlert(`Tổng cộng thanh toán qua VNPay: ${finalTotal.toLocaleString('vi-VN')} đ (bao gồm phí ship)`, 'success');
            }
        }

        function clearCartCookie() {
            document.cookie = 'selectedItems=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
        }

        async function deleteCartItems(cartItemIds) {
            if (!cartItemIds || cartItemIds.length === 0) {
                console.warn('Không có mục giỏ hàng nào để xóa');
                return true;
            }

            const deletePromises = cartItemIds.map(id =>
                fetch(`https://localhost:7169/api/Gio_Hang/delete/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Lỗi khi xóa giỏ hàng chi tiết ID ${id}`);
                    }
                    return id;
                })
                .catch(error => {
                    console.error(`Lỗi khi xóa giỏ hàng chi tiết ID ${id}:`, error);
                    return null;
                })
            );

            const results = await Promise.all(deletePromises);
            const failedIds = results.filter(id => id === null);
            if (failedIds.length > 0) {
                showAlert(`Lỗi khi xóa một số mục giỏ hàng: ${failedIds.join(', ')}`, 'error');
                return false;
            }
            return true;
        }

        function updateSubmitButtonState() {
            const paymentSelected = document.querySelector('input[name="selectedPaymentMethod"]:checked');
            const addressSelected = document.getElementById('addressSelect').value;
            const submitBtn = document.getElementById('submitBtn');

            submitBtn.disabled = !(paymentSelected && addressSelected && selectedItems.length > 0);
        }

        function showLoading() {
            document.getElementById('loadingOverlay').classList.add('show');
        }

        function hideLoading() {
            document.getElementById('loadingOverlay').classList.remove('show');
        }

        async function validateForm() {
            const paymentSelected = document.querySelector('input[name="selectedPaymentMethod"]:checked');
            const addressSelected = document.getElementById('addressSelect').value;
            const ghiChuInput = document.getElementById('ghiChu');
            const paymentError = document.getElementById('paymentError');
            const addressError = document.getElementById('addressError');

            paymentError.style.display = paymentSelected ? 'none' : 'block';
            addressError.style.display = addressSelected ? 'none' : 'block';

            if (!paymentSelected || !addressSelected) {
                showAlert('Vui lòng chọn phương thức thanh toán và địa chỉ!', 'error');
                return false;
            }

            if (!selectedItems.length) {
                showAlert('Không có sản phẩm nào được chọn để thanh toán!', 'error');
                return false;
            }

            const submitBtn = document.getElementById('submitBtn');
            submitBtn.classList.add('loading');
            submitBtn.disabled = true;
            showLoading();

            const isVNPAY = parseInt(paymentSelected.value) === 5;
            const discountedTotal = selectedVoucher ? cartTotal * (1 - selectedVoucher.discountPercent / 100) : cartTotal;

            const tongTienHang = discountedTotal;
            const tongCong = isVNPAY ? discountedTotal + shippingFee : discountedTotal;

            const checkoutData = {
                iD_Khach_Hang: parseInt(document.getElementById('customerId').value) || 0,
                iD_Hinh_Thuc_Thanh_Toan: paymentSelected ? parseInt(paymentSelected.value) : 0,
                iD_Dia_Chi: addressSelected ? parseInt(addressSelected) : 0,
                iD_Voucher: selectedVoucher && selectedVoucher.id ? parseInt(selectedVoucher.id) : null,
                phi_Ship: shippingFee,
                tong_Tien: tongTienHang,
                ghi_Chu: ghiChuInput.value.trim() || (isVNPAY ? 'Thanh toán qua VNPAY' : ''),
                ma_Hoa_Don: 'HD' + new Date().getTime(),
                hoaDonChiTiets: selectedItems.map(item => {
                    const toppingTotal = item.toppings ? item.toppings.reduce((sum, t) => sum + (t.gia_Topping || 0), 0) : 0;
                    const sizePrice = getSizePrice(item.iD_Size);
                    const basePrice = item.khuyen_Mai && item.khuyen_Mai.ten_Khuyen_Mai ? item.gia_Hien_Thi : item.gia_Goc;
                    const itemTotal = (basePrice + toppingTotal + sizePrice) * item.so_Luong;

                    return {
                        iD_San_Pham: item.iD_San_Pham || 0,
                        ten_San_Pham: item.ten_San_Pham || '',
                        gia_Hien_Thi: item.gia_Hien_Thi || 0,
                        gia_Goc: item.gia_Goc || 0,
                        so_Luong: item.so_Luong || 0,
                        ten_Size: item.ten_Size || '',
                        ten_LuongDa: item.ten_LuongDa || '',
                        ten_DoNgot: item.ten_DoNgot || '',
                        ghi_Chu: item.ghi_Chu || '',
                        iD_Size: item.iD_Size || 0,
                        iD_SanPham_DoNgot: item.iD_SanPham_DoNgot || 0,
                        iD_LuongDa: item.iD_LuongDa || 0,
                        ma_HoaDon_ChiTiet: 'HDC' + item.iD_GioHang_ChiTiet,
                        gia_Them_Size: sizePrice,
                        gia_San_Pham: basePrice + toppingTotal + sizePrice,
                        tong_Tien: itemTotal,
                        hoaDonChiTietToppings: item.toppings ? item.toppings.map(t => ({
                            iD_Topping: t.iD_Topping || 0,
                            ten_Topping: t.ten_Topping || '',
                            so_Luong: 1,
                            gia_Topping: t.gia_Topping || 0
                        })) : []
                    };
                })
            };

            try {
                const response = await fetch('https://localhost:7169/api/BanHangTK/checkout', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(checkoutData)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    showAlert(`Lỗi khi gửi yêu cầu thanh toán: ${errorData.message || 'Không xác định'}`, 'error');
                    hideLoading();
                    submitBtn.classList.remove('loading');
                    submitBtn.disabled = false;
                    return false;
                }

                const result = await response.json();
                const cartItemIds = selectedItems.map(item => item.iD_GioHang_ChiTiet);

                if (isVNPAY) {
                    const paymentData = {
                        orderId: checkoutData.ma_Hoa_Don,
                        orderType: 'string',
                        amount: tongCong,
                        orderDescription: 'Thanh toan don hang ' + checkoutData.ma_Hoa_Don,
                        name: document.getElementById('userName').textContent
                    };

                    const paymentResponse = await fetch('https://localhost:7169/api/Payment/create', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify(paymentData)
                    });

                    if (!paymentResponse.ok) {
                        throw new Error(`HTTP error! Status: ${paymentResponse.status}`);
                    }

                    const paymentResult = await paymentResponse.json();
                    if (paymentResult.paymentUrl) {
                        window.open(paymentResult.paymentUrl, '_blank');
                    } else {
                        showAlert('Không nhận được URL thanh toán từ VNPAY.', 'error');
                        hideLoading();
                        submitBtn.classList.remove('loading');
                        submitBtn.disabled = false;
                        return false;
                    }
                }

                showAlert('Thanh toán thành công!', 'success');

                const deleteSuccess = await deleteCartItems(cartItemIds);

                if (deleteSuccess) {
                    clearCartCookie();
                    selectedItems = [];
                    await renderCartItems();
                }

                setTimeout(() => {
                    window.location.href = '/QLDonHangTk';
                }, 2000);

                hideLoading();
                submitBtn.classList.remove('loading');
                submitBtn.disabled = false;
                return false;
            } catch (e) {
                console.error('Error sending checkout request:', e);
                showAlert('Lỗi khi gửi yêu cầu thanh toán. Vui lòng thử lại.', 'error');
                hideLoading();
                submitBtn.classList.remove('loading');
                submitBtn.disabled = false;
                return false;
            }
        }

        function showAlert(message, type) {
            const alert = document.createElement('div');
            alert.className = `alert-notification alert-${type} animate__animated animate__slideInRight`;
            alert.innerHTML = `
                <i class="bi bi-${type === 'success' ? 'check-circle-fill' : 'exclamation-circle-fill'} mr-2 text-lg"></i>
                <div class="flex-1">${message}</div>
                <button type="button" class="close-button" onclick="this.parentElement.remove()">
                    <i class="bi bi-x"></i>
                </button>
            `;
            document.body.appendChild(alert);
            setTimeout(() => {
                if (alert.parentElement) {
                    alert.remove();
                }
            }, 3000);
        }

        document.querySelectorAll('input[name="selectedPaymentMethod"]').forEach(input => {
            input.addEventListener('change', updateSubmitButtonState);
        });

        document.getElementById('addressSelect')?.addEventListener('change', updateSelectedAddress);

        window.addEventListener('load', async function () {
            updateSelectedAddress();
            fetchUserInfo();
            await populateDistricts();
        });
    </script>
</div>