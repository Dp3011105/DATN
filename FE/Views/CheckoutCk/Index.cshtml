@* @{
    ViewData["Title"] = "Thanh Toán";
}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css">
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
<style>
    :root {
        --primary: #3B82F6;
        --primary-dark: #2563EB;
        --secondary: #F59E0B;
        --light-bg: #F8FAFC;
        --card-bg: #FFFFFF;
        --text-primary: #1F2937;
        --text-secondary: #6B7280;
        --success: #10B981;
        --danger: #EF4444;
    }

    body {
        font-family: 'Roboto', sans-serif;
        background-color: var(--light-bg);
        color: var(--text-primary);
        margin: 0;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
    }

    .error-message {
        color: var(--danger);
        font-size: 0.75rem;
        margin-top: 0.5rem;
        display: none;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .cart-item {
        display: flex;
        align-items: flex-start;
        padding: 1.25rem;
        border-bottom: 1px solid #E5E7EB;
        transition: background-color 0.2s ease;
    }

        .cart-item:hover {
            background-color: #F9FAFB;
        }

    .cart-item-details {
        flex: 1;
    }

    .cart-item-name {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--text-primary);
    }

    .cart-item-options {
        font-size: 0.9rem;
        color: var(--text-secondary);
        margin-top: 0.75rem;
    }

    .cart-item-price {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--primary);
    }

    .cart-total {
        font-weight: 700;
        font-size: 1.3rem;
        color: var(--text-primary);
        margin-top: 2rem;
        text-align: right;
    }

    .original-price {
        text-decoration: line-through;
        color: var(--text-secondary);
        font-size: 0.95rem;
        margin-right: 0.5rem;
    }

    .discounted-price {
        color: var(--danger);
        font-weight: 600;
        font-size: 1.1rem;
    }

    .regular-price {
        color: var(--primary);
        font-weight: 600;
        font-size: 1.1rem;
    }

    .cart-item-controls {
        display: flex;
        align-items: center;
        justify-content: flex-end;
        min-width: 70px;
        font-size: 0.95rem;
        font-weight: 500;
        color: var(--text-primary);
    }

        .cart-item-controls .quantity {
            margin-left: 0.75rem;
            font-weight: 600;
        }

    .form-group label {
        font-size: 0.95rem;
        font-weight: 500;
        color: var(--text-primary);
        margin-bottom: 0.75rem;
        display: block;
    }

    .form-group input[type="radio"] {
        margin-right: 0.75rem;
    }

        .form-group input[type="radio"]:checked + .radio-label {
            background-color: #EFF6FF;
            border-color: var(--primary);
            color: var(--primary);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
            font-weight: 700;
            border-width: 2px;
        }

    .submit-btn {
        background: linear-gradient(135deg, var(--primary), var(--primary-dark));
        color: white;
        padding: 0.85rem 1.75rem;
        border-radius: 10px;
        border: none;
        font-size: 0.95rem;
        font-weight: 500;
        transition: all 0.2s ease;
        position: relative;
        width: 100%;
    }

        .submit-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(59, 130, 246, 0.3);
        }

        .submit-btn:disabled {
            background: #A1A1AA;
            cursor: not-allowed;
        }

        .submit-btn.loading::after {
            content: '';
            display: inline-block;
            border: 3px solid #ffffff;
            border-top: 3px solid var(--primary);
            border-radius: 50%;
            width: 18px;
            height: 18px;
            animation: spin 1s linear infinite;
            position: absolute;
            right: 1.25rem;
            top: 50%;
            transform: translateY(-50%);
        }

    .alert-notification {
        border-radius: 10px;
        padding: 1rem 1.5rem;
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        animation: slideIn 0.4s ease-out;
    }

    .alert-error {
        background-color: #FEF2F2;
        color: #991B1B;
        border-left: 4px solid var(--danger);
    }

    .alert-success {
        background-color: #ECFDF5;
        color: #065F46;
        border-left: 4px solid var(--success);
    }

    .success-dialog {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: #FFFFFF;
        border-radius: 14px;
        padding: 2rem;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
        z-index: 10000;
        max-width: 400px;
        width: 90%;
        text-align: center;
        animation: bounceIn 0.5s ease-out;
    }

        .success-dialog button {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 10px;
            border: none;
            font-size: 0.95rem;
            font-weight: 500;
            transition: all 0.2s ease;
            margin-top: 1.5rem;
        }

            .success-dialog button:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 12px rgba(59, 130, 246, 0.3);
            }

    .close-button {
        background: none;
        border: none;
        font-size: 1.3rem;
        color: var(--text-secondary);
        transition: all 0.2s ease;
        width: 36px;
        height: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
    }

        .close-button:hover {
            background-color: #F3F4F6;
            color: var(--text-primary);
        }

    select, input[type="text"], input[type="tel"], input[type="email"] {
        width: 100%;
        padding: 0.85rem;
        border: 1px solid #E5E7EB;
        border-radius: 10px;
        font-size: 0.95rem;
    }

    #add_Ghi_Chu, #add_Ghi_Chu_KhachHang, #email {
        border: 2px solid #D1D5DB;
        transition: border-color 0.2s ease;
    }

        #add_Ghi_Chu:focus, #add_Ghi_Chu_KhachHang:focus, #email:focus {
            border-color: var(--primary);
        }

    select:focus, input:focus {
        outline: none;
        border-color: var(--primary);
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.25);
    }

    select:disabled {
        background-color: #F3F4F6;
        cursor: not-allowed;
    }

    .section-container {
        background: var(--card-bg);
        border-radius: 14px;
        padding: 2rem;
        box-shadow: 0 6px 10px rgba(0, 0, 0, 0.08);
        margin-bottom: 2rem;
    }

    .radio-label {
        display: block;
        padding: 1rem;
        border: 1px solid #E5E7EB;
        border-radius: 10px;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .radio-label:hover {
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.15);
        }

    .loading-spinner {
        display: none;
        border: 5px solid #f3f3f3;
        border-top: 5px solid var(--primary);
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin: 2.5rem auto;
    }

    #cartItemsContainer {
        max-height: 550px;
        overflow-y: auto;
        scrollbar-width: thin;
        scrollbar-color: var(--primary) #f1f1f1;
    }

        #cartItemsContainer::-webkit-scrollbar {
            width: 8px;
        }

        #cartItemsContainer::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        #cartItemsContainer::-webkit-scrollbar-thumb {
            background: var(--primary);
            border-radius: 4px;
        }

    keyframes spin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }

    keyframes slideIn {
        from

    {
        transform: translateY(-20px);
        opacity: 0;
    }

    to {
        transform: translateY(0);
        opacity: 1;
    }

    }

    keyframes fadeIn {
        from

    {
        opacity: 0;
    }

    to {
        opacity: 1;
    }

    }

    keyframes bounceIn {
        0%

    {
        transform: scale(0.3);
        opacity: 0;
    }

    50% {
        transform: scale(1.05);
    }

    70% {
        transform: scale(0.9);
    }

    100% {
        transform: scale(1);
        opacity: 1;
    }

    }

    .footer {
        background: linear-gradient(135deg, #1F2937 0%, #111827 100%);
        color: white;
        padding: 3rem 1rem;
        width: 100vw;
        margin-left: calc(-50vw + 50%);
        flex-shrink: 0;
        margin-top: auto;
    }

    .footer-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 1.5rem;
    }

    .footer-section {
        margin-bottom: 2.5rem;
    }

    .footer-title {
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 1.25rem;
        color: var(--secondary);
    }

    .footer-link {
        display: block;
        color: #D1D5DB;
        text-decoration: none;
        font-size: 0.95rem;
        transition: color 0.2s ease;
        margin-bottom: 0.75rem;
    }

        .footer-link:hover {
            color: var(--primary);
        }

    .footer-social {
        display: flex;
        gap: 1.25rem;
    }

    .social-icon {
        width: 44px;
        height: 44px;
        background: var(--primary);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        text-decoration: none;
        transition: background 0.2s ease;
    }

        .social-icon:hover {
            background: var(--primary-dark);
        }

    .footer-bottom {
        border-top: 1px solid #374151;
        padding-top: 2rem;
        text-align: center;
        color: #9CA3AF;
        font-size: 0.9rem;
    }

    media (max-width: 768px) {
        .footer

    {
        padding: 2rem 1rem;
    }

    .footer-social {
        justify-content: center;
    }

    .grid-cols-1.lg\:grid-cols-2 {
        grid-template-columns: 1fr;
    }

    }

   media (max-width: 480px) {
        .cart-item

    {
        flex-direction: column;
        align-items: flex-start;
    }

    .cart-item-controls {
        width: 100%;
        justify-content: flex-start;
    }

    }

    #loadingOverlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.6);
        z-index: 9999;
        backdrop-filter: blur(4px);
    }

        #loadingOverlay.show {
            display: flex;
            align-items: center;
            justify-content: center;
            animation: fadeIn 0.3s ease-out;
        }

        #loadingOverlay .loading-content {
            background: linear-gradient(135deg, #FFFFFF 0%, #F0F9FF 100%);
            padding: 2.5rem;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
            text-align: center;
            max-width: 300px;
            animation: bounceIn 0.5s ease-out;
        }

        #loadingOverlay .loading-spinner {
            display: block !important;
            margin: 0 auto 1.5rem;
            width: 50px;
            height: 50px;
            border-width: 4px;
        }

        #loadingOverlay p {
            font-size: 1.1rem;
            font-weight: 500;
            color: var(--text-primary);
            margin: 0;
        }
</style>
<div class="container mx-auto py-10 px-4 sm:px-6 lg:px-8 max-w-7xl">
    <h2 class="text-3xl font-bold text-gray-800 mb-8">Thanh Toán</h2>
    <div id="errorNotification" class="alert-notification alert-error animate__animated animate__fadeInDown" style="display: none;">
        <i class="bi bi-exclamation-circle-fill mr-2 text-lg"></i>
        <div class="flex-1" id="errorMessage"></div>
        <button type="button" class="close-button" onclick="this.parentElement.style.display='none'">
            <i class="bi bi-x"></i>
        </button>
    </div>
    <div id="successNotification" class="alert-notification alert-success animate__animated animate__fadeInDown" style="display: none;">
        <i class="bi bi-check-circle-fill mr-2 text-lg"></i>
        <div class="flex-1" id="successMessage"></div>
        <button type="button" class="close-button" onclick="this.parentElement.style.display='none'">
            <i class="bi bi-x"></i>
        </button>
    </div>
    <div id="orderSuccessDialog" class="success-dialog" style="display: none;">
        <p id="orderSuccessMessage"></p>
        <button onclick="window.location.href='/tracuu'">Tra cứu đơn hàng</button>
    </div>
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <!-- Left: Cart Items -->
        <div class="section-container">
            <h3 class="text-xl font-bold text-gray-800 mb-4">Giỏ Hàng</h3>
            <div id="cartItems">
                <div id="cartItemsContainer"></div>
                <div class="cart-total">
                    Tổng tiền hàng: <span id="cartSubTotal">0 đ</span><br>
                    Phí vận chuyển: <span id="shippingFee">0 đ</span><br>
                    Tổng cộng: <span id="cartTotal">0 đ</span>
                </div>
            </div>
        </div>
        <!-- Right: Checkout Form -->
        <div>
            <div class="section-container">
                <form id="checkoutForm" onsubmit="return validateForm(event)">
                    <input type="hidden" name="selectedItems" id="selectedItems" />
                    <h4 class="text-lg font-semibold text-gray-800 mb-3">Thông Tin Người Nhận</h4>
                    <div class="form-group">
                        <label for="fullName">Họ và Tên:</label>
                        <input id="fullName" name="FullName" type="text" class="w-full" required />
                        <span id="fullNameError" class="error-message">Vui lòng nhập họ và tên.</span>
                    </div>
                    <div class="form-group">
                        <label for="phoneNumber">Số Điện Thoại:</label>
                        <input id="phoneNumber" name="PhoneNumber" type="tel" class="w-full" required pattern="^(03|05|07|08|09)[0-9]{8}$" title="Số điện thoại phải là 10 chữ số và bắt đầu bằng 03, 05, 07, 08, hoặc 09" oninput="validatePhoneNumber(this)" />
                        <span id="phoneError" class="error-message">Số điện thoại phải là 10 chữ số và bắt đầu bằng 03, 05, 07, 08, hoặc 09.</span>
                    </div>
                    <div class="form-group">
                        <label for="email">Email:</label>
                        <input id="email" name="Email" type="email" class="w-full" required />
                    </div>
                    <h4 class="text-lg font-semibold text-gray-800 mb-3">Địa Chỉ Nhận Hàng</h4>
                    <p class="text-red-500 text-sm mb-2">Xin lỗi, hiện cửa hàng chỉ có chi nhánh tại Hà Nội.</p>
                    <div class="form-group">
                        <label for="add_District">Quận/Huyện:</label>
                        <select id="add_District" name="District" class="w-full" onchange="updateAddWards()" required>
                            <option value="">Chọn Quận/Huyện</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="add_Ward">Phường/Xã:</label>
                        <select id="add_Ward" name="Ward" class="w-full" onchange="calculateShippingFee()" required>
                            <option value="">Chọn Phường/Xã</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="add_Tinh_Thanh">Tỉnh/Thành:</label>
                        <input id="add_Tinh_Thanh" name="Tinh_Thanh" class="w-full" value="Hà Nội" readonly />
                    </div>
                    <div class="form-group">
                        <label for="add_Ghi_Chu">Địa chỉ chi tiết (Bắt buộc):</label>
                        <input id="add_Ghi_Chu" name="Ghi_Chu" class="w-full" required />
                    </div>
                    <div class="form-group">
                        <label for="add_Ghi_Chu_KhachHang">Ghi Chú Khách Hàng:</label>
                        <input id="add_Ghi_Chu_KhachHang" name="Ghi_Chu_KhachHang" class="w-full" />
                    </div>
                    <input type="hidden" id="add_Dia_Chi" name="Dia_Chi" />
                    <span id="addressError" class="error-message">Vui lòng nhập đầy đủ thông tin địa chỉ.</span>
                    <h4 class="text-lg font-semibold text-gray-800 mb-3">Phương Thức Thanh Toán</h4>
                    <div id="paymentMethods" class="mb-6"></div>
                    <span id="paymentError" class="error-message">Vui lòng chọn một phương thức thanh toán.</span>
                    <button type="submit" id="submitBtn" class="submit-btn mt-6" disabled><i class="bi bi-check-circle mr-2"></i>Xác Nhận Thanh Toán</button>
                </form>
            </div>
        </div>
    </div>
    <!-- Loading Overlay -->
    <div id="loadingOverlay">
        <div class="loading-content animate__animated">
            <div class="loading-spinner"></div>
            <p>Đang xử lý thanh toán...</p>
        </div>
    </div>
    <footer class="footer">
        <div class="footer-container">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div class="footer-section">
                    <h3 class="footer-title">TheBoy Trà Sữa</h3>
                    <p class="text-sm text-gray-300 mb-4">Cửa hàng trà sữa tươi ngon, nguyên liệu chất lượng cao. Mang đến những ly trà sữa thơm ngon, đậm đà hương vị Việt Nam.</p>
                    <div class="flex items-center gap-4">
                        <i class="bi bi-geo-alt text-primary text-lg"></i>
                        <span class="text-sm">123 Đường ABC, Quận 1, TP. HCM</span>
                    </div>
                    <div class="flex items-center gap-4 mt-2">
                        <i class="bi bi-telephone text-primary text-lg"></i>
                        <span class="text-sm">+84 123 456 789</span>
                    </div>
                    <div class="flex items-center gap-4 mt-2">
                        <i class="bi bi-envelope text-primary text-lg"></i>
                        <span class="text-sm">theboy@trasua.vn</span>
                    </div>
                </div>
                <div class="footer-section">
                    <h3 class="footer-title">Menu</h3>
                    <a href="/" class="footer-link">Trang chủ</a>
                    <a href="/SanPham" class="footer-link">Sản phẩm</a>
                    <a href="/GioiThieu" class="footer-link">Giới thiệu</a>
                    <a href="/LienHe" class="footer-link">Liên hệ</a>
                    <a href="/KhuyenMai" class="footer-link">Khuyến mãi</a>
                </div>
                <div class="footer-section">
                    <h3 class="footer-title">Dịch vụ</h3>
                    <a href="/GiaoHang" class="footer-link">Giao hàng</a>
                    <a href="/ThanhToan" class="footer-link">Thanh toán</a>
                    <a href="/ChinhSach" class="footer-link">Chính sách</a>
                    <a href="/HoiDap" class="footer-link">Hỏi đáp</a>
                </div>
                <div class="footer-section">
                    <h3 class="footer-title">Theo dõi chúng tôi</h3>
                    <div class="footer-social">
                        <a href="https://facebook.com/theboytrasua" class="social-icon" target="_blank" rel="noopener">
                            <i class="bi bi-facebook"></i>
                        </a>
                        <a href="https://instagram.com/theboytrasua" class="social-icon" target="_blank" rel="noopener">
                            <i class="bi bi-instagram"></i>
                        </a>
                        <a href="https://tiktok.com/theboytrasua" class="social-icon" target="_blank" rel="noopener">
                            <i class="bi bi-tiktok"></i>
                        </a>
                        <a href="https://zalo.me/theboytrasua" class="social-icon" target="_blank" rel="noopener">
                            <i class="bi bi-chat-dots"></i>
                        </a>
                    </div>
                    <p class="text-sm text-gray-300 mt-4">Nhận ưu đãi đặc biệt qua app!</p>
                </div>
            </div>
            <div class="footer-bottom">
                <p>&copy; 2025 TheBoy Trà Sữa. Tất cả quyền được bảo lưu. | Thiết kế bởi xAI</p>
            </div>
        </div>
    </footer>
    <script>
        let selectedItems = [];
        let cartSubTotal = 0;
        let shippingFee = 0;
        let cartTotal = 0;
        let sizes = [];
        let selectedDistrictId = null;
        let selectedWardCode = null;

        async function fetchSizes() {
            try {
                const response = await fetch('https://localhost:7169/api/Size');
                if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                sizes = await response.json();
                console.log('Sizes from API:', sizes);
            } catch (e) {
                console.error('Error fetching sizes:', e);
                showAlert('Lỗi khi lấy dữ liệu kích thước. Vui lòng thử lại.', 'error');
                sizes = [];
            }
        }

        async function fetchPaymentMethods() {
            try {
                const response = await fetch('https://localhost:7169/api/BanHangTK/hinhthucthanhtoan');
                if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                const paymentMethods = await response.json();
                const paymentMethodsContainer = document.getElementById('paymentMethods');
                paymentMethodsContainer.innerHTML = '';
                const allowedIds = [4, 5];
                const iconMap = { 4: 'bi-truck', 5: 'bi-wallet2' };
                const nameMap = { 4: 'Thanh toán khi nhận hàng', 5: 'Thanh toán VNPAY' };
                paymentMethods
                    .filter(method => allowedIds.includes(method.iD_Hinh_Thuc_Thanh_Toan) && method.trang_Thai)
                    .forEach(method => {
                        const div = document.createElement('div');
                        div.className = 'form-group';
                        div.innerHTML = `
                            <input type="radio" id="payment_${method.iD_Hinh_Thuc_Thanh_Toan}" name="selectedPaymentMethod" value="${method.iD_Hinh_Thuc_Thanh_Toan}" class="sr-only" required />
                            <label for="payment_${method.iD_Hinh_Thuc_Thanh_Toan}" class="radio-label flex items-center gap-2">
                                <i class="bi ${iconMap[method.iD_Hinh_Thuc_Thanh_Toan]} text-primary text-lg"></i>
                                <span>${nameMap[method.iD_Hinh_Thuc_Thanh_Toan]}</span>
                                ${method.cong_Thanh_Toan ? `<span class="text-sm text-gray-500">(${method.cong_Thanh_Toan})</span>` : ''}
                            </label>
                        `;
                        paymentMethodsContainer.appendChild(div);
                    });
                if (paymentMethodsContainer.children.length === 0) {
                    paymentMethodsContainer.innerHTML = '<p class="text-gray-500">Không có phương thức thanh toán nào khả dụng.</p>';
                }
                document.querySelectorAll('input[name="selectedPaymentMethod"]').forEach(input => {
                    input.addEventListener('change', updateSubmitButtonState);
                });
            } catch (e) {
                console.error('Error fetching payment methods:', e);
                showAlert('Lỗi khi lấy phương thức thanh toán. Vui lòng thử lại.', 'error');
                document.getElementById('paymentMethods').innerHTML = '<p class="text-gray-500">Không có phương thức thanh toán nào khả dụng.</p>';
            }
        }

        function getSizePrice(idSize) {
            const size = sizes.find(s => s.iD_Size === idSize);
            return size ? size.gia : 0;
        }

        function getCookie(name) {
            const nameEQ = name + "=";
            const cookies = document.cookie.split(';');
            for (let cookie of cookies) {
                cookie = cookie.trim();
                if (cookie.startsWith(nameEQ)) {
                    try {
                        return JSON.parse(decodeURIComponent(cookie.substring(nameEQ.length)));
                    } catch (e) {
                        console.error(`Error parsing cookie ${name}:`, e);
                        return null;
                    }
                }
            }
            return null;
        }

        function validatePhoneNumber(input) {
            const errorElement = document.getElementById('phoneError');
            const value = input.value;
            const vnPhonePattern = /^(03|05|07|08|09)[0-9]{8}$/;
            if (!vnPhonePattern.test(value)) {
                errorElement.style.display = 'block';
                input.setCustomValidity('Số điện thoại không hợp lệ');
            } else {
                errorElement.style.display = 'none';
                input.setCustomValidity('');
            }
            updateSubmitButtonState();
        }

        async function populateDistricts() {
            const districtSelect = document.getElementById('add_District');
            districtSelect.innerHTML = '<option value="">Chọn Quận/Huyện</option>';
            try {
                const response = await fetch('https://localhost:7169/api/Shipping/districts/201');
                if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                const result = await response.json();
                if (result.code === 200 && result.data) {
                    result.data.forEach(district => {
                        const option = document.createElement('option');
                        option.value = district.DistrictID;
                        option.textContent = district.DistrictName;
                        districtSelect.appendChild(option);
                    });
                } else {
                    throw new Error('Không lấy được danh sách quận/huyện');
                }
            } catch (e) {
                console.error('Error fetching districts:', e);
                showAlert('Lỗi khi lấy danh sách quận/huyện. Vui lòng thử lại.', 'error');
            }
        }

        async function updateAddWards() {
            const districtSelect = document.getElementById('add_District');
            const wardSelect = document.getElementById('add_Ward');
            selectedDistrictId = districtSelect.value;
            wardSelect.innerHTML = '<option value="">Chọn Phường/Xã</option>';
            if (selectedDistrictId) {
                try {
                    const response = await fetch(`https://localhost:7169/api/Shipping/wards/${selectedDistrictId}`);
                    if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                    const result = await response.json();
                    if (result.code === 200 && result.data) {
                        result.data.forEach(ward => {
                            const option = document.createElement('option');
                            option.value = ward.WardCode;
                            option.textContent = ward.WardName;
                            wardSelect.appendChild(option);
                        });
                    } else {
                        throw new Error('Không lấy được danh sách phường/xã');
                    }
                } catch (e) {
                    console.error('Error fetching wards:', e);
                    showAlert('Lỗi khi lấy danh sách phường/xã. Vui lòng thử lại.', 'error');
                }
            } else {
                selectedDistrictId = null;
                selectedWardCode = null;
                shippingFee = 0;
                updateCartTotal();
            }
            updateSubmitButtonState();
        }

        async function calculateShippingFee() {
            const wardSelect = document.getElementById('add_Ward');
            selectedWardCode = wardSelect.value;
            if (selectedDistrictId && selectedWardCode && cartSubTotal > 0) {
                const payload = {
                    FromDistrictId: 1482,
                    ToDistrictId: parseInt(selectedDistrictId),
                    ToWardCode: selectedWardCode,
                    Weight: 1000,
                    Length: 20,
                    Width: 15,
                    Height: 15,
                    InsuranceValue: cartSubTotal
                };
                try {
                    const response = await fetch('https://localhost:7169/api/Shipping/calculate', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });
                    if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                    const result = await response.json();
                    if (result.code === 200 && result.data) {
                        shippingFee = result.data.service_fee;
                    } else {
                        throw new Error('Không tính được phí ship');
                    }
                } catch (e) {
                    console.error('Error calculating shipping fee:', e);
                    showAlert('Lỗi khi tính phí vận chuyển. Vui lòng thử lại.', 'error');
                    shippingFee = 0;
                }
            } else {
                shippingFee = 0;
            }
            updateCartTotal();
        }

        function updateCartTotal() {
            document.getElementById('cartSubTotal').textContent = cartSubTotal.toLocaleString('vi-VN') + ' đ';
            document.getElementById('shippingFee').textContent = shippingFee.toLocaleString('vi-VN') + ' đ';
            cartTotal = cartSubTotal + shippingFee;
            document.getElementById('cartTotal').textContent = cartTotal.toLocaleString('vi-VN') + ' đ';
        }

        async function renderCartItems() {
            await fetchSizes();
            const cartItemsContainer = document.getElementById('cartItemsContainer');
            cartItemsContainer.innerHTML = '';
            if (!selectedItems.length) {
                cartItemsContainer.innerHTML = '<p class="cart-empty text-gray-500">Không có sản phẩm nào được chọn để thanh toán. Vui lòng kiểm tra lại.</p>';
                cartSubTotal = 0;
                updateCartTotal();
                document.getElementById('selectedItems').value = '';
                return;
            }
            cartSubTotal = 0;
            selectedItems.forEach(item => {
                const toppingTotal = item.toppings?.reduce((sum, t) => sum + (t.gia_Topping || 0), 0) || 0;
                const sizePrice = getSizePrice(item.iD_Size);
                const basePrice = item.khuyen_Mai && item.khuyen_Mai.ten_Khuyen_Mai ? item.gia_Hien_Thi : item.gia_Goc;
                const itemTotal = (basePrice + toppingTotal + sizePrice) * item.so_Luong;
                cartSubTotal += itemTotal;
                const cartItem = document.createElement('div');
                cartItem.className = 'cart-item';
                cartItem.innerHTML = `
                    <div class="cart-item-details">
                        <div class="cart-item-name">${item.ten_San_Pham}</div>
                        <div class="cart-item-options">
                            ${item.ten_Size ? `Kích thước: ${item.ten_Size} (+${sizePrice.toLocaleString('vi-VN')} đ)<br>` : ''}
                            ${item.ten_LuongDa ? `Lượng đá: ${item.ten_LuongDa}<br>` : ''}
                            ${item.ten_DoNgot ? `Độ ngọt: ${item.ten_DoNgot}<br>` : ''}
                            ${item.toppings && item.toppings.length ? `Topping: ${item.toppings.map(t => `${t.ten_Topping} (+${t.gia_Topping.toLocaleString('vi-VN')} đ)`).join(', ')}<br>` : ''}
                            ${item.ghi_Chu ? `Ghi chú: ${item.ghi_Chu}` : ''}
                            ${item.khuyen_Mai && item.khuyen_Mai.ten_Khuyen_Mai ? `<br>Khuyến mãi: ${item.khuyen_Mai.ten_Khuyen_Mai} (Giảm ${(item.gia_Goc - item.gia_Hien_Thi).toLocaleString('vi-VN')} đ)` : ''}
                        </div>
                        <div class="cart-item-price">
                            ${item.khuyen_Mai && item.khuyen_Mai.ten_Khuyen_Mai ?
                                `<span class="original-price">${(item.gia_Goc + toppingTotal + sizePrice).toLocaleString('vi-VN')} đ</span>
                                 <span class="discounted-price">${(item.gia_Hien_Thi + toppingTotal + sizePrice).toLocaleString('vi-VN')} đ</span>` :
                                `<span class="regular-price">${(item.gia_Goc + toppingTotal + sizePrice).toLocaleString('vi-VN')} đ</span>`}
                        </div>
                    </div>
                    <div class="cart-item-controls">
                        <span class="quantity">x${item.so_Luong > 0 ? item.so_Luong : 'N/A'}</span>
                    </div>
                `;
                cartItemsContainer.appendChild(cartItem);
            });
            document.getElementById('selectedItems').value = encodeURIComponent(JSON.stringify(selectedItems));
            await calculateShippingFee();
            updateSubmitButtonState();
        }

        try {
            const guestCart = getCookie('guestCart') || [];
            const selectedCartItems = getCookie('selectedCartItems') || [];
            selectedItems = guestCart.filter(item => selectedCartItems.some(selected => selected.iD_GioHang_ChiTiet === item.iD_GioHang_ChiTiet));
            console.log('Selected Items from guestCart:', selectedItems);
            Promise.all([fetchSizes(), fetchPaymentMethods()]).then(() => {
                renderCartItems();
                populateDistricts();
            });
        } catch (e) {
            console.error('Error parsing guestCart:', e);
            showAlert('Lỗi khi xử lý dữ liệu giỏ hàng. Vui lòng thử lại.', 'error');
            selectedItems = [];
            document.getElementById('cartItemsContainer').innerHTML = '<p class="cart-empty text-gray-500">Không có sản phẩm nào được chọn để thanh toán. Vui lòng kiểm tra lại.</p>';
            document.getElementById('cartSubTotal').textContent = '0 đ';
            document.getElementById('shippingFee').textContent = '0 đ';
            document.getElementById('cartTotal').textContent = '0 đ';
            document.getElementById('selectedItems').value = '';
        }

        function combineAddress() {
            const districtSelect = document.getElementById('add_District');
            const wardSelect = document.getElementById('add_Ward');
            const districtName = districtSelect.options[districtSelect.selectedIndex]?.text || '';
            const wardName = wardSelect.options[wardSelect.selectedIndex]?.text || '';
            const detail = document.getElementById('add_Ghi_Chu').value.trim();
            if (districtName && wardName && detail) {
                document.getElementById('add_Dia_Chi').value = `Hà Nội, ${wardName}, ${districtName}, ${detail}`;
            }
        }

        function clearCartCookie() {
            document.cookie = 'guestCart=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
            document.cookie = 'selectedCartItems=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
            console.log('Cookies giỏ hàng đã được xóa');
        }

        function updateGuestCart(cartItemIds) {
            const guestCart = getCookie('guestCart') || [];
            const updatedCart = guestCart.filter(item => !cartItemIds.includes(item.iD_GioHang_ChiTiet));
            document.cookie = 'guestCart=' + encodeURIComponent(JSON.stringify(updatedCart)) + '; path=/; expires=' + new Date(Date.now() + 24 * 60 * 60 * 1000).toUTCString();
            document.cookie = 'selectedCartItems=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
        }

        function updateSubmitButtonState() {
            const paymentSelected = document.querySelector('input[name="selectedPaymentMethod"]:checked');
            const fullName = document.getElementById('fullName').value.trim();
            const phoneNumber = document.getElementById('phoneNumber').value;
            const email = document.getElementById('email').value.trim();
            const district = document.getElementById('add_District').value;
            const ward = document.getElementById('add_Ward').value;
            const addressDetail = document.getElementById('add_Ghi_Chu').value.trim();
            const submitBtn = document.getElementById('submitBtn');
            const vnPhonePattern = /^(03|05|07|08|09)[0-9]{8}$/;
            const isValidPhone = vnPhonePattern.test(phoneNumber);
            submitBtn.disabled = !(fullName && isValidPhone && email && paymentSelected && district && ward && addressDetail && selectedItems.length > 0);
        }

        function showLoading() {
            document.getElementById('loadingOverlay').classList.add('show');
        }

        function hideLoading() {
            document.getElementById('loadingOverlay').classList.remove('show');
        }

        function showAlert(message, type) {
            const notification = document.getElementById(type === 'success' ? 'successNotification' : 'errorNotification');
            const messageElement = document.getElementById(type === 'success' ? 'successMessage' : 'errorMessage');
            messageElement.textContent = message;
            notification.style.display = 'flex';
            setTimeout(() => {
                notification.style.display = 'none';
            }, 3000);
        }

        function showOrderSuccessDialog(maHoaDon) {
            const dialog = document.getElementById('orderSuccessDialog');
            const messageElement = document.getElementById('orderSuccessMessage');
            messageElement.textContent = `Đơn hàng của bạn có Mã hóa đơn là: ${maHoaDon}. Hãy lưu lại mã để tra cứu, theo dõi đơn hàng của bạn.`;
            dialog.style.display = 'block';
        }

        async function validateForm(event) {
            event.preventDefault();
            const paymentSelected = document.querySelector('input[name="selectedPaymentMethod"]:checked');
            const fullName = document.getElementById('fullName').value.trim();
            const phoneNumber = document.getElementById('phoneNumber').value;
            const email = document.getElementById('email').value.trim();
            const district = document.getElementById('add_District').value;
            const ward = document.getElementById('add_Ward').value;
            const addressDetail = document.getElementById('add_Ghi_Chu').value.trim();
            const ghiChuKhachHang = document.getElementById('add_Ghi_Chu_KhachHang').value.trim();
            const paymentError = document.getElementById('paymentError');
            const fullNameError = document.getElementById('fullNameError');
            const phoneError = document.getElementById('phoneError');
            const addressError = document.getElementById('addressError');
            const submitBtn = document.getElementById('submitBtn');
            const vnPhonePattern = /^(03|05|07|08|09)[0-9]{8}$/;
            const isValidPhone = vnPhonePattern.test(phoneNumber);

            paymentError.style.display = paymentSelected ? 'none' : 'block';
            fullNameError.style.display = fullName ? 'none' : 'block';
            phoneError.style.display = isValidPhone ? 'none' : 'block';
            addressError.style.display = (district && ward && addressDetail) ? 'none' : 'block';

            if (!fullName || !isValidPhone || !email || !paymentSelected || !district || !ward || !addressDetail) {
                showAlert('Vui lòng nhập đầy đủ thông tin họ tên, số điện thoại, email, địa chỉ và chọn phương thức thanh toán!', 'error');
                return false;
            }
            if (!selectedItems.length) {
                showAlert('Không có sản phẩm nào được chọn để thanh toán!', 'error');
                return false;
            }

            submitBtn.classList.add('loading');
            submitBtn.disabled = true;
            showLoading();
            combineAddress();
            const isVNPAY = parseInt(paymentSelected.value) === 5;
            const checkoutData = {
                iD_Khach_Hang: null,
                iD_Hinh_Thuc_Thanh_Toan: paymentSelected ? parseInt(paymentSelected.value) : 0,
                dia_Chi_Tu_Nhap: document.getElementById('add_Dia_Chi').value,
                iD_Voucher: null,
                tong_Tien: cartTotal,
                ghi_Chu: `Họ và Tên: ${fullName}, Số Điện Thoại: ${phoneNumber}, Email: ${email}${ghiChuKhachHang ? `, Ghi chú khách hàng: ${ghiChuKhachHang}` : ''}`,
                ma_Hoa_Don: 'HDCK' + new Date().getTime(),
                hoaDonChiTiets: selectedItems.map(item => {
                    const toppingTotal = item.toppings?.reduce((sum, t) => sum + (t.gia_Topping || 0), 0) || 0;
                    const sizePrice = getSizePrice(item.iD_Size);
                    const basePrice = item.khuyen_Mai && item.khuyen_Mai.ten_Khuyen_Mai ? item.gia_Hien_Thi : item.gia_Goc;
                    const itemTotal = (basePrice + toppingTotal + sizePrice) * item.so_Luong;
                    return {
                        iD_San_Pham: item.iD_San_Pham || 0,
                        ten_San_Pham: item.ten_San_Pham || '',
                        gia_Hien_Thi: item.gia_Hien_Thi || 0,
                        gia_Goc: item.gia_Goc || 0,
                        so_Luong: item.so_Luong || 0,
                        ten_Size: item.ten_Size || '',
                        ten_LuongDa: item.ten_LuongDa || '',
                        ten_DoNgot: item.ten_DoNgot || '',
                        ghi_Chu: item.ghi_Chu || '',
                        iD_Size: item.iD_Size || 0,
                        iD_SanPham_DoNgot: item.iD_SanPham_DoNgot || 0,
                        iD_LuongDa: item.iD_LuongDa || 0,
                        ma_HoaDon_ChiTiet: 'HDC' + item.iD_GioHang_ChiTiet,
                        gia_Them_Size: sizePrice,
                        gia_San_Pham: basePrice + toppingTotal + sizePrice,
                        tong_Tien: itemTotal,
                        hoaDonChiTietToppings: item.toppings?.map(t => ({
                            iD_Topping: t.iD_Topping || 0,
                            ten_Topping: t.ten_Topping || '',
                            so_Luong: 1,
                            gia_Topping: t.gia_Topping || 0
                        })) || []
                    };
                })
            };

            console.log('Checkout Data:', JSON.stringify(checkoutData, null, 2));

            try {
                const response = await fetch('https://localhost:7169/api/BanHangCK/checkout', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(checkoutData)
                });
                if (!response.ok) {
                    const errorData = await response.json();
                    showAlert(`Lỗi khi gửi yêu cầu thanh toán: ${errorData.message || 'Không xác định'}`, 'error');
                    hideLoading();
                    submitBtn.classList.remove('loading');
                    submitBtn.disabled = false;
                    return false;
                }
                const result = await response.json();
                const cartItemIds = selectedItems.map(item => item.iD_GioHang_ChiTiet);
                if (isVNPAY) {
                    const paymentData = {
                        orderId: checkoutData.ma_Hoa_Don,
                        orderType: 'string',
                        amount: checkoutData.tong_Tien,
                        orderDescription: 'Thanh toan don hang ' + checkoutData.ma_Hoa_Don,
                        name: fullName
                    };
                    try {
                        const paymentResponse = await fetch('https://localhost:7169/api/Payment/create', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(paymentData)
                        });
                        if (!paymentResponse.ok) throw new Error(`HTTP error! Status: ${paymentResponse.status}`);
                        const paymentResult = await paymentResponse.json();
                        if (paymentResult.paymentUrl) {
                            window.open(paymentResult.paymentUrl, '_blank');
                        } else {
                            showAlert('Không nhận được URL thanh toán từ VNPAY.', 'error');
                            hideLoading();
                            submitBtn.classList.remove('loading');
                            submitBtn.disabled = false;
                            return false;
                        }
                    } catch (e) {
                        console.error('Error creating VNPAY payment:', e);
                        showAlert('Lỗi khi tạo yêu cầu thanh toán VNPAY. Vui lòng thử lại.', 'error');
                        hideLoading();
                        submitBtn.classList.remove('loading');
                        submitBtn.disabled = false;
                        return false;
                    }
                }
                updateGuestCart(cartItemIds);
                selectedItems = [];
                await renderCartItems();
                showOrderSuccessDialog(checkoutData.ma_Hoa_Don);
                hideLoading();
                submitBtn.classList.remove('loading');
                submitBtn.disabled = false;
                return false;
            } catch (e) {
                console.error('Error sending checkout request:', e);
                showAlert('Lỗi khi gửi yêu cầu thanh toán. Vui lòng thử lại.', 'error');
                hideLoading();
                submitBtn.classList.remove('loading');
                submitBtn.disabled = false;
                return false;
            }
        }

        document.getElementById('fullName').addEventListener('input', updateSubmitButtonState);
        document.getElementById('phoneNumber').addEventListener('input', updateSubmitButtonState);
        document.getElementById('email').addEventListener('input', updateSubmitButtonState);
        document.getElementById('add_District').addEventListener('change', updateSubmitButtonState);
        document.getElementById('add_Ward').addEventListener('change', updateSubmitButtonState);
        document.getElementById('add_Ghi_Chu').addEventListener('input', updateSubmitButtonState);
    </script>
</div>


 *@






@* 


@{
    ViewData["Title"] = "Thanh Toán";
}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css">
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
<style>
    /* Giữ nguyên style gốc từ code của bạn */
    :root {
        --primary: #3B82F6;
        --primary-dark: #2563EB;
        --secondary: #F59E0B;
        --light-bg: #F8FAFC;
        --card-bg: #FFFFFF;
        --text-primary: #1F2937;
        --text-secondary: #6B7280;
        --success: #10B981;
        --danger: #EF4444;
    }

    body {
        font-family: 'Roboto', sans-serif;
        background-color: var(--light-bg);
        color: var(--text-primary);
        margin: 0;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
    }

    .error-message {
        color: var(--danger);
        font-size: 0.75rem;
        margin-top: 0.5rem;
        display: none;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .cart-item {
        display: flex;
        align-items: flex-start;
        padding: 1.25rem;
        border-bottom: 1px solid #E5E7EB;
        transition: background-color 0.2s ease;
    }

        .cart-item:hover {
            background-color: #F9FAFB;
        }

    .cart-item-details {
        flex: 1;
    }

    .cart-item-name {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--text-primary);
    }

    .cart-item-options {
        font-size: 0.9rem;
        color: var(--text-secondary);
        margin-top: 0.75rem;
    }

    .cart-item-price {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--primary);
    }

    .cart-total {
        font-weight: 700;
        font-size: 1.3rem;
        color: var(--text-primary);
        margin-top: 2rem;
        text-align: right;
    }

    .original-price {
        text-decoration: line-through;
        color: var(--text-secondary);
        font-size: 0.95rem;
        margin-right: 0.5rem;
    }

    .discounted-price {
        color: var(--danger);
        font-weight: 600;
        font-size: 1.1rem;
    }

    .regular-price {
        color: var(--primary);
        font-weight: 600;
        font-size: 1.1rem;
    }

    .cart-item-controls {
        display: flex;
        align-items: center;
        justify-content: flex-end;
        min-width: 70px;
        font-size: 0.95rem;
        font-weight: 500;
        color: var(--text-primary);
    }

        .cart-item-controls .quantity {
            margin-left: 0.75rem;
            font-weight: 600;
        }

    .form-group label {
        font-size: 0.95rem;
        font-weight: 500;
        color: var(--text-primary);
        margin-bottom: 0.75rem;
        display: block;
    }

    .form-group input[type="radio"] {
        margin-right: 0.75rem;
    }

        .form-group input[type="radio"]:checked + .radio-label {
            background-color: #EFF6FF;
            border-color: var(--primary);
            color: var(--primary);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
            font-weight: 700;
            border-width: 2px;
        }

    .submit-btn {
        background: linear-gradient(135deg, var(--primary), var(--primary-dark));
        color: white;
        padding: 0.85rem 1.75rem;
        border-radius: 10px;
        border: none;
        font-size: 0.95rem;
        font-weight: 500;
        transition: all 0.2s ease;
        position: relative;
        width: 100%;
    }

        .submit-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(59, 130, 246, 0.3);
        }

        .submit-btn:disabled {
            background: #A1A1AA;
            cursor: not-allowed;
        }

        .submit-btn.loading::after {
            content: '';
            display: inline-block;
            border: 3px solid #ffffff;
            border-top: 3px solid var(--primary);
            border-radius: 50%;
            width: 18px;
            height: 18px;
            animation: spin 1s linear infinite;
            position: absolute;
            right: 1.25rem;
            top: 50%;
            transform: translateY(-50%);
        }

    .alert-notification {
        border-radius: 10px;
        padding: 1rem 1.5rem;
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        animation: slideIn 0.4s ease-out;
    }

    .alert-error {
        background-color: #FEF2F2;
        color: #991B1B;
        border-left: 4px solid var(--danger);
    }

    .alert-success {
        background-color: #ECFDF5;
        color: #065F46;
        border-left: 4px solid var(--success);
    }

    .success-dialog {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: #FFFFFF;
        border-radius: 14px;
        padding: 2rem;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
        z-index: 10000;
        max-width: 400px;
        width: 90%;
        text-align: center;
        animation: bounceIn 0.5s ease-out;
    }

        .success-dialog button {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 10px;
            border: none;
            font-size: 0.95rem;
            font-weight: 500;
            transition: all 0.2s ease;
            margin-top: 1.5rem;
        }

            .success-dialog button:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 12px rgba(59, 130, 246, 0.3);
            }

    .close-button {
        background: none;
        border: none;
        font-size: 1.3rem;
        color: var(--text-secondary);
        transition: all 0.2s ease;
        width: 36px;
        height: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
    }

        .close-button:hover {
            background-color: #F3F4F6;
            color: var(--text-primary);
        }

    select, input[type="text"], input[type="tel"], input[type="email"] {
        width: 100%;
        padding: 0.85rem;
        border: 1px solid #E5E7EB;
        border-radius: 10px;
        font-size: 0.95rem;
    }

    #add_Ghi_Chu, #add_Ghi_Chu_KhachHang, #email {
        border: 2px solid #D1D5DB;
        transition: border-color 0.2s ease;
    }

        #add_Ghi_Chu:focus, #add_Ghi_Chu_KhachHang:focus, #email:focus {
            border-color: var(--primary);
        }

    select:focus, input:focus {
        outline: none;
        border-color: var(--primary);
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.25);
    }

    select:disabled {
        background-color: #F3F4F6;
        cursor: not-allowed;
    }

    .section-container {
        background: var(--card-bg);
        border-radius: 14px;
        padding: 2rem;
        box-shadow: 0 6px 10px rgba(0, 0, 0, 0.08);
        margin-bottom: 2rem;
    }

    .radio-label {
        display: block;
        padding: 1rem;
        border: 1px solid #E5E7EB;
        border-radius: 10px;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .radio-label:hover {
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.15);
        }

    .loading-spinner {
        display: none;
        border: 5px solid #f3f3f3;
        border-top: 5px solid var(--primary);
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin: 2.5rem auto;
    }

    #cartItemsContainer {
        max-height: 550px;
        overflow-y: auto;
        scrollbar-width: thin;
        scrollbar-color: var(--primary) #f1f1f1;
    }

        #cartItemsContainer::-webkit-scrollbar {
            width: 8px;
        }

        #cartItemsContainer::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        #cartItemsContainer::-webkit-scrollbar-thumb {
            background: var(--primary);
            border-radius: 4px;
        }

    keyframes spin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }

    keyframes slideIn {
        from

    {
        transform: translateY(-20px);
        opacity: 0;
    }

    to {
        transform: translateY(0);
        opacity: 1;
    }

    }

    keyframes fadeIn {
        from

    {
        opacity: 0;
    }

    to {
        opacity: 1;
    }

    }

    keyframes bounceIn {
        0%

    {
        transform: scale(0.3);
        opacity: 0;
    }

    50% {
        transform: scale(1.05);
    }

    70% {
        transform: scale(0.9);
    }

    100% {
        transform: scale(1);
        opacity: 1;
    }

    }

    .footer {
        background: linear-gradient(135deg, #1F2937 0%, #111827 100%);
        color: white;
        padding: 3rem 1rem;
        width: 100vw;
        margin-left: calc(-50vw + 50%);
        flex-shrink: 0;
        margin-top: auto;
    }

    .footer-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 1.5rem;
    }

    .footer-section {
        margin-bottom: 2.5rem;
    }

    .footer-title {
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 1.25rem;
        color: var(--secondary);
    }

    .footer-link {
        display: block;
        color: #D1D5DB;
        text-decoration: none;
        font-size: 0.95rem;
        transition: color 0.2s ease;
        margin-bottom: 0.75rem;
    }

        .footer-link:hover {
            color: var(--primary);
        }

    .footer-social {
        display: flex;
        gap: 1.25rem;
    }

    .social-icon {
        width: 44px;
        height: 44px;
        background: var(--primary);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        text-decoration: none;
        transition: background 0.2s ease;
    }

        .social-icon:hover {
            background: var(--primary-dark);
        }

    .footer-bottom {
        border-top: 1px solid #374151;
        padding-top: 2rem;
        text-align: center;
        color: #9CA3AF;
        font-size: 0.9rem;
    }

    media (max-width: 768px) {
        .footer

    {
        padding: 2rem 1rem;
    }

    .footer-social {
        justify-content: center;
    }

    .grid-cols-1.lg\:grid-cols-2 {
        grid-template-columns: 1fr;
    }

    }

    media (max-width: 480px) {
        .cart-item

    {
        flex-direction: column;
        align-items: flex-start;
    }

    .cart-item-controls {
        width: 100%;
        justify-content: flex-start;
    }

    }

    #loadingOverlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.6);
        z-index: 9999;
        backdrop-filter: blur(4px);
    }

        #loadingOverlay.show {
            display: flex;
            align-items: center;
            justify-content: center;
            animation: fadeIn 0.3s ease-out;
        }

        #loadingOverlay .loading-content {
            background: linear-gradient(135deg, #FFFFFF 0%, #F0F9FF 100%);
            padding: 2.5rem;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
            text-align: center;
            max-width: 300px;
            animation: bounceIn 0.5s ease-out;
        }

        #loadingOverlay .loading-spinner {
            display: block !important;
            margin: 0 auto 1.5rem;
            width: 50px;
            height: 50px;
            border-width: 4px;
        }

        #loadingOverlay p {
            font-size: 1.1rem;
            font-weight: 500;
            color: var(--text-primary);
            margin: 0;
        }
</style>
<div class="container mx-auto py-10 px-4 sm:px-6 lg:px-8 max-w-7xl">
    <h2 class="text-3xl font-bold text-gray-800 mb-8">Thanh Toán</h2>
    <div id="errorNotification" class="alert-notification alert-error animate__animated animate__fadeInDown" style="display: none;">
        <i class="bi bi-exclamation-circle-fill mr-2 text-lg"></i>
        <div class="flex-1" id="errorMessage"></div>
        <button type="button" class="close-button" onclick="this.parentElement.style.display='none'">
            <i class="bi bi-x"></i>
        </button>
    </div>
    <div id="successNotification" class="alert-notification alert-success animate__animated animate__fadeInDown" style="display: none;">
        <i class="bi bi-check-circle-fill mr-2 text-lg"></i>
        <div class="flex-1" id="successMessage"></div>
        <button type="button" class="close-button" onclick="this.parentElement.style.display='none'">
            <i class="bi bi-x"></i>
        </button>
    </div>
    <div id="orderSuccessDialog" class="success-dialog" style="display: none;">
        <p id="orderSuccessMessage"></p>
        <button onclick="window.location.href='/tracuu'">Tra cứu đơn hàng</button>
    </div>
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <!-- Left: Cart Items -->
        <div class="section-container">
            <h3 class="text-xl font-bold text-gray-800 mb-4">Giỏ Hàng</h3>
            <div id="cartItems">
                <div id="cartItemsContainer"></div>
                <div class="cart-total">
                    Tổng tiền hàng: <span id="cartSubTotal">0 đ</span><br>
                    Phí vận chuyển: <span id="shippingFee">0 đ</span><br>
                    Tổng cộng: <span id="cartTotal">0 đ</span>
                </div>
            </div>
        </div>
        <!-- Right: Checkout Form -->
        <div>
            <div class="section-container">
                <form id="checkoutForm" onsubmit="return validateForm(event)">
                    <input type="hidden" name="selectedItems" id="selectedItems" />
                    <h4 class="text-lg font-semibold text-gray-800 mb-3">Thông Tin Người Nhận</h4>
                    <div class="form-group">
                        <label for="fullName">Họ và Tên:</label>
                        <input id="fullName" name="FullName" type="text" class="w-full" required />
                        <span id="fullNameError" class="error-message">Vui lòng nhập họ và tên.</span>
                    </div>
                    <div class="form-group">
                        <label for="phoneNumber">Số Điện Thoại:</label>
                        <input id="phoneNumber" name="PhoneNumber" type="tel" class="w-full" required pattern="^(03|05|07|08|09)[0-9]{8}$" title="Số điện thoại phải là 10 chữ số và bắt đầu bằng 03, 05, 07, 08, hoặc 09" oninput="validatePhoneNumber(this)" />
                        <span id="phoneError" class="error-message">Số điện thoại phải là 10 chữ số và bắt đầu bằng 03, 05, 07, 08, hoặc 09.</span>
                    </div>
                    <div class="form-group">
                        <label for="email">Email:</label>
                        <input id="email" name="Email" type="email" class="w-full" required oninput="validateEmail(this)" />
                        <span id="emailError" class="error-message">Email không hợp lệ.</span>
                    </div>
                    <h4 class="text-lg font-semibold text-gray-800 mb-3">Địa Chỉ Nhận Hàng</h4>
                    <p class="text-red-500 text-sm mb-2">Xin lỗi, hiện cửa hàng chỉ có chi nhánh tại Hà Nội.</p>
                    <div class="form-group">
                        <label for="add_District">Quận/Huyện:</label>
                        <select id="add_District" name="District" class="w-full" onchange="updateAddWards()" required>
                            <option value="">Chọn Quận/Huyện</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="add_Ward">Phường/Xã:</label>
                        <select id="add_Ward" name="Ward" class="w-full" onchange="calculateShippingFee()" required>
                            <option value="">Chọn Phường/Xã</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="add_Tinh_Thanh">Tỉnh/Thành:</label>
                        <input id="add_Tinh_Thanh" name="Tinh_Thanh" class="w-full" value="Hà Nội" readonly />
                    </div>
                    <div class="form-group">
                        <label for="add_Ghi_Chu">Địa chỉ chi tiết (Bắt buộc):</label>
                        <input id="add_Ghi_Chu" name="Ghi_Chu" class="w-full" required />
                    </div>
                    <div class="form-group">
                        <label for="add_Ghi_Chu_KhachHang">Ghi Chú Khách Hàng:</label>
                        <input id="add_Ghi_Chu_KhachHang" name="Ghi_Chu_KhachHang" class="w-full" />
                    </div>
                    <input type="hidden" id="add_Dia_Chi" name="Dia_Chi" />
                    <span id="addressError" class="error-message">Vui lòng nhập đầy đủ thông tin địa chỉ.</span>
                    <h4 class="text-lg font-semibold text-gray-800 mb-3">Phương Thức Thanh Toán</h4>
                    <div id="paymentMethods" class="mb-6"></div>
                    <span id="paymentError" class="error-message">Vui lòng chọn một phương thức thanh toán.</span>
                    <button type="submit" id="submitBtn" class="submit-btn mt-6" disabled><i class="bi bi-check-circle mr-2"></i>Xác Nhận Thanh Toán</button>
                </form>
            </div>
        </div>
    </div>
    <!-- Loading Overlay -->
    <div id="loadingOverlay">
        <div class="loading-content animate__animated">
            <div class="loading-spinner"></div>
            <p>Đang xử lý thanh toán...</p>
        </div>
    </div>
    <footer class="footer">
        <div class="footer-container">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div class="footer-section">
                    <h3 class="footer-title">TheBoy Trà Sữa</h3>
                    <p class="text-sm text-gray-300 mb-4">Cửa hàng trà sữa tươi ngon, nguyên liệu chất lượng cao. Mang đến những ly trà sữa thơm ngon, đậm đà hương vị Việt Nam.</p>
                    <div class="flex items-center gap-4">
                        <i class="bi bi-geo-alt text-primary text-lg"></i>
                        <span class="text-sm">123 Đường ABC, Quận 1, TP. HCM</span>
                    </div>
                    <div class="flex items-center gap-4 mt-2">
                        <i class="bi bi-telephone text-primary text-lg"></i>
                        <span class="text-sm">+84 123 456 789</span>
                    </div>
                    <div class="flex items-center gap-4 mt-2">
                        <i class="bi bi-envelope text-primary text-lg"></i>
                        <span class="text-sm">theboy@trasua.vn</span>
                    </div>
                </div>
                <div class="footer-section">
                    <h3 class="footer-title">Menu</h3>
                    <a href="/" class="footer-link">Trang chủ</a>
                    <a href="/SanPham" class="footer-link">Sản phẩm</a>
                    <a href="/GioiThieu" class="footer-link">Giới thiệu</a>
                    <a href="/LienHe" class="footer-link">Liên hệ</a>
                    <a href="/KhuyenMai" class="footer-link">Khuyến mãi</a>
                </div>
                <div class="footer-section">
                    <h3 class="footer-title">Dịch vụ</h3>
                    <a href="/GiaoHang" class="footer-link">Giao hàng</a>
                    <a href="/ThanhToan" class="footer-link">Thanh toán</a>
                    <a href="/ChinhSach" class="footer-link">Chính sách</a>
                    <a href="/HoiDap" class="footer-link">Hỏi đáp</a>
                </div>
                <div class="footer-section">
                    <h3 class="footer-title">Theo dõi chúng tôi</h3>
                    <div class="footer-social">
                        <a href="https://facebook.com/theboytrasua" class="social-icon" target="_blank" rel="noopener">
                            <i class="bi bi-facebook"></i>
                        </a>
                        <a href="https://instagram.com/theboytrasua" class="social-icon" target="_blank" rel="noopener">
                            <i class="bi bi-instagram"></i>
                        </a>
                        <a href="https://tiktok.com/theboytrasua" class="social-icon" target="_blank" rel="noopener">
                            <i class="bi bi-tiktok"></i>
                        </a>
                        <a href="https://zalo.me/theboytrasua" class="social-icon" target="_blank" rel="noopener">
                            <i class="bi bi-chat-dots"></i>
                        </a>
                    </div>
                    <p class="text-sm text-gray-300 mt-4">Nhận ưu đãi đặc biệt qua app!</p>
                </div>
            </div>
            <div class="footer-bottom">
                <p>&copy; 2025 TheBoy Trà Sữa. Tất cả quyền được bảo lưu. | Thiết kế bởi xAI</p>
            </div>
        </div>
    </footer>
    <script src="/js/validateEmail.js"></script> <!-- Tích hợp file validateEmail.js -->
    <script>
        let selectedItems = [];
        let cartSubTotal = 0;
        let shippingFee = 0;
        let cartTotal = 0;
        let sizes = [];
        let selectedDistrictId = null;
        let selectedWardCode = null;

        // Hàm lấy dữ liệu kích thước từ API
        async function fetchSizes() {
            try {
                const response = await fetch('https://localhost:7169/api/Size', { method: 'GET' });
                if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                sizes = await response.json();
                console.log('Sizes from API:', sizes);
            } catch (e) {
                console.error('Error fetching sizes:', e);
                showAlert('Lỗi khi lấy dữ liệu kích thước. Vui lòng thử lại.', 'error');
                sizes = [];
            }
        }

        // Hàm lấy phương thức thanh toán từ API
        async function fetchPaymentMethods() {
            try {
                const response = await fetch('https://localhost:7169/api/BanHangTK/hinhthucthanhtoan', { method: 'GET' });
                if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                const paymentMethods = await response.json();
                const paymentMethodsContainer = document.getElementById('paymentMethods');
                paymentMethodsContainer.innerHTML = '';
                const allowedIds = [4, 5]; // Thanh toán khi nhận hàng (4) và VNPAY (5)
                const iconMap = { 4: 'bi-truck', 5: 'bi-wallet2' };
                const nameMap = { 4: 'Thanh toán khi nhận hàng', 5: 'Thanh toán VNPAY' };
                paymentMethods
                    .filter(method => allowedIds.includes(method.iD_Hinh_Thuc_Thanh_Toan) && method.trang_Thai)
                    .forEach(method => {
                        const div = document.createElement('div');
                        div.className = 'form-group';
                        div.innerHTML = `
                            <input type="radio" id="payment_${method.iD_Hinh_Thuc_Thanh_Toan}" name="selectedPaymentMethod" value="${method.iD_Hinh_Thuc_Thanh_Toan}" class="sr-only" required />
                            <label for="payment_${method.iD_Hinh_Thuc_Thanh_Toan}" class="radio-label flex items-center gap-2">
                                <i class="bi ${iconMap[method.iD_Hinh_Thuc_Thanh_Toan]} text-primary text-lg"></i>
                                <span>${nameMap[method.iD_Hinh_Thuc_Thanh_Toan]}</span>
                                ${method.cong_Thanh_Toan ? `<span class="text-sm text-gray-500">(${method.cong_Thanh_Toan})</span>` : ''}
                            </label>
                        `;
                        paymentMethodsContainer.appendChild(div);
                    });
                if (paymentMethodsContainer.children.length === 0) {
                    paymentMethodsContainer.innerHTML = '<p class="text-gray-500">Không có phương thức thanh toán nào khả dụng.</p>';
                }
                document.querySelectorAll('input[name="selectedPaymentMethod"]').forEach(input => {
                    input.addEventListener('change', updateSubmitButtonState);
                });
            } catch (e) {
                console.error('Error fetching payment methods:', e);
                showAlert('Lỗi khi lấy phương thức thanh toán. Vui lòng thử lại.', 'error');
                document.getElementById('paymentMethods').innerHTML = '<p class="text-gray-500">Không có phương thức thanh toán nào khả dụng.</p>';
            }
        }

        // Hàm lấy giá kích thước
        function getSizePrice(idSize) {
            const size = sizes.find(s => s.iD_Size === idSize);
            return size ? size.gia : 0;
        }

        // Hàm lấy cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const cookies = document.cookie.split(';');
            for (let cookie of cookies) {
                cookie = cookie.trim();
                if (cookie.startsWith(nameEQ)) {
                    try {
                        return JSON.parse(decodeURIComponent(cookie.substring(nameEQ.length)));
                    } catch (e) {
                        console.error(`Error parsing cookie ${name}:`, e);
                        return null;
                    }
                }
            }
            return null;
        }

        // Hàm validate số điện thoại
        function validatePhoneNumber(input) {
            const errorElement = document.getElementById('phoneError');
            const value = input.value;
            const vnPhonePattern = /^(03|05|07|08|09)[0-9]{8}$/;
            if (!vnPhonePattern.test(value)) {
                errorElement.style.display = 'block';
                input.setCustomValidity('Số điện thoại không hợp lệ');
            } else {
                errorElement.style.display = 'none';
                input.setCustomValidity('');
            }
            updateSubmitButtonState();
        }

        // Hàm lấy danh sách quận/huyện
        async function populateDistricts() {
            const districtSelect = document.getElementById('add_District');
            districtSelect.innerHTML = '<option value="">Chọn Quận/Huyện</option>';
            try {
                const response = await fetch('https://localhost:7169/api/Shipping/districts/201', { method: 'GET' });
                if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                const result = await response.json();
                if (result.code === 200 && result.data) {
                    result.data.forEach(district => {
                        const option = document.createElement('option');
                        option.value = district.DistrictID;
                        option.textContent = district.DistrictName;
                        districtSelect.appendChild(option);
                    });
                } else {
                    throw new Error('Không lấy được danh sách quận/huyện');
                }
            } catch (e) {
                console.error('Error fetching districts:', e);
                showAlert('Lỗi khi lấy danh sách quận/huyện. Vui lòng thử lại.', 'error');
            }
        }

        // Hàm cập nhật danh sách phường/xã
        async function updateAddWards() {
            const districtSelect = document.getElementById('add_District');
            const wardSelect = document.getElementById('add_Ward');
            selectedDistrictId = districtSelect.value;
            wardSelect.innerHTML = '<option value="">Chọn Phường/Xã</option>';
            if (selectedDistrictId) {
                try {
                    const response = await fetch(`https://localhost:7169/api/Shipping/wards/${selectedDistrictId}`, { method: 'GET' });
                    if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                    const result = await response.json();
                    if (result.code === 200 && result.data) {
                        result.data.forEach(ward => {
                            const option = document.createElement('option');
                            option.value = ward.WardCode;
                            option.textContent = ward.WardName;
                            wardSelect.appendChild(option);
                        });
                    } else {
                        throw new Error('Không lấy được danh sách phường/xã');
                    }
                } catch (e) {
                    console.error('Error fetching wards:', e);
                    showAlert('Lỗi khi lấy danh sách phường/xã. Vui lòng thử lại.', 'error');
                }
            } else {
                selectedDistrictId = null;
                selectedWardCode = null;
                shippingFee = 0;
                updateCartTotal();
            }
            updateSubmitButtonState();
        }

        // Hàm tính phí vận chuyển
        async function calculateShippingFee() {
            const wardSelect = document.getElementById('add_Ward');
            selectedWardCode = wardSelect.value;
            if (selectedDistrictId && selectedWardCode && cartSubTotal > 0) {
                const payload = {
                    FromDistrictId: 1482,
                    ToDistrictId: parseInt(selectedDistrictId),
                    ToWardCode: selectedWardCode,
                    Weight: 1000,
                    Length: 20,
                    Width: 15,
                    Height: 15,
                    InsuranceValue: cartSubTotal
                };
                try {
                    const response = await fetch('https://localhost:7169/api/Shipping/calculate', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });
                    if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                    const result = await response.json();
                    if (result.code === 200 && result.data) {
                        shippingFee = result.data.service_fee;
                    } else {
                        throw new Error('Không tính được phí ship');
                    }
                } catch (e) {
                    console.error('Error calculating shipping fee:', e);
                    showAlert('Lỗi khi tính phí vận chuyển. Vui lòng thử lại.', 'error');
                    shippingFee = 0;
                }
            } else {
                shippingFee = 0;
            }
            updateCartTotal();
        }

        // Hàm cập nhật tổng tiền giỏ hàng
        function updateCartTotal() {
            document.getElementById('cartSubTotal').textContent = cartSubTotal.toLocaleString('vi-VN') + ' đ';
            document.getElementById('shippingFee').textContent = shippingFee.toLocaleString('vi-VN') + ' đ';
            cartTotal = cartSubTotal + shippingFee;
            document.getElementById('cartTotal').textContent = cartTotal.toLocaleString('vi-VN') + ' đ';
        }

        // Hàm hiển thị giỏ hàng
        async function renderCartItems() {
            await fetchSizes();
            const cartItemsContainer = document.getElementById('cartItemsContainer');
            cartItemsContainer.innerHTML = '';
            if (!selectedItems.length) {
                cartItemsContainer.innerHTML = '<p class="cart-empty text-gray-500">Không có sản phẩm nào được chọn để thanh toán. Vui lòng kiểm tra lại.</p>';
                cartSubTotal = 0;
                updateCartTotal();
                document.getElementById('selectedItems').value = '';
                return;
            }
            cartSubTotal = 0;
            selectedItems.forEach(item => {
                const toppingTotal = item.toppings?.reduce((sum, t) => sum + (t.gia_Topping || 0), 0) || 0;
                const sizePrice = getSizePrice(item.iD_Size);
                const basePrice = item.khuyen_Mai && item.khuyen_Mai.ten_Khuyen_Mai ? item.gia_Hien_Thi : item.gia_Goc;
                const itemTotal = (basePrice + toppingTotal + sizePrice) * item.so_Luong;
                cartSubTotal += itemTotal;
                const cartItem = document.createElement('div');
                cartItem.className = 'cart-item';
                cartItem.innerHTML = `
                    <div class="cart-item-details">
                        <div class="cart-item-name">${item.ten_San_Pham}</div>
                        <div class="cart-item-options">
                            ${item.ten_Size ? `Kích thước: ${item.ten_Size} (+${sizePrice.toLocaleString('vi-VN')} đ)<br>` : ''}
                            ${item.ten_LuongDa ? `Lượng đá: ${item.ten_LuongDa}<br>` : ''}
                            ${item.ten_DoNgot ? `Độ ngọt: ${item.ten_DoNgot}<br>` : ''}
                            ${item.toppings && item.toppings.length ? `Topping: ${item.toppings.map(t => `${t.ten_Topping} (+${t.gia_Topping.toLocaleString('vi-VN')} đ)`).join(', ')}<br>` : ''}
                            ${item.ghi_Chu ? `Ghi chú: ${item.ghi_Chu}` : ''}
                            ${item.khuyen_Mai && item.khuyen_Mai.ten_Khuyen_Mai ? `<br>Khuyến mãi: ${item.khuyen_Mai.ten_Khuyen_Mai} (Giảm ${(item.gia_Goc - item.gia_Hien_Thi).toLocaleString('vi-VN')} đ)` : ''}
                        </div>
                        <div class="cart-item-price">
                            ${item.khuyen_Mai && item.khuyen_Mai.ten_Khuyen_Mai ?
                                `<span class="original-price">${(item.gia_Goc + toppingTotal + sizePrice).toLocaleString('vi-VN')} đ</span>
                                 <span class="discounted-price">${(item.gia_Hien_Thi + toppingTotal + sizePrice).toLocaleString('vi-VN')} đ</span>` :
                                `<span class="regular-price">${(item.gia_Goc + toppingTotal + sizePrice).toLocaleString('vi-VN')} đ</span>`}
                        </div>
                    </div>
                    <div class="cart-item-controls">
                        <span class="quantity">x${item.so_Luong > 0 ? item.so_Luong : 'N/A'}</span>
                    </div>
                `;
                cartItemsContainer.appendChild(cartItem);
            });
            document.getElementById('selectedItems').value = encodeURIComponent(JSON.stringify(selectedItems));
            await calculateShippingFee();
            updateSubmitButtonState();
        }

        // Khởi tạo giỏ hàng
        try {
            const guestCart = getCookie('guestCart') || [];
            const selectedCartItems = getCookie('selectedCartItems') || [];
            selectedItems = guestCart.filter(item => selectedCartItems.some(selected => selected.iD_GioHang_ChiTiet === item.iD_GioHang_ChiTiet));
            console.log('Selected Items from guestCart:', selectedItems);
            Promise.all([fetchSizes(), fetchPaymentMethods()]).then(() => {
                renderCartItems();
                populateDistricts();
            });
        } catch (e) {
            console.error('Error parsing guestCart:', e);
            showAlert('Lỗi khi xử lý dữ liệu giỏ hàng. Vui lòng thử lại.', 'error');
            selectedItems = [];
            document.getElementById('cartItemsContainer').innerHTML = '<p class="cart-empty text-gray-500">Không có sản phẩm nào được chọn để thanh toán. Vui lòng kiểm tra lại.</p>';
            document.getElementById('cartSubTotal').textContent = '0 đ';
            document.getElementById('shippingFee').textContent = '0 đ';
            document.getElementById('cartTotal').textContent = '0 đ';
            document.getElementById('selectedItems').value = '';
        }

        // Hàm gộp địa chỉ
        function combineAddress() {
            const districtSelect = document.getElementById('add_District');
            const wardSelect = document.getElementById('add_Ward');
            const districtName = districtSelect.options[districtSelect.selectedIndex]?.text || '';
            const wardName = wardSelect.options[wardSelect.selectedIndex]?.text || '';
            const detail = document.getElementById('add_Ghi_Chu').value.trim();
            if (districtName && wardName && detail) {
                document.getElementById('add_Dia_Chi').value = `Hà Nội, ${wardName}, ${districtName}, ${detail}`;
            }
        }

        // Hàm xóa cookie giỏ hàng
        function clearCartCookie() {
            document.cookie = 'guestCart=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
            document.cookie = 'selectedCartItems=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
            console.log('Cookies giỏ hàng đã được xóa');
        }

        // Hàm cập nhật giỏ hàng sau thanh toán
        function updateGuestCart(cartItemIds) {
            const guestCart = getCookie('guestCart') || [];
            const updatedCart = guestCart.filter(item => !cartItemIds.includes(item.iD_GioHang_ChiTiet));
            document.cookie = 'guestCart=' + encodeURIComponent(JSON.stringify(updatedCart)) + '; path=/; expires=' + new Date(Date.now() + 24 * 60 * 60 * 1000).toUTCString();
            document.cookie = 'selectedCartItems=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
        }

        // Hàm cập nhật trạng thái nút submit
        function updateSubmitButtonState() {
            const paymentSelected = document.querySelector('input[name="selectedPaymentMethod"]:checked');
            const fullName = document.getElementById('fullName').value.trim();
            const phoneNumber = document.getElementById('phoneNumber').value;
            const emailInput = document.getElementById('email');
            const district = document.getElementById('add_District').value;
            const ward = document.getElementById('add_Ward').value;
            const addressDetail = document.getElementById('add_Ghi_Chu').value.trim();
            const submitBtn = document.getElementById('submitBtn');
            const vnPhonePattern = /^(03|05|07|08|09)[0-9]{8}$/;
            const isValidPhone = vnPhonePattern.test(phoneNumber);
            const isValidEmail = emailInput.checkValidity(); // Tích hợp kiểm tra email validity

            submitBtn.disabled = !(fullName && isValidPhone && isValidEmail && paymentSelected && district && ward && addressDetail && selectedItems.length > 0);
        }

        // Hàm hiển thị loading
        function showLoading() {
            document.getElementById('loadingOverlay').classList.add('show');
        }

        // Hàm ẩn loading
        function hideLoading() {
            document.getElementById('loadingOverlay').classList.remove('show');
        }

        // Hàm hiển thị thông báo
        function showAlert(message, type) {
            const notification = document.getElementById(type === 'success' ? 'successNotification' : 'errorNotification');
            const messageElement = document.getElementById(type === 'success' ? 'successMessage' : 'errorMessage');
            messageElement.textContent = message;
            notification.style.display = 'flex';
            setTimeout(() => {
                notification.style.display = 'none';
            }, 3000);
        }

        // Hàm hiển thị dialog thành công
        function showOrderSuccessDialog(maHoaDon) {
            const dialog = document.getElementById('orderSuccessDialog');
            const messageElement = document.getElementById('orderSuccessMessage');
            messageElement.textContent = `Đơn hàng của bạn có Mã hóa đơn là: ${maHoaDon}. Hãy lưu lại mã để tra cứu, theo dõi đơn hàng của bạn.`;
            dialog.style.display = 'block';
        }

        // Hàm validate và xử lý thanh toán
        async function validateForm(event) {
            event.preventDefault();
            const paymentSelected = document.querySelector('input[name="selectedPaymentMethod"]:checked');
            const fullName = document.getElementById('fullName').value.trim();
            const phoneNumber = document.getElementById('phoneNumber').value;
            const emailInput = document.getElementById('email');
            const email = emailInput.value.trim();
            const district = document.getElementById('add_District').value;
            const ward = document.getElementById('add_Ward').value;
            const addressDetail = document.getElementById('add_Ghi_Chu').value.trim();
            const ghiChuKhachHang = document.getElementById('add_Ghi_Chu_KhachHang').value.trim();
            const paymentError = document.getElementById('paymentError');
            const fullNameError = document.getElementById('fullNameError');
            const phoneError = document.getElementById('phoneError');
            const emailError = document.getElementById('emailError');
            const addressError = document.getElementById('addressError');
            const submitBtn = document.getElementById('submitBtn');
            const vnPhonePattern = /^(03|05|07|08|09)[0-9]{8}$/;
            const isValidPhone = vnPhonePattern.test(phoneNumber);
            const isValidEmail = emailInput.checkValidity();

            paymentError.style.display = paymentSelected ? 'none' : 'block';
            fullNameError.style.display = fullName ? 'none' : 'block';
            phoneError.style.display = isValidPhone ? 'none' : 'block';
            emailError.style.display = isValidEmail ? 'none' : 'block';
            addressError.style.display = (district && ward && addressDetail) ? 'none' : 'block';

            if (!fullName || !isValidPhone || !isValidEmail || !email || !paymentSelected || !district || !ward || !addressDetail) {
                showAlert('Vui lòng nhập đầy đủ thông tin họ tên, số điện thoại, email hợp lệ, địa chỉ và chọn phương thức thanh toán!', 'error');
                return false;
            }
            if (!selectedItems.length) {
                showAlert('Không có sản phẩm nào được chọn để thanh toán!', 'error');
                return false;
            }

            submitBtn.classList.add('loading');
            submitBtn.disabled = true;
            showLoading();
            combineAddress();

            const isVNPAY = parseInt(paymentSelected.value) === 5;
            const checkoutData = {
                iD_Khach_Hang: null,
                iD_Hinh_Thuc_Thanh_Toan: paymentSelected ? parseInt(paymentSelected.value) : 0,
                dia_Chi_Tu_Nhap: document.getElementById('add_Dia_Chi').value,
                iD_Voucher: null,
                tong_Tien: cartSubTotal, // Tổng tiền hàng (không bao gồm phí ship)
                phi_Ship: shippingFee, // Phí vận chuyển
                ghi_Chu: `Họ và Tên: ${fullName}, Số Điện Thoại: ${phoneNumber}, Email: ${email}${ghiChuKhachHang ? `, Ghi chú khách hàng: ${ghiChuKhachHang}` : ''}`,
                ma_Hoa_Don: 'HDCK' + new Date().getTime(),
                hoaDonChiTiets: selectedItems.map(item => {
                    const toppingTotal = item.toppings?.reduce((sum, t) => sum + (t.gia_Topping || 0), 0) || 0;
                    const sizePrice = getSizePrice(item.iD_Size);
                    const basePrice = item.khuyen_Mai && item.khuyen_Mai.ten_Khuyen_Mai ? item.gia_Hien_Thi : item.gia_Goc;
                    const itemTotal = (basePrice + toppingTotal + sizePrice) * item.so_Luong;
                    return {
                        iD_San_Pham: item.iD_San_Pham || 0,
                        ten_San_Pham: item.ten_San_Pham || '',
                        gia_Hien_Thi: item.gia_Hien_Thi || 0,
                        gia_Goc: item.gia_Goc || 0,
                        so_Luong: item.so_Luong || 0,
                        ten_Size: item.ten_Size || '',
                        ten_LuongDa: item.ten_LuongDa || '',
                        ten_DoNgot: item.ten_DoNgot || '',
                        ghi_Chu: item.ghi_Chu || '',
                        iD_Size: item.iD_Size || 0,
                        iD_SanPham_DoNgot: item.iD_SanPham_DoNgot || 0,
                        iD_LuongDa: item.iD_LuongDa || 0,
                        ma_HoaDon_ChiTiet: 'HDC' + item.iD_GioHang_ChiTiet,
                        gia_Them_Size: sizePrice,
                        gia_San_Pham: basePrice + toppingTotal + sizePrice,
                        tong_Tien: itemTotal,
                        hoaDonChiTietToppings: item.toppings?.map(t => ({
                            iD_Topping: t.iD_Topping || 0,
                            ten_Topping: t.ten_Topping || '',
                            so_Luong: 1,
                            gia_Topping: t.gia_Topping || 0
                        })) || []
                    };
                })
            };

            console.log('Checkout Data:', JSON.stringify(checkoutData, null, 2));

            try {
                // Gửi yêu cầu checkout
                const response = await fetch('https://localhost:7169/api/BanHangCK/checkout', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(checkoutData)
                });

                if (!response.ok) {
                    let errorMessage = 'Không xác định';
                    try {
                        const errorData = await response.json();
                        errorMessage = errorData.message || errorMessage;
                    } catch (err) {
                        console.error('Error parsing error response:', err);
                    }
                    showAlert(`Lỗi khi gửi yêu cầu thanh toán: ${errorMessage}`, 'error');
                    hideLoading();
                    submitBtn.classList.remove('loading');
                    submitBtn.disabled = false;
                    return false;
                }

                const result = await response.json();
                console.log('Checkout API Response:', result);

                const cartItemIds = selectedItems.map(item => item.iD_GioHang_ChiTiet);

                // Xử lý thanh toán VNPAY
                if (isVNPAY) {
                    const paymentData = {
                        orderId: checkoutData.ma_Hoa_Don,
                        orderType: 'drink_order',
                        amount: cartTotal, // Tổng cộng (tổng tiền hàng + phí ship)
                        orderDescription: `Thanh toan don hang ${checkoutData.ma_Hoa_Don}`,
                        name: fullName
                    };
                    console.log('VNPAY Payment Data:', JSON.stringify(paymentData, null, 2));

                    try {
                        const paymentResponse = await fetch('https://localhost:7169/api/Payment/create', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(paymentData)
                        });

                        if (!paymentResponse.ok) {
                            let paymentErrorMessage = 'Không xác định';
                            try {
                                const paymentErrorData = await paymentResponse.json();
                                paymentErrorMessage = paymentErrorData.message || paymentErrorMessage;
                            } catch (err) {
                                console.error('Error parsing payment error response:', err);
                            }
                            throw new Error(`HTTP error! Status: ${paymentResponse.status}, Message: ${paymentErrorMessage}`);
                        }

                        const paymentResult = await paymentResponse.json();
                        console.log('VNPAY Payment Response:', paymentResult);

                        if (paymentResult.paymentUrl) {
                            window.open(paymentResult.paymentUrl, '_blank');
                            updateGuestCart(cartItemIds);
                            selectedItems = [];
                            await renderCartItems();
                            showOrderSuccessDialog(checkoutData.ma_Hoa_Don);
                        } else {
                            showAlert('Không nhận được URL thanh toán từ VNPAY.', 'error');
                            hideLoading();
                            submitBtn.classList.remove('loading');
                            submitBtn.disabled = false;
                            return false;
                        }
                    } catch (e) {
                        console.error('Error creating VNPAY payment:', e);
                        showAlert(`Lỗi khi tạo yêu cầu thanh toán VNPAY: ${e.message}`, 'error');
                        hideLoading();
                        submitBtn.classList.remove('loading');
                        submitBtn.disabled = false;
                        return false;
                    }
                } else {
                    // Thanh toán khi nhận hàng
                    updateGuestCart(cartItemIds);
                    selectedItems = [];
                    await renderCartItems();
                    showOrderSuccessDialog(checkoutData.ma_Hoa_Don);
                }

                hideLoading();
                submitBtn.classList.remove('loading');
                submitBtn.disabled = false;
                return false;
            } catch (e) {
                console.error('Error sending checkout request:', e);
                showAlert(`Lỗi khi gửi yêu cầu thanh toán: ${e.message}`, 'error');
                hideLoading();
                submitBtn.classList.remove('loading');
                submitBtn.disabled = false;
                return false;
            }
        }

        // Gắn sự kiện input để cập nhật trạng thái nút submit
        document.getElementById('fullName').addEventListener('input', updateSubmitButtonState);
        document.getElementById('phoneNumber').addEventListener('input', updateSubmitButtonState);
        document.getElementById('email').addEventListener('input', updateSubmitButtonState);
        document.getElementById('add_District').addEventListener('change', updateSubmitButtonState);
        document.getElementById('add_Ward').addEventListener('change', updateSubmitButtonState);
        document.getElementById('add_Ghi_Chu').addEventListener('input', updateSubmitButtonState);
    </script>
</div> *@
















@{
    ViewData["Title"] = "Thanh Toán";
}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css">
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
<style>
    /* Giữ nguyên style gốc từ code của bạn */
    :root {
        --primary: #3B82F6;
        --primary-dark: #2563EB;
        --secondary: #F59E0B;
        --light-bg: #F8FAFC;
        --card-bg: #FFFFFF;
        --text-primary: #1F2937;
        --text-secondary: #6B7280;
        --success: #10B981;
        --danger: #EF4444;
    }

    body {
        font-family: 'Roboto', sans-serif;
        background-color: var(--light-bg);
        color: var(--text-primary);
        margin: 0;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
    }

    .error-message {
        color: var(--danger);
        font-size: 0.75rem;
        margin-top: 0.5rem;
        display: none;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .cart-item {
        display: flex;
        align-items: flex-start;
        padding: 1.25rem;
        border-bottom: 1px solid #E5E7EB;
        transition: background-color 0.2s ease;
    }

        .cart-item:hover {
            background-color: #F9FAFB;
        }

    .cart-item-details {
        flex: 1;
    }

    .cart-item-name {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--text-primary);
    }

    .cart-item-options {
        font-size: 0.9rem;
        color: var(--text-secondary);
        margin-top: 0.75rem;
    }

    .cart-item-price {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--primary);
    }

    .cart-total {
        font-weight: 700;
        font-size: 1.3rem;
        color: var(--text-primary);
        margin-top: 2rem;
        text-align: right;
    }

    .original-price {
        text-decoration: line-through;
        color: var(--text-secondary);
        font-size: 0.95rem;
        margin-right: 0.5rem;
    }

    .discounted-price {
        color: var(--danger);
        font-weight: 600;
        font-size: 1.1rem;
    }

    .regular-price {
        color: var(--primary);
        font-weight: 600;
        font-size: 1.1rem;
    }

    .cart-item-controls {
        display: flex;
        align-items: center;
        justify-content: flex-end;
        min-width: 70px;
        font-size: 0.95rem;
        font-weight: 500;
        color: var(--text-primary);
    }

        .cart-item-controls .quantity {
            margin-left: 0.75rem;
            font-weight: 600;
        }

    .form-group label {
        font-size: 0.95rem;
        font-weight: 500;
        color: var(--text-primary);
        margin-bottom: 0.75rem;
        display: block;
    }

    .form-group input[type="radio"] {
        margin-right: 0.75rem;
    }

        .form-group input[type="radio"]:checked + .radio-label {
            background-color: #EFF6FF;
            border-color: var(--primary);
            color: var(--primary);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
            font-weight: 700;
            border-width: 2px;
        }

    .submit-btn {
        background: linear-gradient(135deg, var(--primary), var(--primary-dark));
        color: white;
        padding: 0.85rem 1.75rem;
        border-radius: 10px;
        border: none;
        font-size: 0.95rem;
        font-weight: 500;
        transition: all 0.2s ease;
        position: relative;
        width: 100%;
    }

        .submit-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(59, 130, 246, 0.3);
        }

        .submit-btn:disabled {
            background: #A1A1AA;
            cursor: not-allowed;
        }

        .submit-btn.loading::after {
            content: '';
            display: inline-block;
            border: 3px solid #ffffff;
            border-top: 3px solid var(--primary);
            border-radius: 50%;
            width: 18px;
            height: 18px;
            animation: spin 1s linear infinite;
            position: absolute;
            right: 1.25rem;
            top: 50%;
            transform: translateY(-50%);
        }

    .alert-notification {
        border-radius: 10px;
        padding: 1rem 1.5rem;
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        animation: slideIn 0.4s ease-out;
    }

    .alert-error {
        background-color: #FEF2F2;
        color: #991B1B;
        border-left: 4px solid var(--danger);
    }

    .alert-success {
        background-color: #ECFDF5;
        color: #065F46;
        border-left: 4px solid var(--success);
    }

    .success-dialog {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: #FFFFFF;
        border-radius: 14px;
        padding: 2rem;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
        z-index: 10000;
        max-width: 400px;
        width: 90%;
        text-align: center;
        animation: bounceIn 0.5s ease-out;
    }

        .success-dialog button {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 10px;
            border: none;
            font-size: 0.95rem;
            font-weight: 500;
            transition: all 0.2s ease;
            margin-top: 1.5rem;
        }

            .success-dialog button:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 12px rgba(59, 130, 246, 0.3);
            }

    .close-button {
        background: none;
        border: none;
        font-size: 1.3rem;
        color: var(--text-secondary);
        transition: all 0.2s ease;
        width: 36px;
        height: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
    }

        .close-button:hover {
            background-color: #F3F4F6;
            color: var(--text-primary);
        }

    select, input[type="text"], input[type="tel"], input[type="email"] {
        width: 100%;
        padding: 0.85rem;
        border: 1px solid #E5E7EB;
        border-radius: 10px;
        font-size: 0.95rem;
    }

    #add_Ghi_Chu, #add_Ghi_Chu_KhachHang, #email {
        border: 2px solid #D1D5DB;
        transition: border-color 0.2s ease;
    }

        #add_Ghi_Chu:focus, #add_Ghi_Chu_KhachHang:focus, #email:focus {
            border-color: var(--primary);
        }

    select:focus, input:focus {
        outline: none;
        border-color: var(--primary);
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.25);
    }

    select:disabled {
        background-color: #F3F4F6;
        cursor: not-allowed;
    }

    .section-container {
        background: var(--card-bg);
        border-radius: 14px;
        padding: 2rem;
        box-shadow: 0 6px 10px rgba(0, 0, 0, 0.08);
        margin-bottom: 2rem;
    }

    .radio-label {
        display: block;
        padding: 1rem;
        border: 1px solid #E5E7EB;
        border-radius: 10px;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .radio-label:hover {
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.15);
        }

    .loading-spinner {
        display: none;
        border: 5px solid #f3f3f3;
        border-top: 5px solid var(--primary);
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin: 2.5rem auto;
    }

    #cartItemsContainer {
        max-height: 550px;
        overflow-y: auto;
        scrollbar-width: thin;
        scrollbar-color: var(--primary) #f1f1f1;
    }

        #cartItemsContainer::-webkit-scrollbar {
            width: 8px;
        }

        #cartItemsContainer::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        #cartItemsContainer::-webkit-scrollbar-thumb {
            background: var(--primary);
            border-radius: 4px;
        }

    keyframes spin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }

    keyframes slideIn {
        from

    {
        transform: translateY(-20px);
        opacity: 0;
    }

    to {
        transform: translateY(0);
        opacity: 1;
    }

    }

    keyframes fadeIn {
        from

    {
        opacity: 0;
    }

    to {
        opacity: 1;
    }

    }

    keyframes bounceIn {
        0%

    {
        transform: scale(0.3);
        opacity: 0;
    }

    50% {
        transform: scale(1.05);
    }

    70% {
        transform: scale(0.9);
    }

    100% {
        transform: scale(1);
        opacity: 1;
    }

    }

    .footer {
        background: linear-gradient(135deg, #1F2937 0%, #111827 100%);
        color: white;
        padding: 3rem 1rem;
        width: 100vw;
        margin-left: calc(-50vw + 50%);
        flex-shrink: 0;
        margin-top: auto;
    }

    .footer-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 1.5rem;
    }

    .footer-section {
        margin-bottom: 2.5rem;
    }

    .footer-title {
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 1.25rem;
        color: var(--secondary);
    }

    .footer-link {
        display: block;
        color: #D1D5DB;
        text-decoration: none;
        font-size: 0.95rem;
        transition: color 0.2s ease;
        margin-bottom: 0.75rem;
    }

        .footer-link:hover {
            color: var(--primary);
        }

    .footer-social {
        display: flex;
        gap: 1.25rem;
    }

    .social-icon {
        width: 44px;
        height: 44px;
        background: var(--primary);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        text-decoration: none;
        transition: background 0.2s ease;
    }

        .social-icon:hover {
            background: var(--primary-dark);
        }

    .footer-bottom {
        border-top: 1px solid #374151;
        padding-top: 2rem;
        text-align: center;
        color: #9CA3AF;
        font-size: 0.9rem;
    }

    media (max-width: 768px) {
        .footer

    {
        padding: 2rem 1rem;
    }

    .footer-social {
        justify-content: center;
    }

    .grid-cols-1.lg\:grid-cols-2 {
        grid-template-columns: 1fr;
    }

    }

    media (max-width: 480px) {
        .cart-item

    {
        flex-direction: column;
        align-items: flex-start;
    }

    .cart-item-controls {
        width: 100%;
        justify-content: flex-start;
    }

    }

    #loadingOverlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.6);
        z-index: 9999;
        backdrop-filter: blur(4px);
    }

        #loadingOverlay.show {
            display: flex;
            align-items: center;
            justify-content: center;
            animation: fadeIn 0.3s ease-out;
        }

        #loadingOverlay .loading-content {
            background: linear-gradient(135deg, #FFFFFF 0%, #F0F9FF 100%);
            padding: 2.5rem;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
            text-align: center;
            max-width: 300px;
            animation: bounceIn 0.5s ease-out;
        }

        #loadingOverlay .loading-spinner {
            display: block !important;
            margin: 0 auto 1.5rem;
            width: 50px;
            height: 50px;
            border-width: 4px;
        }

        #loadingOverlay p {
            font-size: 1.1rem;
            font-weight: 500;
            color: var(--text-primary);
            margin: 0;
        }
</style>
<div class="container mx-auto py-10 px-4 sm:px-6 lg:px-8 max-w-7xl">
    <h2 class="text-3xl font-bold text-gray-800 mb-8">Thanh Toán</h2>
    <div id="errorNotification" class="alert-notification alert-error animate__animated animate__fadeInDown" style="display: none;">
        <i class="bi bi-exclamation-circle-fill mr-2 text-lg"></i>
        <div class="flex-1" id="errorMessage"></div>
        <button type="button" class="close-button" onclick="this.parentElement.style.display='none'">
            <i class="bi bi-x"></i>
        </button>
    </div>
    <div id="successNotification" class="alert-notification alert-success animate__animated animate__fadeInDown" style="display: none;">
        <i class="bi bi-check-circle-fill mr-2 text-lg"></i>
        <div class="flex-1" id="successMessage"></div>
        <button type="button" class="close-button" onclick="this.parentElement.style.display='none'">
            <i class="bi bi-x"></i>
        </button>
    </div>
    <div id="orderSuccessDialog" class="success-dialog" style="display: none;">
        <p id="orderSuccessMessage"></p>
        <button onclick="window.location.href='/tracuu'">Tra cứu đơn hàng</button>
    </div>
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <!-- Left: Cart Items -->
        <div class="section-container">
            <h3 class="text-xl font-bold text-gray-800 mb-4">Giỏ Hàng</h3>
            <div id="cartItems">
                <div id="cartItemsContainer"></div>
                <div class="cart-total">
                    Tổng tiền hàng: <span id="cartSubTotal">0 đ</span><br>
                    Phí vận chuyển: <span id="shippingFee">0 đ</span><br>
                    Tổng cộng: <span id="cartTotal">0 đ</span>
                </div>
            </div>
        </div>
        <!-- Right: Checkout Form -->
        <div>
            <div class="section-container">
                <form id="checkoutForm" onsubmit="return validateForm(event)">
                    <input type="hidden" name="selectedItems" id="selectedItems" />
                    <h4 class="text-lg font-semibold text-gray-800 mb-3">Thông Tin Người Nhận</h4>
                    <div class="form-group">
                        <label for="fullName">Họ và Tên:</label>
                        <input id="fullName" name="FullName" type="text" class="w-full" required />
                        <span id="fullNameError" class="error-message">Vui lòng nhập họ và tên.</span>
                    </div>
                    <div class="form-group">
                        <label for="phoneNumber">Số Điện Thoại:</label>
                        <input id="phoneNumber" name="PhoneNumber" type="tel" class="w-full" required pattern="^(03|05|07|08|09)[0-9]{8}$" title="Số điện thoại phải là 10 chữ số và bắt đầu bằng 03, 05, 07, 08, hoặc 09" oninput="validatePhoneNumber(this)" />
                        <span id="phoneError" class="error-message">Số điện thoại phải là 10 chữ số và bắt đầu bằng 03, 05, 07, 08, hoặc 09.</span>
                    </div>
                    <div class="form-group">
                        <label for="email">Email:</label>
                        <input id="email" name="Email" type="email" class="w-full" required oninput="validateEmail(this)" />
                        <span id="emailError" class="error-message">Email không hợp lệ.</span>
                    </div>
                    <h4 class="text-lg font-semibold text-gray-800 mb-3">Địa Chỉ Nhận Hàng</h4>
                    <p class="text-red-500 text-sm mb-2">Xin lỗi, hiện cửa hàng chỉ có chi nhánh tại Hà Nội.</p>
                    <div class="form-group">
                        <label for="add_District">Quận/Huyện:</label>
                        <select id="add_District" name="District" class="w-full" onchange="updateAddWards()" required>
                            <option value="">Chọn Quận/Huyện</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="add_Ward">Phường/Xã:</label>
                        <select id="add_Ward" name="Ward" class="w-full" onchange="calculateShippingFee()" required>
                            <option value="">Chọn Phường/Xã</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="add_Tinh_Thanh">Tỉnh/Thành:</label>
                        <input id="add_Tinh_Thanh" name="Tinh_Thanh" class="w-full" value="Hà Nội" readonly />
                    </div>
                    <div class="form-group">
                        <label for="add_Ghi_Chu">Địa chỉ chi tiết (Bắt buộc):</label>
                        <input id="add_Ghi_Chu" name="Ghi_Chu" class="w-full" required />
                    </div>
                    <div class="form-group">
                        <label for="add_Ghi_Chu_KhachHang">Ghi Chú Khách Hàng:</label>
                        <input id="add_Ghi_Chu_KhachHang" name="Ghi_Chu_KhachHang" class="w-full" />
                    </div>
                    <input type="hidden" id="add_Dia_Chi" name="Dia_Chi" />
                    <span id="addressError" class="error-message">Vui lòng nhập đầy đủ thông tin địa chỉ.</span>
                    <h4 class="text-lg font-semibold text-gray-800 mb-3">Phương Thức Thanh Toán</h4>
                    <div id="paymentMethods" class="mb-6"></div>
                    <span id="paymentError" class="error-message">Vui lòng chọn một phương thức thanh toán.</span>
                    <button type="submit" id="submitBtn" class="submit-btn mt-6" disabled><i class="bi bi-check-circle mr-2"></i>Xác Nhận Thanh Toán</button>
                </form>
            </div>
        </div>
    </div>
    <!-- Loading Overlay -->
    <div id="loadingOverlay">
        <div class="loading-content animate__animated">
            <div class="loading-spinner"></div>
            <p>Đang xử lý thanh toán...</p>
        </div>
    </div>
    <footer class="footer">
        <div class="footer-container">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div class="footer-section">
                    <h3 class="footer-title">TheBoy Trà Sữa</h3>
                    <p class="text-sm text-gray-300 mb-4">Cửa hàng trà sữa tươi ngon, nguyên liệu chất lượng cao. Mang đến những ly trà sữa thơm ngon, đậm đà hương vị Việt Nam.</p>
                    <div class="flex items-center gap-4">
                        <i class="bi bi-geo-alt text-primary text-lg"></i>
                        <span class="text-sm">123 Đường ABC, Quận 1, TP. HCM</span>
                    </div>
                    <div class="flex items-center gap-4 mt-2">
                        <i class="bi bi-telephone text-primary text-lg"></i>
                        <span class="text-sm">+84 123 456 789</span>
                    </div>
                    <div class="flex items-center gap-4 mt-2">
                        <i class="bi bi-envelope text-primary text-lg"></i>
                        <span class="text-sm">theboy@trasua.vn</span>
                    </div>
                </div>
                <div class="footer-section">
                    <h3 class="footer-title">Menu</h3>
                    <a href="/" class="footer-link">Trang chủ</a>
                    <a href="/SanPham" class="footer-link">Sản phẩm</a>
                    <a href="/GioiThieu" class="footer-link">Giới thiệu</a>
                    <a href="/LienHe" class="footer-link">Liên hệ</a>
                    <a href="/KhuyenMai" class="footer-link">Khuyến mãi</a>
                </div>
                <div class="footer-section">
                    <h3 class="footer-title">Dịch vụ</h3>
                    <a href="/GiaoHang" class="footer-link">Giao hàng</a>
                    <a href="/ThanhToan" class="footer-link">Thanh toán</a>
                    <a href="/ChinhSach" class="footer-link">Chính sách</a>
                    <a href="/HoiDap" class="footer-link">Hỏi đáp</a>
                </div>
                <div class="footer-section">
                    <h3 class="footer-title">Theo dõi chúng tôi</h3>
                    <div class="footer-social">
                        <a href="https://facebook.com/theboytrasua" class="social-icon" target="_blank" rel="noopener">
                            <i class="bi bi-facebook"></i>
                        </a>
                        <a href="https://instagram.com/theboytrasua" class="social-icon" target="_blank" rel="noopener">
                            <i class="bi bi-instagram"></i>
                        </a>
                        <a href="https://tiktok.com/theboytrasua" class="social-icon" target="_blank" rel="noopener">
                            <i class="bi bi-tiktok"></i>
                        </a>
                        <a href="https://zalo.me/theboytrasua" class="social-icon" target="_blank" rel="noopener">
                            <i class="bi bi-chat-dots"></i>
                        </a>
                    </div>
                    <p class="text-sm text-gray-300 mt-4">Nhận ưu đãi đặc biệt qua app!</p>
                </div>
            </div>
            <div class="footer-bottom">
                <p>&copy; 2025 TheBoy Trà Sữa. Tất cả quyền được bảo lưu. | Thiết kế bởi xAI</p>
            </div>
        </div>
    </footer>
    <script src="/js/validateEmail.js"></script> <!-- Tích hợp file validateEmail.js -->
    <script>
        let selectedItems = [];
        let cartSubTotal = 0;
        let shippingFee = 0;
        let cartTotal = 0;
        let sizes = [];
        let selectedDistrictId = null;
        let selectedWardCode = null;

        // Hàm lấy dữ liệu kích thước từ API
        async function fetchSizes() {
            try {
                const response = await fetch('https://localhost:7169/api/Size', { method: 'GET' });
                if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                sizes = await response.json();
                console.log('Sizes from API:', sizes);
            } catch (e) {
                console.error('Error fetching sizes:', e);
                showAlert('Lỗi khi lấy dữ liệu kích thước. Vui lòng thử lại.', 'error');
                sizes = [];
            }
        }

        // Hàm lấy phương thức thanh toán từ API
        async function fetchPaymentMethods() {
            try {
                const response = await fetch('https://localhost:7169/api/BanHangTK/hinhthucthanhtoan', { method: 'GET' });
                if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                const paymentMethods = await response.json();
                const paymentMethodsContainer = document.getElementById('paymentMethods');
                paymentMethodsContainer.innerHTML = '';
                const allowedIds = [4, 5]; // Thanh toán khi nhận hàng (4) và VNPAY (5)
                const iconMap = { 4: 'bi-truck', 5: 'bi-wallet2' };
                const nameMap = { 4: 'Thanh toán khi nhận hàng', 5: 'Thanh toán VNPAY' };
                paymentMethods
                    .filter(method => allowedIds.includes(method.iD_Hinh_Thuc_Thanh_Toan) && method.trang_Thai)
                    .forEach(method => {
                        const div = document.createElement('div');
                        div.className = 'form-group';
                        div.innerHTML = `
                            <input type="radio" id="payment_${method.iD_Hinh_Thuc_Thanh_Toan}" name="selectedPaymentMethod" value="${method.iD_Hinh_Thuc_Thanh_Toan}" class="sr-only" required />
                            <label for="payment_${method.iD_Hinh_Thuc_Thanh_Toan}" class="radio-label flex items-center gap-2">
                                <i class="bi ${iconMap[method.iD_Hinh_Thuc_Thanh_Toan]} text-primary text-lg"></i>
                                <span>${nameMap[method.iD_Hinh_Thuc_Thanh_Toan]}</span>
                                ${method.cong_Thanh_Toan ? `<span class="text-sm text-gray-500">(${method.cong_Thanh_Toan})</span>` : ''}
                            </label>
                        `;
                        paymentMethodsContainer.appendChild(div);
                    });
                if (paymentMethodsContainer.children.length === 0) {
                    paymentMethodsContainer.innerHTML = '<p class="text-gray-500">Không có phương thức thanh toán nào khả dụng.</p>';
                }
                document.querySelectorAll('input[name="selectedPaymentMethod"]').forEach(input => {
                    input.addEventListener('change', updateSubmitButtonState);
                });
            } catch (e) {
                console.error('Error fetching payment methods:', e);
                showAlert('Lỗi khi lấy phương thức thanh toán. Vui lòng thử lại.', 'error');
                document.getElementById('paymentMethods').innerHTML = '<p class="text-gray-500">Không có phương thức thanh toán nào khả dụng.</p>';
            }
        }

        // Hàm lấy giá kích thước
        function getSizePrice(idSize) {
            const size = sizes.find(s => s.iD_Size === idSize);
            return size ? size.gia : 0;
        }

        // Hàm lấy cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const cookies = document.cookie.split(';');
            for (let cookie of cookies) {
                cookie = cookie.trim();
                if (cookie.startsWith(nameEQ)) {
                    try {
                        return JSON.parse(decodeURIComponent(cookie.substring(nameEQ.length)));
                    } catch (e) {
                        console.error(`Error parsing cookie ${name}:`, e);
                        return null;
                    }
                }
            }
            return null;
        }

        // Hàm validate số điện thoại
        function validatePhoneNumber(input) {
            const errorElement = document.getElementById('phoneError');
            const value = input.value;
            const vnPhonePattern = /^(03|05|07|08|09)[0-9]{8}$/;
            if (!vnPhonePattern.test(value)) {
                errorElement.style.display = 'block';
                input.setCustomValidity('Số điện thoại không hợp lệ');
            } else {
                errorElement.style.display = 'none';
                input.setCustomValidity('');
            }
            updateSubmitButtonState();
        }

        // Hàm lấy danh sách quận/huyện
        async function populateDistricts() {
            const districtSelect = document.getElementById('add_District');
            districtSelect.innerHTML = '<option value="">Chọn Quận/Huyện</option>';
            try {
                const response = await fetch('https://localhost:7169/api/Shipping/districts/201', { method: 'GET' });
                if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                const result = await response.json();
                if (result.code === 200 && result.data) {
                    result.data.forEach(district => {
                        const option = document.createElement('option');
                        option.value = district.DistrictID;
                        option.textContent = district.DistrictName;
                        districtSelect.appendChild(option);
                    });
                } else {
                    throw new Error('Không lấy được danh sách quận/huyện');
                }
            } catch (e) {
                console.error('Error fetching districts:', e);
                showAlert('Lỗi khi lấy danh sách quận/huyện. Vui lòng thử lại.', 'error');
            }
        }

        // Hàm cập nhật danh sách phường/xã
        async function updateAddWards() {
            const districtSelect = document.getElementById('add_District');
            const wardSelect = document.getElementById('add_Ward');
            selectedDistrictId = districtSelect.value;
            wardSelect.innerHTML = '<option value="">Chọn Phường/Xã</option>';
            if (selectedDistrictId) {
                try {
                    const response = await fetch(`https://localhost:7169/api/Shipping/wards/${selectedDistrictId}`, { method: 'GET' });
                    if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                    const result = await response.json();
                    if (result.code === 200 && result.data) {
                        result.data.forEach(ward => {
                            const option = document.createElement('option');
                            option.value = ward.WardCode;
                            option.textContent = ward.WardName;
                            wardSelect.appendChild(option);
                        });
                    } else {
                        throw new Error('Không lấy được danh sách phường/xã');
                    }
                } catch (e) {
                    console.error('Error fetching wards:', e);
                    showAlert('Lỗi khi lấy danh sách phường/xã. Vui lòng thử lại.', 'error');
                }
            } else {
                selectedDistrictId = null;
                selectedWardCode = null;
                shippingFee = 0;
                updateCartTotal();
            }
            updateSubmitButtonState();
        }

        // Hàm tính phí vận chuyển
        async function calculateShippingFee() {
            const wardSelect = document.getElementById('add_Ward');
            selectedWardCode = wardSelect.value;
            if (selectedDistrictId && selectedWardCode && cartSubTotal > 0) {
                const payload = {
                    FromDistrictId: 1482,
                    ToDistrictId: parseInt(selectedDistrictId),
                    ToWardCode: selectedWardCode,
                    Weight: 1000,
                    Length: 20,
                    Width: 15,
                    Height: 15,
                    InsuranceValue: cartSubTotal
                };
                try {
                    const response = await fetch('https://localhost:7169/api/Shipping/calculate', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });
                    if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                    const result = await response.json();
                    if (result.code === 200 && result.data) {
                        shippingFee = result.data.service_fee;
                    } else {
                        throw new Error('Không tính được phí ship');
                    }
                } catch (e) {
                    console.error('Error calculating shipping fee:', e);
                    showAlert('Lỗi khi tính phí vận chuyển. Vui lòng thử lại.', 'error');
                    shippingFee = 0;
                }
            } else {
                shippingFee = 0;
            }
            updateCartTotal();
        }

        // Hàm cập nhật tổng tiền giỏ hàng
        function updateCartTotal() {
            document.getElementById('cartSubTotal').textContent = cartSubTotal.toLocaleString('vi-VN') + ' đ';
            document.getElementById('shippingFee').textContent = shippingFee.toLocaleString('vi-VN') + ' đ';
            cartTotal = cartSubTotal + shippingFee;
            document.getElementById('cartTotal').textContent = cartTotal.toLocaleString('vi-VN') + ' đ';
        }

        // Hàm hiển thị giỏ hàng
        async function renderCartItems() {
            await fetchSizes();
            const cartItemsContainer = document.getElementById('cartItemsContainer');
            cartItemsContainer.innerHTML = '';
            if (!selectedItems.length) {
                cartItemsContainer.innerHTML = '<p class="cart-empty text-gray-500">Không có sản phẩm nào được chọn để thanh toán. Vui lòng kiểm tra lại.</p>';
                cartSubTotal = 0;
                updateCartTotal();
                document.getElementById('selectedItems').value = '';
                return;
            }
            cartSubTotal = 0;
            selectedItems.forEach(item => {
                const toppingTotal = item.toppings?.reduce((sum, t) => sum + (t.gia_Topping || 0), 0) || 0;
                const sizePrice = getSizePrice(item.iD_Size);
                const basePrice = item.khuyen_Mai && item.khuyen_Mai.ten_Khuyen_Mai ? item.gia_Hien_Thi : item.gia_Goc;
                const itemTotal = (basePrice + toppingTotal + sizePrice) * item.so_Luong;
                cartSubTotal += itemTotal;
                const cartItem = document.createElement('div');
                cartItem.className = 'cart-item';
                cartItem.innerHTML = `
                    <div class="cart-item-details">
                        <div class="cart-item-name">${item.ten_San_Pham}</div>
                        <div class="cart-item-options">
                            ${item.ten_Size ? `Kích thước: ${item.ten_Size} (+${sizePrice.toLocaleString('vi-VN')} đ)<br>` : ''}
                            ${item.ten_LuongDa ? `Lượng đá: ${item.ten_LuongDa}<br>` : ''}
                            ${item.ten_DoNgot ? `Độ ngọt: ${item.ten_DoNgot}<br>` : ''}
                            ${item.toppings && item.toppings.length ? `Topping: ${item.toppings.map(t => `${t.ten_Topping} (+${t.gia_Topping.toLocaleString('vi-VN')} đ)`).join(', ')}<br>` : ''}
                            ${item.ghi_Chu ? `Ghi chú: ${item.ghi_Chu}` : ''}
                            ${item.khuyen_Mai && item.khuyen_Mai.ten_Khuyen_Mai ? `<br>Khuyến mãi: ${item.khuyen_Mai.ten_Khuyen_Mai} (Giảm ${(item.gia_Goc - item.gia_Hien_Thi).toLocaleString('vi-VN')} đ)` : ''}
                        </div>
                        <div class="cart-item-price">
                            ${item.khuyen_Mai && item.khuyen_Mai.ten_Khuyen_Mai ?
                                `<span class="original-price">${(item.gia_Goc + toppingTotal + sizePrice).toLocaleString('vi-VN')} đ</span>
                                 <span class="discounted-price">${(item.gia_Hien_Thi + toppingTotal + sizePrice).toLocaleString('vi-VN')} đ</span>` :
                                `<span class="regular-price">${(item.gia_Goc + toppingTotal + sizePrice).toLocaleString('vi-VN')} đ</span>`}
                        </div>
                    </div>
                    <div class="cart-item-controls">
                        <span class="quantity">x${item.so_Luong > 0 ? item.so_Luong : 'N/A'}</span>
                    </div>
                `;
                cartItemsContainer.appendChild(cartItem);
            });
            document.getElementById('selectedItems').value = encodeURIComponent(JSON.stringify(selectedItems));
            await calculateShippingFee();
            updateSubmitButtonState();
        }

        // Khởi tạo giỏ hàng
        try {
            const guestCart = getCookie('guestCart') || [];
            const selectedCartItems = getCookie('selectedCartItems') || [];
            selectedItems = guestCart.filter(item => selectedCartItems.some(selected => selected.iD_GioHang_ChiTiet === item.iD_GioHang_ChiTiet));
            console.log('Selected Items from guestCart:', selectedItems);
            Promise.all([fetchSizes(), fetchPaymentMethods()]).then(() => {
                renderCartItems();
                populateDistricts();
            });
        } catch (e) {
            console.error('Error parsing guestCart:', e);
            showAlert('Lỗi khi xử lý dữ liệu giỏ hàng. Vui lòng thử lại.', 'error');
            selectedItems = [];
            document.getElementById('cartItemsContainer').innerHTML = '<p class="cart-empty text-gray-500">Không có sản phẩm nào được chọn để thanh toán. Vui lòng kiểm tra lại.</p>';
            document.getElementById('cartSubTotal').textContent = '0 đ';
            document.getElementById('shippingFee').textContent = '0 đ';
            document.getElementById('cartTotal').textContent = '0 đ';
            document.getElementById('selectedItems').value = '';
        }

        // Hàm gộp địa chỉ
        function combineAddress() {
            const districtSelect = document.getElementById('add_District');
            const wardSelect = document.getElementById('add_Ward');
            const districtName = districtSelect.options[districtSelect.selectedIndex]?.text || '';
            const wardName = wardSelect.options[wardSelect.selectedIndex]?.text || '';
            const detail = document.getElementById('add_Ghi_Chu').value.trim();
            if (districtName && wardName && detail) {
                document.getElementById('add_Dia_Chi').value = `Hà Nội, ${wardName}, ${districtName}, ${detail}`;
            }
        }

        // Hàm xóa cookie giỏ hàng
        function clearCartCookie() {
            document.cookie = 'guestCart=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
            document.cookie = 'selectedCartItems=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
            console.log('Cookies giỏ hàng đã được xóa');
        }

        // Hàm cập nhật giỏ hàng sau thanh toán
        function updateGuestCart(cartItemIds) {
            const guestCart = getCookie('guestCart') || [];
            const updatedCart = guestCart.filter(item => !cartItemIds.includes(item.iD_GioHang_ChiTiet));
            document.cookie = 'guestCart=' + encodeURIComponent(JSON.stringify(updatedCart)) + '; path=/; expires=' + new Date(Date.now() + 24 * 60 * 60 * 1000).toUTCString();
            document.cookie = 'selectedCartItems=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
        }

        // Hàm cập nhật trạng thái nút submit
        function updateSubmitButtonState() {
            const paymentSelected = document.querySelector('input[name="selectedPaymentMethod"]:checked');
            const fullName = document.getElementById('fullName').value.trim();
            const phoneNumber = document.getElementById('phoneNumber').value;
            const emailInput = document.getElementById('email');
            const district = document.getElementById('add_District').value;
            const ward = document.getElementById('add_Ward').value;
            const addressDetail = document.getElementById('add_Ghi_Chu').value.trim();
            const submitBtn = document.getElementById('submitBtn');
            const vnPhonePattern = /^(03|05|07|08|09)[0-9]{8}$/;
            const isValidPhone = vnPhonePattern.test(phoneNumber);
            const isValidEmail = emailInput.checkValidity(); // Tích hợp kiểm tra email validity

            submitBtn.disabled = !(fullName && isValidPhone && isValidEmail && paymentSelected && district && ward && addressDetail && selectedItems.length > 0);
        }

        // Hàm hiển thị loading
        function showLoading() {
            document.getElementById('loadingOverlay').classList.add('show');
        }

        // Hàm ẩn loading
        function hideLoading() {
            document.getElementById('loadingOverlay').classList.remove('show');
        }

        // Hàm hiển thị thông báo
        function showAlert(message, type) {
            const notification = document.getElementById(type === 'success' ? 'successNotification' : 'errorNotification');
            const messageElement = document.getElementById(type === 'success' ? 'successMessage' : 'errorMessage');
            messageElement.textContent = message;
            notification.style.display = 'flex';
            setTimeout(() => {
                notification.style.display = 'none';
            }, 3000);
        }

        // Hàm hiển thị dialog thành công
        function showOrderSuccessDialog(maHoaDon) {
            const dialog = document.getElementById('orderSuccessDialog');
            const messageElement = document.getElementById('orderSuccessMessage');
            messageElement.textContent = `Đơn hàng của bạn có Mã hóa đơn là: ${maHoaDon}. Hãy lưu lại mã để tra cứu, theo dõi đơn hàng của bạn.`;
            dialog.style.display = 'block';
        }

               // Hàm validate và xử lý thanh toán
              // Hàm validate và xử lý thanh toán
        async function validateForm(event) {
            event.preventDefault();
            const paymentSelected = document.querySelector('input[name="selectedPaymentMethod"]:checked');
            const fullName = document.getElementById('fullName').value.trim();
            const phoneNumber = document.getElementById('phoneNumber').value;
            const emailInput = document.getElementById('email');
            const email = emailInput.value.trim();
            const district = document.getElementById('add_District').value;
            const ward = document.getElementById('add_Ward').value;
            const addressDetail = document.getElementById('add_Ghi_Chu').value.trim();
            const ghiChuKhachHang = document.getElementById('add_Ghi_Chu_KhachHang').value.trim();
            const paymentError = document.getElementById('paymentError');
            const fullNameError = document.getElementById('fullNameError');
            const phoneError = document.getElementById('phoneError');
            const emailError = document.getElementById('emailError');
            const addressError = document.getElementById('addressError');
            const submitBtn = document.getElementById('submitBtn');
            const vnPhonePattern = /^(03|05|07|08|09)[0-9]{8}$/;
            const isValidPhone = vnPhonePattern.test(phoneNumber);
            const isValidEmail = emailInput.checkValidity();

            paymentError.style.display = paymentSelected ? 'none' : 'block';
            fullNameError.style.display = fullName ? 'none' : 'block';
            phoneError.style.display = isValidPhone ? 'none' : 'block';
            emailError.style.display = isValidEmail ? 'none' : 'block';
            addressError.style.display = (district && ward && addressDetail) ? 'none' : 'block';

            if (!fullName || !isValidPhone || !isValidEmail || !email || !paymentSelected || !district || !ward || !addressDetail) {
                showAlert('Vui lòng nhập đầy đủ thông tin họ tên, số điện thoại, email hợp lệ, địa chỉ và chọn phương thức thanh toán!', 'error');
                return false;
            }
            if (!selectedItems.length) {
                showAlert('Không có sản phẩm nào được chọn để thanh toán!', 'error');
                return false;
            }

            submitBtn.classList.add('loading');
            submitBtn.disabled = true;
            showLoading();
            combineAddress();

            const isVNPAY = parseInt(paymentSelected.value) === 5;
            const checkoutData = {
                iD_Khach_Hang: null,
                iD_Hinh_Thuc_Thanh_Toan: paymentSelected ? parseInt(paymentSelected.value) : 0,
                dia_Chi_Tu_Nhap: document.getElementById('add_Dia_Chi').value,
                iD_Voucher: null,
                tong_Tien: cartSubTotal,
                phi_Ship: shippingFee,
                ghi_Chu: `Họ và Tên: ${fullName}, Số Điện Thoại: ${phoneNumber}, Email: ${email}${ghiChuKhachHang ? `, Ghi chú khách hàng: ${ghiChuKhachHang}` : ''}`,
                ma_Hoa_Don: 'HDCK' + new Date().getTime(),
                hoaDonChiTiets: selectedItems.map(item => {
                    const toppingTotal = item.toppings?.reduce((sum, t) => sum + (t.gia_Topping || 0), 0) || 0;
                    const sizePrice = getSizePrice(item.iD_Size);
                    const basePrice = item.khuyen_Mai && item.khuyen_Mai.ten_Khuyen_Mai ? item.gia_Hien_Thi : item.gia_Goc;
                    const itemTotal = (basePrice + toppingTotal + sizePrice) * item.so_Luong;
                    return {
                        iD_San_Pham: item.iD_San_Pham || 0,
                        ten_San_Pham: item.ten_San_Pham || '',
                        gia_Hien_Thi: item.gia_Hien_Thi || 0,
                        gia_Goc: item.gia_Goc || 0,
                        so_Luong: item.so_Luong || 0,
                        ten_Size: item.ten_Size || '',
                        ten_LuongDa: item.ten_LuongDa || '',
                        ten_DoNgot: item.ten_DoNgot || '',
                        ghi_Chu: item.ghi_Chu || '',
                        iD_Size: item.iD_Size || 0,
                        iD_SanPham_DoNgot: item.iD_SanPham_DoNgot || 0,
                        iD_LuongDa: item.iD_LuongDa || 0,
                        ma_HoaDon_ChiTiet: 'HDC' + item.iD_GioHang_ChiTiet,
                        gia_Them_Size: sizePrice,
                        gia_San_Pham: basePrice + toppingTotal + sizePrice,
                        tong_Tien: itemTotal,
                        hoaDonChiTietToppings: item.toppings?.map(t => ({
                            iD_Topping: t.iD_Topping || 0,
                            ten_Topping: t.ten_Topping || '',
                            so_Luong: 1,
                            gia_Topping: t.gia_Topping || 0
                        })) || []
                    };
                })
            };

            console.log('Checkout Data:', JSON.stringify(checkoutData, null, 2));

            try {
                // Gửi yêu cầu checkout
                const response = await fetch('https://localhost:7169/api/BanHangCK/checkout', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(checkoutData)
                });

                if (!response.ok) {
                    let errorMessage = 'Không xác định';
                    try {
                        const errorData = await response.json();
                        errorMessage = errorData.message || errorMessage;
                    } catch (err) {
                        console.error('Error parsing error response:', err);
                    }
                    throw new Error(`Lỗi khi gửi yêu cầu thanh toán: ${errorMessage}`);
                }

                const result = await response.json();
                console.log('Checkout API Response:', result);

                const cartItemIds = selectedItems.map(item => item.iD_GioHang_ChiTiet);

                // Xử lý thanh toán VNPAY
                if (isVNPAY) {
                    const paymentData = {
                        orderId: checkoutData.ma_Hoa_Don,
                        orderType: 'drink_order',
                        amount: cartTotal,
                        orderDescription: `Thanh toan don hang ${checkoutData.ma_Hoa_Don}`,
                        name: fullName
                    };
                    console.log('VNPAY Payment Data:', JSON.stringify(paymentData, null, 2));

                    try {
                        const paymentResponse = await fetch('https://localhost:7169/api/Payment/create', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(paymentData)
                        });

                        if (!paymentResponse.ok) {
                            let paymentErrorMessage = 'Không xác định';
                            try {
                                const paymentErrorData = await paymentResponse.json();
                                paymentErrorMessage = paymentErrorData.message || paymentErrorMessage;
                            } catch (err) {
                                console.error('Error parsing payment error response:', err);
                            }
                            throw new Error(`Lỗi khi tạo yêu cầu thanh toán VNPAY: ${paymentErrorMessage}`);
                        }

                        const paymentResult = await paymentResponse.json();
                        console.log('VNPAY Payment Response:', paymentResult);

                        // Kiểm tra paymentUrl hợp lệ
                        if (!paymentResult.paymentUrl || typeof paymentResult.paymentUrl !== 'string' || !paymentResult.paymentUrl.startsWith('http')) {
                            throw new Error('URL thanh toán VNPAY không hợp lệ hoặc không được trả về.');
                        }

                        // Lưu trạng thái đơn hàng trước khi chuyển hướng
                        updateGuestCart(cartItemIds);
                        selectedItems = [];
                        await renderCartItems();

                        // Chuyển hướng trực tiếp đến trang thanh toán VNPAY
                        window.location.href = paymentResult.paymentUrl;

                        // Lưu mã hóa đơn vào localStorage để hiển thị dialog sau khi quay lại (nếu cần)
                        localStorage.setItem('pendingOrderId', checkoutData.ma_Hoa_Don);

                    } catch (e) {
                        console.error('Error creating VNPAY payment:', e);
                        showAlert(e.message, 'error');
                        hideLoading();
                        submitBtn.classList.remove('loading');
                        submitBtn.disabled = false;
                        return false;
                    }
                } else {
                    // Thanh toán khi nhận hàng
                    updateGuestCart(cartItemIds);
                    selectedItems = [];
                    await renderCartItems();
                    showOrderSuccessDialog(checkoutData.ma_Hoa_Don);
                    hideLoading();
                    submitBtn.classList.remove('loading');
                    submitBtn.disabled = false;
                }

                return false;
            } catch (e) {
                console.error('Error sending checkout request:', e);
                showAlert(e.message, 'error');
                hideLoading();
                submitBtn.classList.remove('loading');
                submitBtn.disabled = false;
                return false;
            }
        }

        // Hàm kiểm tra trạng thái thanh toán VNPAY sau khi quay lại (nếu cần)
        async function checkVNPAYStatus() {
            const pendingOrderId = localStorage.getItem('pendingOrderId');
            if (pendingOrderId) {
                try {
                    // Gọi API để kiểm tra trạng thái thanh toán VNPAY (giả định có endpoint)
                    const response = await fetch(`https://localhost:7169/api/Payment/status?orderId=${pendingOrderId}`, {
                        method: 'GET',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    if (!response.ok) {
                        throw new Error('Lỗi khi kiểm tra trạng thái thanh toán VNPAY');
                    }
                    const result = await response.json();
                    if (result.status === 'success') {
                        showOrderSuccessDialog(pendingOrderId);
                        localStorage.removeItem('pendingOrderId');
                    } else {
                        showAlert('Thanh toán VNPAY chưa hoàn tất. Vui lòng thử lại.', 'error');
                    }
                } catch (e) {
                    console.error('Error checking VNPAY status:', e);
                    showAlert('Lỗi khi kiểm tra trạng thái thanh toán: ' + e.message, 'error');
                }
            }
        }

        // Gọi hàm kiểm tra trạng thái khi trang được tải lại
        document.addEventListener('DOMContentLoaded', checkVNPAYStatus);

        // Gắn sự kiện input để cập nhật trạng thái nút submit
        document.getElementById('fullName').addEventListener('input', updateSubmitButtonState);
        document.getElementById('phoneNumber').addEventListener('input', updateSubmitButtonState);
        document.getElementById('email').addEventListener('input', updateSubmitButtonState);
        document.getElementById('add_District').addEventListener('change', updateSubmitButtonState);
        document.getElementById('add_Ward').addEventListener('change', updateSubmitButtonState);
        document.getElementById('add_Ghi_Chu').addEventListener('input', updateSubmitButtonState);
    </script>
</div>