@{
    Layout = "_AdminLayout";
}
@using System.Globalization
@using System.Linq
@using System.Collections.Generic
@model FE.Controllers.ChiTietHoaDonViewModel

@functions {
    string VND(decimal d) => string.Format(new CultureInfo("vi-VN"), "{0:#,0} đ", d);

    static readonly Dictionary<int, string> SIZE_NAME_MAP = new() { { 1, "Cơ bản" }, { 2, "Large" }, { 3, "X-Large" } };
    static readonly Dictionary<int, string> NGOT_MAP = new() { { 1, "Mặc định" }, { 2, "Thêm đường" }, { 3, "Ít đường" } };
    static readonly Dictionary<int, string> DA_MAP = new() { { 1, "Mặc định" }, { 2, "Nhiều" }, { 3, "Ít" } };

    string SizeText(int? id, string? sizeNameFromDb = null)
        => !string.IsNullOrWhiteSpace(sizeNameFromDb) ? sizeNameFromDb.Trim()
         : (id.HasValue && SIZE_NAME_MAP.TryGetValue(id.Value, out var s) ? s : "-");
    string NgotText(int? id, string? mucDoFromDb = null)
        => !string.IsNullOrWhiteSpace(mucDoFromDb) ? mucDoFromDb.Trim()
         : (id.HasValue && NGOT_MAP.TryGetValue(id.Value, out var s) ? s : "-");
    string DaText(int? id, string? nameFromDb = null)
        => !string.IsNullOrWhiteSpace(nameFromDb) ? nameFromDb.Trim()
         : (id.HasValue && DA_MAP.TryGetValue(id.Value, out var s) ? s : "-");

    string Badge(string db) => db switch
    {
        "Chua_Xac_Nhan" => "badge bg-warning text-dark",
        "Da_Xac_Nhan" => "badge bg-info text-dark",
        "Dang_Xu_Ly" => "badge bg-warning text-dark",
        "Dang_Giao_Hang" => "badge bg-primary",
        "Hoan_Thanh" => "badge bg-success",
        "Huy_Don" => "badge bg-danger",
        _ => "badge bg-secondary"
    };

    string HienThi(string db) => db switch
    {
        "Chua_Xac_Nhan" => "Chưa xác nhận",
        "Da_Xac_Nhan" => "Đã xác nhận",
        "Dang_Xu_Ly" => "Đang xử lý",
        "Dang_Giao_Hang" => "Đang giao hàng",
        "Hoan_Thanh" => "Hoàn thành",
        "Huy_Don" => "Hủy đơn",
        _ => db ?? "-"
    };
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />

<style>
    /* tracker giữ nguyên của bạn */
    .order-tracker {
        display: flex;
        align-items: center;
        gap: .75rem;
        padding: .75rem 1rem;
        border-radius: .75rem;
        background: #fff;
        border: 1px solid #e9ecef
    }

    .order-step {
        display: flex;
        align-items: center;
        gap: .5rem
    }

        .order-step .dot {
            width: 28px;
            height: 28px;
            border-radius: 50%;
            display: grid;
            place-items: center;
            font-size: 14px;
            font-weight: 700;
            border: 2px solid #ced4da;
            background: #f8f9fa;
            color: #6c757d
        }

        .order-step .label {
            font-weight: 600;
            font-size: .95rem;
            color: #6c757d
        }

    .order-connector {
        flex: 1;
        height: 4px;
        border-radius: 2px;
        background: #e9ecef
    }

    .order-step.done .dot {
        background: #e9f7ef;
        border-color: #51cf66;
        color: #2b8a3e
    }

    .order-step.done .label {
        color: #2b8a3e
    }

    .order-step.active .dot {
        background: #e7f5ff;
        border-color: #339af0;
        color: #1864ab
    }

    .order-step.active .label {
        color: #1864ab
    }

    .order-tracker.canceled .dot {
        background: #ffe3e3;
        border-color: #fa5252;
        color: #c92a2a
    }

    .order-tracker.canceled .label {
        color: #c92a2a
    }

    .order-tracker.canceled .order-connector {
        background: #ffa8a8
    }
</style>

<div class="container py-3">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <a class="btn btn-sm btn-outline-secondary" href="@Url.Action("Index")">← Quay lại</a>

        @{
            var st = Model.HoaDon?.Trang_Thai?.Trim() ?? "";
            bool isCanceled = st == "Huy_Don";
        }
        <div class="d-flex align-items-center gap-2">
            <span class="@Badge(st) px-2 py-1">@HienThi(st)</span>

            @* ===== Nút đổi trạng thái theo luồng ===== *@
            @if (st == "Chua_Xac_Nhan")
            {
                <form method="post" action="@Url.Action("XacNhan","QuanLyDonHang")" class="d-inline">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="id" value="@Model.HoaDon.ID_Hoa_Don" />
                    <input type="hidden" name="from" value="detail" />
                    <button class="btn btn-sm btn-primary">Xác nhận</button>
                </form>
            }
            else if (st == "Da_Xac_Nhan")
            {
                <form method="post" action="@Url.Action("BatDauXuLy","QuanLyDonHang")" class="d-inline">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="id" value="@Model.HoaDon.ID_Hoa_Don" />
                    <input type="hidden" name="from" value="detail" />
                    <button class="btn btn-sm btn-secondary">Bắt đầu xử lý</button>
                </form>
            }
            else if (st == "Dang_Xu_Ly")
            {
                <form method="post" action="@Url.Action("BatDauGiaoHang","QuanLyDonHang")" class="d-inline">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="id" value="@Model.HoaDon.ID_Hoa_Don" />
                    <input type="hidden" name="from" value="detail" />
                    <button class="btn btn-sm btn-info">Bắt đầu giao</button>
                </form>
            }
            else if (st == "Dang_Giao_Hang")
            {
                <form method="post" action="@Url.Action("GiaoHangThanhCong","QuanLyDonHang")" class="d-inline">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="id" value="@Model.HoaDon.ID_Hoa_Don" />
                    <input type="hidden" name="from" value="detail" />
                    <button class="btn btn-sm btn-success">Giao hàng thành công</button>
                </form>
            }

            @* ===== Nút Hủy theo quy tắc ===== *@
            @if (st is "Chua_Xac_Nhan" or "Da_Xac_Nhan" or "Dang_Xu_Ly" or "Dang_Giao_Hang")
            {
                <button type="button" class="btn btn-sm btn-outline-danger"
                        data-bs-toggle="modal"
                        data-bs-target="#modalHuyDon"
                        data-id="@Model.HoaDon.ID_Hoa_Don"
                        data-ma="@Model.HoaDon.Ma_Hoa_Don"
                        data-status="@st">
                    Hủy
                </button>
            }
        </div>
    </div>

    <h4 class="mb-3">Hóa đơn @Model.HoaDon?.Ma_Hoa_Don</h4>

    @{
        int stepIndex = st switch
        {
            "Chua_Xac_Nhan" => 0,
            "Da_Xac_Nhan" => 1,
            "Dang_Xu_Ly" => 2,
            "Dang_Giao_Hang" => 3,
            "Hoan_Thanh" => 4,
            _ => 0
        };
        var steps = new[] { "Đặt hàng", "Xác nhận", "Đang pha chế", "Đang giao", "Hoàn thành" };
    }

    <div class="order-tracker @(isCanceled ? "canceled" : "") mb-3">
        @for (int i = 0; i < steps.Length; i++)
        {
            var state = isCanceled ? "" : (i < stepIndex ? "done" : (i == stepIndex ? "active" : ""));
            <div class="order-step @state">
                <div class="dot">
                    @if (isCanceled)
                    {
                        <span>×</span>
                    }
                    else if (i < stepIndex)
                    {

                        <span>✓</span>
                    }
                    else
                    {

                        <span>@(i + 1)</span>
                    }
                </div>
                <div class="label">@steps[i]</div>
            </div>
            @if (i < steps.Length - 1)
            {
                <div class="order-connector"></div>
            }
        }
    </div>

    @if (isCanceled)
    {
        <div class="text-danger fw-bold">Đơn hàng đã huỷ. @(Model.HoaDon?.Ghi_Chu)</div>
    }

    <div class="row g-3 mt-2">
        <div class="col-lg-6">
            <div class="card">
                <div class="card-body">
                    <div><strong>Mã đơn:</strong> @Model.HoaDon?.Ma_Hoa_Don</div>
                    <div><strong>Khách hàng:</strong> @(Model.HoaDon?.KhachHang?.Ho_Ten ?? "Khách lẻ")</div>
                    <div><strong>Ngày tạo:</strong> @(Model.HoaDon?.Ngay_Tao.ToString("dd/MM/yyyy HH:mm"))</div>
                    <div><strong>Thanh toán:</strong> @(Model.HoaDon?.HinhThucThanhToan?.Phuong_Thuc_Thanh_Toan ?? "N/A")</div>
                    <div><strong>Loại:</strong> @(Model.HoaDon?.Loai_Hoa_Don ?? "N/A")</div>
                    <div><strong>Trạng thái:</strong> <span class="@Badge(st)">@HienThi(st)</span></div>
                    <div><strong>Ghi chú:</strong> @(Model.HoaDon?.Ghi_Chu ?? "-")</div>
                </div>
            </div>
        </div>

        @* ===== Tổng kết giữ nguyên ===== *@
        <div class="col-lg-6">
            @{
                var toppingMapSubtotal = ViewBag.ToppingMap as Dictionary<int, (string Ten, decimal Gia)>
                ?? new Dictionary<int, (string Ten, decimal Gia)>();

                decimal Subtotal()
                {
                    if (Model?.ChiTiets == null) return 0m;
                    decimal sum = 0m;
                    foreach (var ct in Model.ChiTiets)
                    {
                        var giaSp = (decimal?)ct.Gia_San_Pham ?? 0m;
                        var giaSize = (decimal?)ct.Gia_Them_Size ?? 0m;

                        var topSum = (ct.HoaDonChiTietToppings ?? new List<BE.models.HoaDonChiTietTopping>())
                        .Select(t => t?.Topping != null ? ((decimal?)t.Topping.Gia ?? 0m)
                        : (t != null && toppingMapSubtotal.TryGetValue(t.ID_Topping, out var m) ? m.Gia : 0m))
                        .Sum();

                        var unitAfter = giaSp + giaSize + topSum;
                        var lineTotal = (decimal?)ct.Tong_Tien ?? (unitAfter * ct.So_Luong);
                        sum += lineTotal;
                    }
                    return sum;
                }

                var subtotal = Subtotal();
                var hd = Model?.HoaDon;

                var voucherDiscount = (hd?.HoaDonVouchers ?? new List<BE.models.HoaDonVoucher>())
                .Sum(v => (decimal?)v.Gia_Tri_Giam ?? 0m);

                if (voucherDiscount <= 0 && hd != null)
                    voucherDiscount = Math.Max(0m, subtotal - ((decimal?)hd.Tong_Tien ?? subtotal));

                decimal pay = (hd != null
                ? ((decimal?)hd.Tong_Tien ?? Math.Max(0m, subtotal - voucherDiscount))
                : Math.Max(0m, subtotal - voucherDiscount));

                var voucherCodes = (hd?.HoaDonVouchers ?? new List<BE.models.HoaDonVoucher>())
                .Select(v => v.Voucher?.Ma_Voucher)
                .Where(s => !string.IsNullOrWhiteSpace(s)).ToList();
            }
            <div class="card">
                <div class="card-body">
                    <div><strong>Tạm tính:</strong> @VND(subtotal)</div>
                    <div>
                        <strong>Giảm voucher:</strong> - @VND(voucherDiscount)
                        @if (voucherCodes?.Any() == true)
                        {
                            <span class="text-muted">(@string.Join(", ", voucherCodes))</span>
                        }
                    </div>
                    <div class="fs-5 mt-1"><strong>Thanh toán:</strong> @VND(pay)</div>
                </div>
            </div>
        </div>
    </div>

    <div class="card mt-3">
        <div class="card-header">Chi tiết sản phẩm</div>
        <div class="card-body p-0">
            <table class="table table-striped mb-0">
                <thead>
                    <tr>
                        <th>Sản phẩm</th>
                        <th>Size</th>
                        <th>Ngọt</th>
                        <th>Đá</th>
                        <th>Topping</th>
                        <th class="text-end">Đơn giá</th>
                        <th class="text-end">SL</th>
                        <th class="text-end">Thành tiền</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model?.ChiTiets == null || !Model.ChiTiets.Any())
                    {
                        <tr><td colspan="8" class="text-muted">Không có chi tiết.</td></tr>
                    }
                    else
                    {
                        // 🔹 Lấy map tên sản phẩm từ ViewBag
                        var productNameMap = ViewBag.ProductNameMap as Dictionary<int, string> ?? new();

                        foreach (var ct in Model.ChiTiets)
                        {
                            // 🔹 Tên sản phẩm ưu tiên từ navigation; nếu thiếu => map; cuối cùng mới fallback SP#id
                            var tenSp = !string.IsNullOrWhiteSpace(ct.SanPham?.Ten_San_Pham)
                            ? ct.SanPham.Ten_San_Pham.Trim()
                            : (productNameMap.TryGetValue(ct.ID_San_Pham, out var pname) ? pname : $"SP#{ct.ID_San_Pham}");

                            var sizeTxt = SizeText(ct.ID_Size);
                            var ngotTxt = NgotText(ct.ID_SanPham_DoNgot);
                            var daTxt = DaText(ct.ID_LuongDa);

                            var toppingMap = ViewBag.ToppingMap as Dictionary<int, (string Ten, decimal Gia)>
                            ?? new Dictionary<int, (string Ten, decimal Gia)>();

                            var topItems = (ct.HoaDonChiTietToppings ?? new List<BE.models.HoaDonChiTietTopping>())
                            .Select(t =>
                            {
                                if (t?.Topping != null)
                                    return (Ten: (string.IsNullOrWhiteSpace(t.Topping.Ten) ? $"T#{t.ID_Topping}" : t.Topping.Ten.Trim()),
                                                Gia: (decimal?)t.Topping.Gia ?? 0m);

                                if (t != null && toppingMap.TryGetValue(t.ID_Topping, out var m))
                                    return (Ten: m.Ten, Gia: m.Gia);

                                return (Ten: $"T#{t?.ID_Topping ?? 0}", Gia: 0m);
                            }).ToList();
                            var topTxt = topItems.Any() ? string.Join(", ", topItems.Select(x => x.Ten)) : "-";
                            var topSum = topItems.Sum(x => x.Gia);

                            var giaSpSauKM = (decimal?)ct.Gia_San_Pham ?? 0m;
                            var giaSpGoc = (decimal?)ct.SanPham?.Gia ?? giaSpSauKM;
                            var giaSize = (decimal?)ct.Gia_Them_Size ?? 0m;

                            var unitGoc = giaSpGoc + giaSize + topSum;
                            var unitSau = giaSpSauKM + giaSize + topSum;

                            int sl = ct.So_Luong;
                            var thanhTien = (decimal?)ct.Tong_Tien ?? (unitSau * sl);

                            <tr>
                                <td>@tenSp</td>
                                <td>@sizeTxt</td>
                                <td>@ngotTxt</td>
                                <td>@daTxt</td>
                                <td>@topTxt</td>
                                <td class="text-end">
                                    @if (unitSau < unitGoc)
                                    {
                                        <div class="text-muted text-decoration-line-through">@VND(unitGoc)</div>
                                    }
                                    <div class="fw-semibold">@VND(unitSau)</div>
                                    <div class="small text-muted">SP: @VND(giaSpSauKM) • Size: +@VND(giaSize) • Top: @VND(topSum)</div>
                                </td>
                                <td class="text-end">@sl</td>
                                <td class="text-end">@VND(thanhTien)</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@* ================== MODAL HỦY (trang ChiTiet) ================== *@
<div class="modal fade" id="modalHuyDon" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Hủy đơn <span id="huy-mahd" class="text-muted"></span></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
            </div>

            <form id="form-huy-don" method="post" action="@Url.Action("Huy","QuanLyDonHang")">
                @Html.AntiForgeryToken()
                <input type="hidden" name="id" id="huy-id" />
                <input type="hidden" name="status" id="huy-status" />
                <input type="hidden" name="from" value="detail" />

                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label fw-semibold">Lý do hủy <span class="text-danger">*</span></label>
                        <textarea class="form-control" id="huy-lydo" name="lyDo" rows="2" required></textarea>
                    </div>

                    <div id="khophuc-wrapper">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <div class="fw-semibold">Khôi phục tồn cho các cốc đã chọn</div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="chk-all" />
                                <label class="form-check-label" for="chk-all">Chọn tất cả</label>
                            </div>
                        </div>

                        <div class="table-responsive border rounded">
                            <table class="table table-sm mb-0" id="tbl-kphoiphuc">
                                <thead class="table-light">
                                    <tr>
                                        <th style="width:40px"></th>
                                        <th>Mặt hàng</th>
                                        <th class="text-end" style="width:110px">SL đặt</th>
                                        <th class="text-end" style="width:150px">SL khôi phục</th>
                                        <th style="width:120px">Trạng thái pha</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr><td colspan="5" class="text-muted">Đang tải...</td></tr>
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <div id="alert-auto-restock-all" class="alert alert-info d-none mt-3">
                        Trạng thái <strong>Chưa xác nhận</strong>: hệ thống sẽ <strong>tự động khôi phục TOÀN BỘ</strong> tồn khi hủy. Bạn chỉ cần nhập lý do và xác nhận.
                    </div>

                    <div id="alert-no-restock-shipping" class="alert alert-warning d-none mt-3">
                        Trạng thái <strong>Đang giao hàng</strong>: hủy đơn <strong>KHÔNG khôi phục tồn</strong>.
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Đóng</button>
                    <button type="submit" id="btn-huy" class="btn btn-danger">Xác nhận hủy</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
    const modal = document.getElementById('modalHuyDon');
    const tblBody = () => document.querySelector('#tbl-kphoiphuc tbody');

    function escapeHtml(str){return (str||'').replace(/[&<>\"']/g, s=>({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#039;'}[s]));}
    function buildRow(item){
      const tr=document.createElement('tr');
      tr.innerHTML=`
        <td><input type="checkbox" class="chk-row" data-id="${item.id}"></td>
        <td>${escapeHtml(item.ten)}</td>
        <td class="text-end"><span class="sl-dat" data-max="${item.soLuong}">${item.soLuong}</span></td>
        <td class="text-end">
          <input type="number" min="0" max="${item.soLuong}" step="1" class="form-control form-control-sm input-sl"
                 value="${item.daLam ? 0 : item.soLuong}" data-id="${item.id}">
        </td>
        <td>${item.daLam?'<span class="badge text-bg-warning">Đã làm</span>':'<span class="badge text-bg-success">Chưa làm</span>'}</td>`;
      tr.querySelector('.chk-row').checked=!item.daLam && item.soLuong>0;
      return tr;
    }

    if(modal){
      modal.addEventListener('show.bs.modal', async function(e){
        const btn=e.relatedTarget;
        const id=btn?.getAttribute('data-id');
        const ma=btn?.getAttribute('data-ma');
        const status=(btn?.getAttribute('data-status')||"").trim();

        document.getElementById('huy-id').value=id||'';
        document.getElementById('huy-status').value=status||'';
        document.getElementById('huy-mahd').textContent=ma?`(#${ma})`:'';

        const textarea=document.getElementById('huy-lydo'); if(textarea) textarea.value='';

        const wrapper=document.getElementById('khophuc-wrapper');
        const alertAutoAll=document.getElementById('alert-auto-restock-all');
        const alertNoRestock=document.getElementById('alert-no-restock-shipping');

        // reset alerts
        alertAutoAll.classList.add('d-none');
        alertNoRestock.classList.add('d-none');

        if(status==="Chua_Xac_Nhan"){
          wrapper.classList.add('d-none');
          alertAutoAll.classList.remove('d-none');
          return;
        }
        if(status==="Dang_Giao_Hang"){
          wrapper.classList.add('d-none');
          alertNoRestock.classList.remove('d-none');
          return;
        }

        // Cho phép chọn
        wrapper.classList.remove('d-none');
        const body=tblBody();
        body.innerHTML=`<tr><td colspan="5" class="text-muted">Đang tải...</td></tr>`;
        try{
          const url=`@Url.Action("ChiTietJson", "QuanLyDonHang")?id=${0}`.replace('0', encodeURIComponent(id));
          const res=await fetch(url,{credentials:'same-origin'});
          const data=await res.json();
          if(!data?.ok){ body.innerHTML=`<tr><td colspan="5" class="text-danger">Không tải được chi tiết hóa đơn.</td></tr>`; return; }
          if(!data.items||data.items.length===0){ body.innerHTML=`<tr><td colspan="5" class="text-muted">Đơn hàng không có chi tiết.</td></tr>`; return; }
          body.innerHTML=''; data.items.forEach(it=>body.appendChild(buildRow(it)));
        }catch{ body.innerHTML=`<tr><td colspan="5" class="text-danger">Lỗi khi tải dữ liệu.</td></tr>`; }
      });
    }

    document.addEventListener('change', function(e){
      if(e.target?.id==='chk-all'){
        const on=e.target.checked;
        document.querySelectorAll('#tbl-kphoiphuc .chk-row').forEach(cb=>{
          cb.checked=on;
          const tr=cb.closest('tr'); const inp=tr?.querySelector('.input-sl');
          const max=parseInt(inp?.getAttribute('max')||'0');
          if(on && parseInt(inp.value||'0')===0 && max>0) inp.value=String(max);
        });
      }
    });

    const form=document.getElementById('form-huy-don');
    if(form){
      form.addEventListener('submit', function(){
        const btn=document.getElementById('btn-huy'); if(btn) btn.disabled=true;
        form.querySelectorAll('input[name="khoiPhucIds"],input[name="khoiPhucQtys"]').forEach(n=>n.remove());
        const wrapper=document.getElementById('khophuc-wrapper');
        if(!wrapper.classList.contains('d-none')){
          document.querySelectorAll('#tbl-kphoiphuc tbody tr').forEach(tr=>{
            const cb=tr.querySelector('.chk-row'); const inp=tr.querySelector('.input-sl');
            if(cb?.checked && inp){
              const id=inp.getAttribute('data-id'); const qty=inp.value;
              if(id){
                const h1=document.createElement('input'); h1.type='hidden'; h1.name='khoiPhucIds';  h1.value=id;  form.appendChild(h1);
                const h2=document.createElement('input'); h2.type='hidden'; h2.name='khoiPhucQtys'; h2.value=qty; form.appendChild(h2);
              }
            }
          });
        }
      });
    }
</script>
