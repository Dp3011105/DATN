@* @model FE.Models.ProductViewModel
@{
    var activeAllProducts = Model.AllProducts
        .Where(p => p.Trang_Thai && p.So_Luong > 0)
        .OrderByDescending(p => p.ID_San_Pham)
        .Take(9)
        .ToList();
    var activeMostPurchased = Model.MostPurchasedProducts
        .Where(p => p.Trang_Thai && p.So_Luong > 0)
        .Take(10)
        .ToList();
    var top5MostPurchased = activeMostPurchased.Take(5).ToList();
    var next5MostPurchased = activeMostPurchased.Skip(5).Take(5).ToList();
    TimeZoneInfo vnTimeZone;
    try
    {
        vnTimeZone = TimeZoneInfo.FindSystemTimeZoneById("SE Asia Standard Time");
    }
    catch
    {
        vnTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Asia/Ho_Chi_Minh");
    }
    var currentDate = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, vnTimeZone);
}
@Html.Partial("_ShopClosedNotice")
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Menu Sản Phẩm</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <style>
        :root {
            --primary: #3B82F6;
            --primary-dark: #2563EB;
            --secondary: #F59E0B;
            --light-bg: #F8FAFC;
            --card-bg: #FFFFFF;
            --text-primary: #1F2937;
            --text-secondary: #6B7280;
            --success: #10B981;
            --danger: #EF4444;
            --hot-badge: #EF4444;
        }

        body {
            font-family: 'Roboto', sans-serif;
            background-color: var(--light-bg);
            color: var(--text-primary);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .content-wrapper {
            flex: 1 0 auto;
        }
        /* Hero Section */
        .hero-section {
            position: relative;
            width: 100%;
            height: 60vh;
            background: url('https://theme.hstatic.net/200000399631/1000761068/14/slideshow_1.jpg?v=733') no-repeat center center/cover;
            overflow: hidden;
        }
        /* Most Purchased Sections */
        .most-purchased-section {
            background: linear-gradient(135deg, #FFF7ED 0%, #FEF3C7 100%);
            border-radius: 12px;
            padding: 1.5rem;
            margin: 1.5rem 0;
            box-shadow: 0 2px 8px rgba(245, 158, 11, 0.1);
        }

        .most-purchased-title {
            text-align: center;
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--secondary);
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .hot-badge {
            background: linear-gradient(135deg, var(--hot-badge), #DC2626);
            color: white;
            font-size: 0.65rem;
            font-weight: 600;
            padding: 3px 10px;
            border-radius: 16px;
            animation: pulse 2s infinite;
            z-index: 10;
        }

        .most-purchased-card {
            transition: all 0.3s ease;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
            background: var(--card-bg);
            height: 100%;
            display: flex;
            flex-direction: column;
            position: relative;
        }

            .most-purchased-card:hover {
                transform: translateY(-4px) scale(1.02);
                box-shadow: 0 8px 16px rgba(245, 158, 11, 0.2);
            }

        .most-purchased-image-container {
            position: relative;
            width: 100%;
            padding-top: 75%;
            overflow: hidden;
        }

        .most-purchased-image {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s ease;
        }

        .most-purchased-card:hover .most-purchased-image {
            transform: scale(1.03);
        }
        keyframes pulse {
            0%, 100%

        {
            transform: scale(1);
        }

        50% {
            transform: scale(1.08);
        }

        }
        /* All Products */
        .product-card {
            transition: all 0.2s ease;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
            background: var(--card-bg);
            height: 100%;
            display: flex;
            flex-direction: column;
        }

            .product-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.08);
            }

        .product-image-container {
            position: relative;
            width: 100%;
            padding-top: 75%;
            overflow: hidden;
        }

        .product-image {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s ease;
        }

        .product-card:hover .product-image {
            transform: scale(1.02);
        }

        .promotion-badge {
            position: absolute;
            top: 8px;
            right: 8px;
            background: linear-gradient(135deg, var(--secondary), #F97316);
            color: white;
            font-size: 0.6rem;
            font-weight: 600;
            padding: 3px 8px;
            border-radius: 16px;
            z-index: 10;
        }
        /* Price Styles */
        .original-price {
            text-decoration: line-through;
            color: var(--text-secondary);
        }

        .discounted-price {
            font-weight: bold;
        }
        /* Search */
        .search-container {
            position: relative;
            max-width: 500px;
            margin: 0 auto 1.5rem;
        }

        .search-input {
            width: 100%;
            padding: 0.75rem 1rem 0.75rem 2.5rem;
            border-radius: 50px;
            border: 1px solid #E5E7EB;
            background: white;
            font-size: 0.9rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.03);
            transition: all 0.2s ease;
        }

            .search-input:focus {
                outline: none;
                box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.25);
                border-color: var(--primary);
            }

        .search-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #9CA3AF;
            font-size: 0.9rem;
        }

        .search-button {
            position: absolute;
            right: 0.25rem;
            top: 50%;
            transform: translateY(-50%);
            background: var(--primary);
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 50px;
            font-size: 0.8rem;
            font-weight: 500;
            transition: all 0.2s ease;
        }

            .search-button:hover {
                background: var(--primary-dark);
            }
        /* Modal */
        .modal-content {
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        }

        .modal-header {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
            border-radius: 12px 12px 0 0;
            padding: 1rem;
        }

        .modal-body {
            padding: 1.5rem;
        }

        .option-group {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .option-badge {
            display: inline-block;
            padding: 0.5rem 1rem;
            border: 1px solid #E5E7EB;
            border-radius: 20px;
            font-size: 0.8rem;
            cursor: pointer;
            transition: all 0.2s ease;
        }

            .option-badge:hover {
                background: var(--primary);
                color: white;
                border-color: var(--primary);
            }

            .option-badge.selected {
                background: var(--primary);
                color: white;
                border-color: var(--primary);
            }

        .quantity-control {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            border: 1px solid #E5E7EB;
            border-radius: 8px;
            width: fit-content;
        }

        .quantity-btn {
            background: none;
            border: none;
            padding: 0.5rem 1rem;
            font-size: 1rem;
            color: var(--primary);
            cursor: pointer;
        }

            .quantity-btn:disabled {
                color: #D1D5DB;
                cursor: not-allowed;
            }

        .quantity-input {
            width: 50px;
            text-align: center;
            border: none;
            font-size: 0.9rem;
        }

        .add-to-cart-btn {
            width: 100%;
            padding: 0.75rem;
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
            font-weight: 500;
            border-radius: 8px;
            border: none;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

            .add-to-cart-btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            }

            .add-to-cart-btn:disabled {
                background: #D1D5DB;
                cursor: not-allowed;
            }
        /* Alerts */
        .alert-notification {
            padding: 0.75rem 1rem;
            border-radius: 8px;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.9rem;
            top: 20%;
        }

        .alert-success {
            background: #ECFDF5;
            color: var(--success);
            border: 1px solid var(--success);
        }

        .alert-error {
            background: #FEF2F2;
            color: var(--danger);
            border: 1px solid var(--danger);
        }

        .close-button {
            background: none;
            border: none;
            font-size: 1rem;
            cursor: pointer;
            color: inherit;
        }
        /* Footer */
        .footer {
            background: linear-gradient(135deg, #1F2937 0%, #111827 100%);
            color: white;
            padding: 3rem 0 1rem;
            width: 100%;
            flex-shrink: 0;
            margin-top: auto;
        }

        .footer-container {
            max-width: 100%;
            padding-left: 1.5rem;
            padding-right: 1.5rem;
            margin: 0 auto;
        }

        .footer-section {
            margin-bottom: 2rem;
        }

        .footer-title {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 1rem;
            color: var(--secondary);
        }

        .footer-link {
            display: block;
            color: #D1D5DB;
            text-decoration: none;
            font-size: 0.9rem;
            transition: color 0.2s ease;
            margin-bottom: 0.5rem;
        }

            .footer-link:hover {
                color: var(--primary);
            }

        .footer-social {
            display: flex;
            gap: 1rem;
        }

        .social-icon {
            width: 40px;
            height: 40px;
            background: var(--primary);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            text-decoration: none;
            transition: background 0.2s ease;
        }

            .social-icon:hover {
                background: var(--primary-dark);
            }

        .footer-bottom {
            border-top: 1px solid #374151;
            padding-top: 1.5rem;
            text-align: center;
            color: #9CA3AF;
            font-size: 0.85rem;
        }
        /* Responsive Footer */
        media (max-width: 768px) {
            .footer

        {
            padding: 2rem 0 1rem;
        }

        .footer-social {
            justify-content: center;
        }

        }
        /* Responsive */
       media (max-width: 768px) {
            .hero-section

        {
            height: 40vh;
        }

        .most-purchased-section .grid {
            grid-template-columns: repeat(2, 1fr);
        }

        .main-grid .grid {
            grid-template-columns: repeat(2, 1fr);
        }

        }
        media (max-width: 480px) {
            .most-purchased-section .grid

        {
            grid-template-columns: 1fr;
        }

        .main-grid .grid {
            grid-template-columns: 1fr;
        }

        }
        /* Chat Bubble */
        .chat-bubble {
            position: fixed;
            bottom: 1rem;
            right: 1rem;
            z-index: 50;
            cursor: pointer;
            background-color: #3B82F6;
            color: white;
            border-radius: 50%;
            padding: 1rem;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            transition: background-color 0.3s;
        }

            .chat-bubble:hover {
                background-color: #2563EB;
            }

        .chat-frame {
            position: fixed;
            bottom: 0;
            right: 0;
            z-index: 50;
            width: 23rem;
            height: 35rem;
            background-color: white;
            border-radius: 1rem;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            overflow: hidden;
            display: none;
        }

        .close-chat {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            background: red;
            border: none;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
        }

            .close-chat i {
                font-size: 1rem;
                color: white;
            }

        .chat-bubble i {
            font-size: 2rem;
        }
    </style>
</head>
<body>
    <div class="content-wrapper">
        <!-- Hero Section -->
        <section class="hero-section animate__animated animate__fadeIn"></section>
        <div class="container mx-auto py-6 px-3 sm:px-4 lg:px-6">
            <!-- Notifications -->
            @if (TempData["Success"] != null)
            {
                <div class="alert-notification alert-success animate__animated animate__fadeInDown">
                    <i class="bi bi-check-circle-fill mr-2 text-lg"></i>
                    <div class="flex-1">@TempData["Success"]</div>
                    <button type="button" class="close-button" data-bs-dismiss="alert" aria-label="Close">
                        <i class="bi bi-x"></i>
                    </button>
                </div>
            }
            @if (TempData["Error"] != null)
            {
                <div class="alert-notification alert-error animate__animated animate__fadeInDown">
                    <i class="bi bi-exclamation-circle-fill mr-2 text-lg"></i>
                    <div class="flex-1">@TempData["Error"]</div>
                    <button type="button" class="close-button" data-bs-dismiss="alert" aria-label="Close">
                        <i class="bi bi-x"></i>
                    </button>
                </div>
            }
            <!-- Search Section -->
            <div class="text-center mb-6">
                <h1 class="text-2xl md:text-3xl font-bold text-gray-800 mb-3">Thực Đơn</h1>
                <p class="text-gray-600 text-sm max-w-xl mx-auto">Khám phá đồ uống tươi ngon</p>
                <div class="search-container">
                    <i class="bi bi-search search-icon"></i>
                    <input type="text" id="searchInput" class="search-input" placeholder="Tìm kiếm sản phẩm...">
                    <button id="searchButton" class="search-button">Tìm</button>
                </div>
            </div>
            <!-- Most Purchased Section: Top 5 -->
            @if (top5MostPurchased.Any())
            {
                <section class="most-purchased-section animate__animated animate__fadeInUp">
                    <h2 class="most-purchased-title">
                        <i class="bi bi-fire text-xl text-red-500"></i>
                        Sản Phẩm Phổ Biến Nhất
                    </h2>
                    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
                        @foreach (var product in top5MostPurchased)
                        {
                            bool hasActivePromotion = false;
                            decimal basePrice = product.Gia;
                            string promotionName = "";
                            if (product.KhuyenMais != null && product.KhuyenMais.Any())
                            {
                                foreach (var km in product.KhuyenMais)
                                {
                                    if (currentDate >= km.Ngay_Bat_Dau && currentDate <= km.Ngay_Ket_Thuc)
                                    {
                                        hasActivePromotion = true;
                                        basePrice = km.Gia_Giam ?? product.Gia;
                                        promotionName = km.Ten_Khuyen_Mai;
                                        break;
                                    }
                                }
                            }
                            <div class="most-purchased-card animate__animated animate__zoomIn" data-name="@product.Ten_San_Pham.ToLower()" data-id="@product.ID_San_Pham">
                                <div class="most-purchased-image-container">
                                    <img src="@("https://localhost:7169" + product.Hinh_Anh)" alt="@product.Ten_San_Pham" class="most-purchased-image" />
                                    <div class="hot-badge absolute top-3 left-3">Hot 🔥</div>
                                    @if (hasActivePromotion)
                                    {
                                        <div class="promotion-badge absolute top-3 right-3">Khuyến mãi</div>
                                    }
                                </div>
                                <div class="p-3 flex flex-col flex-grow">
                                    <h3 class="text-base font-semibold text-gray-800 mb-1">@product.Ten_San_Pham</h3>
                                    <p class="text-gray-600 text-xs mb-2 flex-grow">@(product.Mo_Ta.Length > 80 ? product.Mo_Ta.Substring(0, 80) + "..." : product.Mo_Ta)</p>
                                    <div class="price-container mb-2">
                                        @if (hasActivePromotion)
                                        {
                                            <span class="original-price text-sm">@string.Format("{0:N0} đ", product.Gia)</span>
                                            <span class="discounted-price text-base font-semibold text-green-600">@string.Format("{0:N0} đ", basePrice)</span>
                                        }
                                        else
                                        {
                                            <span class="regular-price text-base font-semibold">@string.Format("{0:N0} đ", product.Gia)</span>
                                        }
                                    </div>
                                    <div class="mt-auto flex justify-between items-center">
                                        <span class="text-xs text-gray-500">@product.So_Luong sẵn có</span>
                                        <button class="view-details-btn text-xs text-blue-600 font-medium hover:text-blue-800 transition">
                                            Chi tiết
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </section>
            }
            <!-- Most Purchased Section: Next 5 -->
            @if (next5MostPurchased.Any())
            {
                <section class="most-purchased-section animate__animated animate__fadeInUp">
                    <h2 class="most-purchased-title">
                        <i class="bi bi-star-fill text-xl text-yellow-500"></i>
                        Sản Phẩm Mua Nhiều Nhất
                    </h2>
                    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
                        @foreach (var product in next5MostPurchased)
                        {
                            bool hasActivePromotion = false;
                            decimal basePrice = product.Gia;
                            string promotionName = "";
                            if (product.KhuyenMais != null && product.KhuyenMais.Any())
                            {
                                foreach (var km in product.KhuyenMais)
                                {
                                    if (currentDate >= km.Ngay_Bat_Dau && currentDate <= km.Ngay_Ket_Thuc)
                                    {
                                        hasActivePromotion = true;
                                        basePrice = km.Gia_Giam ?? product.Gia;
                                        promotionName = km.Ten_Khuyen_Mai;
                                        break;
                                    }
                                }
                            }
                            <div class="most-purchased-card animate__animated animate__zoomIn" data-name="@product.Ten_San_Pham.ToLower()" data-id="@product.ID_San_Pham">
                                <div class="most-purchased-image-container">
                                    <img src="@("https://localhost:7169" + product.Hinh_Anh)" alt="@product.Ten_San_Pham" class="most-purchased-image" />
                                    <div class="hot-badge absolute top-3 left-3">Hot 🔥</div>
                                    @if (hasActivePromotion)
                                    {
                                        <div class="promotion-badge absolute top-3 right-3">Khuyến mãi</div>
                                    }
                                </div>
                                <div class="p-3 flex flex-col flex-grow">
                                    <h3 class="text-base font-semibold text-gray-800 mb-1">@product.Ten_San_Pham</h3>
                                    <p class="text-gray-600 text-xs mb-2 flex-grow">@(product.Mo_Ta.Length > 80 ? product.Mo_Ta.Substring(0, 80) + "..." : product.Mo_Ta)</p>
                                    <div class="price-container mb-2">
                                        @if (hasActivePromotion)
                                        {
                                            <span class="original-price text-sm">@string.Format("{0:N0} đ", product.Gia)</span>
                                            <span class="discounted-price text-base font-semibold text-green-600">@string.Format("{0:N0} đ", basePrice)</span>
                                        }
                                        else
                                        {
                                            <span class="regular-price text-base font-semibold">@string.Format("{0:N0} đ", product.Gia)</span>
                                        }
                                    </div>
                                    <div class="mt-auto flex justify-between items-center">
                                        <span class="text-xs text-gray-500">@product.So_Luong sẵn có</span>
                                        <button class="view-details-btn text-xs text-blue-600 font-medium hover:text-blue-800 transition">
                                            Chi tiết
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </section>
            }
            <!-- Main Content Grid: All Products -->
            <div class="main-grid">
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                    @foreach (var product in activeAllProducts)
                    {
                        bool hasActivePromotion = false;
                        decimal basePrice = product.Gia;
                        string promotionName = "";
                        if (product.KhuyenMais != null && product.KhuyenMais.Any())
                        {
                            foreach (var km in product.KhuyenMais)
                            {
                                if (currentDate >= km.Ngay_Bat_Dau && currentDate <= km.Ngay_Ket_Thuc)
                                {
                                    hasActivePromotion = true;
                                    basePrice = km.Gia_Giam ?? product.Gia;
                                    promotionName = km.Ten_Khuyen_Mai;
                                    break;
                                }
                            }
                        }
                        <div class="product-card animate__animated animate__fadeIn" data-name="@product.Ten_San_Pham.ToLower()" data-id="@product.ID_San_Pham">
                            <div class="product-image-container">
                                <img src="@("https://localhost:7169" + product.Hinh_Anh)" alt="@product.Ten_San_Pham" class="product-image" />
                                @if (hasActivePromotion)
                                {
                                    <div class="promotion-badge">Khuyến mãi</div>
                                }
                            </div>
                            <div class="p-3 flex flex-col flex-grow">
                                <h3 class="text-sm font-semibold text-gray-800 mb-1">@product.Ten_San_Pham</h3>
                                <p class="text-gray-600 text-xs mb-2 flex-grow">@(product.Mo_Ta.Length > 80 ? product.Mo_Ta.Substring(0, 80) + "..." : product.Mo_Ta)</p>
                                <div class="price-container">
                                    @if (hasActivePromotion)
                                    {
                                        <span class="original-price text-xs">@string.Format("{0:N0} đ", product.Gia)</span>
                                        <span class="discounted-price text-sm font-semibold text-green-600">@string.Format("{0:N0} đ", basePrice)</span>
                                    }
                                    else
                                    {
                                        <span class="regular-price text-sm font-semibold">@string.Format("{0:N0} đ", product.Gia)</span>
                                    }
                                </div>
                                <div class="mt-auto pt-2 flex justify-between items-center">
                                    <span class="text-xs text-gray-500">@product.So_Luong sẵn có</span>
                                    <button class="view-details-btn text-xs text-blue-600 font-medium hover:text-blue-800 transition">
                                        Chi tiết
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="text-center mt-6">
                    <a href="/SanPhamTK" class="inline-block bg-blue-600 text-white font-medium py-2 px-4 rounded-lg hover:bg-blue-700 transition">
                        Xem thêm sản phẩm
                    </a>
                </div>
                <div id="noResults" class="hidden text-center py-8">
                    <i class="bi bi-search text-3xl text-gray-300 mb-3"></i>
                    <h3 class="text-lg font-medium text-gray-500">Không tìm thấy sản phẩm</h3>
                    <p class="text-gray-400 text-sm mt-1">Thử từ khóa khác</p>
                </div>
            </div>
        </div>
    </div>
    <!-- Product Details Modal -->
    <div class="modal fade" id="productDetailsModal" tabindex="-1" aria-labelledby="productDetailsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="text-lg font-bold" id="modalProductName"></h2>
                    <button type="button" class="close-button" data-bs-dismiss="modal" aria-label="Close">
                        <i class="bi bi-x text-xl"></i>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div class="modal-image-container">
                            <img id="modalProductImageSrc" src="" alt="" class="w-full h-80 object-cover rounded-lg" />
                        </div>
                        <div class="space-y-4">
                            <div>
                                <p class="text-gray-600 text-sm" id="modalProductDescription"></p>
                            </div>
                            <div class="price-container flex items-center gap-2">
                                <span id="modalProductPrice" class="text-lg font-semibold"></span>
                                <span id="modalProductPromotionBadge" class="promotion-badge hidden"></span>
                            </div>
                            <div>
                                <p class="text-xs text-gray-500" id="modalProductQuantity"></p>
                            </div>
                            <form id="productOptionsForm" class="space-y-4">
                                <div>
                                    <h4 class="section-title text-sm font-medium"><i class="bi bi-rulers mr-1"></i> Kích thước <span class="text-red-500">*</span></h4>
                                    <div id="modalProductSizes" class="option-group"></div>
                                    <p id="sizeError" class="error-message text-red-500 text-xs hidden">Vui lòng chọn kích thước</p>
                                </div>
                                <div>
                                    <h4 class="section-title text-sm font-medium"><i class="bi bi-droplet-half mr-1"></i> Lượng đá <span class="text-red-500">*</span></h4>
                                    <div id="modalProductIceLevels" class="option-group"></div>
                                    <p id="iceError" class="error-message text-red-500 text-xs hidden">Vui lòng chọn lượng đá</p>
                                </div>
                                <div>
                                    <h4 class="section-title text-sm font-medium"><i class="bi bi-heart mr-1"></i> Độ ngọt <span class="text-red-500">*</span></h4>
                                    <div id="modalProductSweetness" class="option-group"></div>
                                    <p id="sweetnessError" class="error-message text-red-500 text-xs hidden">Vui lòng chọn độ ngọt</p>
                                </div>
                                <div>
                                    <h4 class="section-title text-sm font-medium"><i class="bi bi-star mr-1"></i> Topping</h4>
                                    <div id="modalProductToppings" class="option-group"></div>
                                </div>
                                <div>
                                    <h4 class="section-title text-sm font-medium"><i class="bi bi-hash mr-1"></i> Số lượng</h4>
                                    <div class="quantity-control">
                                        <button type="button" class="quantity-btn" id="decreaseQuantity">-</button>
                                        <input type="number" id="quantityInput" class="quantity-input" min="1" value="1" readonly>
                                        <button type="button" class="quantity-btn" id="increaseQuantity">+</button>
                                    </div>
                                    <p id="quantityError" class="error-message text-red-500 text-xs hidden">Số lượng từ 1 đến <span id="maxQuantity"></span>.</p>
                                </div>
                                <div class="pt-2 border-t border-gray-100">
                                    <div class="flex justify-between items-center">
                                        <span class="text-gray-700 font-medium text-sm">Tổng cộng:</span>
                                        <span id="totalPrice" class="text-blue-600 font-bold text-lg">0 đ</span>
                                    </div>
                                    <button type="button" class="add-to-cart-btn mt-3" id="modalAddToCart" disabled>
                                        <i class="bi bi-cart-plus mr-1"></i>Thêm vào giỏ
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Footer -->
    <footer class="footer">
        <div class="footer-container">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div class="footer-section">
                    <h3 class="footer-title">TheBoy Trà Sữa</h3>
                    <p class="text-sm text-gray-300 mb-4">Cửa hàng trà sữa tươi ngon, nguyên liệu chất lượng cao. Mang đến những ly trà sữa thơm ngon, đậm đà hương vị Việt Nam.</p>
                    <div class="flex items-center gap-4">
                        <i class="bi bi-geo-alt text-primary text-lg"></i>
                        <span class="text-sm">123 Đường ABC, Quận 1, TP. HCM</span>
                    </div>
                    <div class="flex items-center gap-4 mt-2">
                        <i class="bi bi-telephone text-primary text-lg"></i>
                        <span class="text-sm">+84 123 456 789</span>
                    </div>
                    <div class="flex items-center gap-4 mt-2">
                        <i class="bi bi-envelope text-primary text-lg"></i>
                        <span class="text-sm">theboy@trasua.vn</span>
                    </div>
                </div>
                <div class="footer-section">
                    <h3 class="footer-title">Menu</h3>
                    <a href="/" class="footer-link">Trang chủ</a>
                    <a href="/SanPham" class="footer-link">Sản phẩm</a>
                    <a href="/GioiThieu" class="footer-link">Giới thiệu</a>
                    <a href="/LienHe" class="footer-link">Liên hệ</a>
                    <a href="/KhuyenMai" class="footer-link">Khuyến mãi</a>
                </div>
                <div class="footer-section">
                    <h3 class="footer-title">Dịch vụ</h3>
                    <a href="/GiaoHang" class="footer-link">Giao hàng</a>
                    <a href="/ThanhToan" class="footer-link">Thanh toán</a>
                    <a href="/ChinhSach" class="footer-link">Chính sách</a>
                    <a href="/HoiDap" class="footer-link">Hỏi đáp</a>
                </div>
                <div class="footer-section">
                    <h3 class="footer-title">Theo dõi chúng tôi</h3>
                    <div class="footer-social">
                        <a href="https://facebook.com/theboytrasua" class="social-icon" target="_blank" rel="noopener">
                            <i class="bi bi-facebook"></i>
                        </a>
                        <a href="https://instagram.com/theboytrasua" class="social-icon" target="_blank" rel="noopener">
                            <i class="bi bi-instagram"></i>
                        </a>
                        <a href="https://tiktok.com/theboytrasua" class="social-icon" target="_blank" rel="noopener">
                            <i class="bi bi-tiktok"></i>
                        </a>
                        <a href="https://zalo.me/theboytrasua" class="social-icon" target="_blank" rel="noopener">
                            <i class="bi bi-chat-dots"></i>
                        </a>
                    </div>
                    <p class="text-sm text-gray-300 mt-4">Nhận ưu đãi đặc biệt qua app!</p>
                </div>
            </div>
            <div class="footer-bottom">
                <p>&copy; 2025 TheBoy Trà Sữa. Tất cả quyền được bảo lưu. | Thiết kế bởi xAI</p>
            </div>
        </div>
    </footer>
    <!-- Chat Bubble -->
    <div id="chatBubble" class="chat-bubble">
        <i class="bi bi-chat-dots text-2xl"></i>
    </div>
    <div id="chatFrame" class="chat-frame">
        <button id="closeChat" class="close-chat">
            <i class="bi bi-x"></i>
        </button>
        <iframe src="https://localhost:7081/chat/chatai" class="w-full h-full border-none"></iframe>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const searchInput = document.getElementById('searchInput');
            const searchButton = document.getElementById('searchButton');
            const productCards = document.querySelectorAll('.product-card, .most-purchased-card');
            const noResults = document.getElementById('noResults');
            const modalElement = document.getElementById('productDetailsModal');
            const modal = new bootstrap.Modal(modalElement);
            const quantityInput = document.getElementById('quantityInput');
            const quantityError = document.getElementById('quantityError');
            const maxQuantitySpan = document.getElementById('maxQuantity');
            const addToCartBtn = document.getElementById('modalAddToCart');
            const sizeError = document.getElementById('sizeError');
            const iceError = document.getElementById('iceError');
            const sweetnessError = document.getElementById('sweetnessError');
            const decreaseQuantity = document.getElementById('decreaseQuantity');
            const increaseQuantity = document.getElementById('increaseQuantity');
            let userId = null;
            @if (Context.Request.Cookies["UserData"] != null)
            {
                    <text>
                    try {
                        const userData = JSON.parse('@Html.Raw(Context.Request.Cookies["UserData"])');
                        userId = userData.ID_Khach_Hang;
                        console.log('Parsed userId from UserData cookie:', userId);
                    } catch (e) {
                        console.error('Error parsing UserData cookie:', e);
                    }
                    </text>
            }
            else
            {
                    <text>
                    console.log('No UserData cookie found');
                    </text>
            }
            let productsData = [];
            let sizesData = [];
            // Cookie Management Functions
            function setCookie(name, value, days) {
                let expires = "";
                if (days) {
                    const date = new Date();
                    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                    expires = "; expires=" + date.toUTCString();
                }
                document.cookie = name + "=" + encodeURIComponent(JSON.stringify(value)) + expires + "; path=/";
            }
            function getCookie(name) {
                const nameEQ = name + "=";
                const cookies = document.cookie.split(';');
                for (let cookie of cookies) {
                    cookie = cookie.trim();
                    if (cookie.startsWith(nameEQ)) {
                        try {
                            return JSON.parse(decodeURIComponent(cookie.substring(nameEQ.length)));
                        } catch (e) {
                            console.error(`Error parsing cookie ${name}:`, e);
                            return null;
                        }
                    }
                }
                return null;
            }
            function deleteCookie(name) {
                document.cookie = name + "=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT";
            }
            function getGuestCart() {
                return getCookie('guestCart') || [];
            }
            function saveGuestCart(cart) {
                setCookie('guestCart', cart, 1); // Cookie expires in 1 day
            }
            function addToGuestCart(item) {
                const cart = getGuestCart();
                const cartItemId = Date.now().toString(); // Generate unique ID for guest cart item
                cart.push({ ...item, iD_GioHang_ChiTiet: cartItemId });
                saveGuestCart(cart);
            }
            function removeFromGuestCart(id) {
                const cart = getGuestCart();
                const updatedCart = cart.filter(item => item.iD_GioHang_ChiTiet !== id);
                saveGuestCart(updatedCart);
            }
            async function fetchSizes() {
                try {
                    const response = await fetch('https://localhost:7169/api/Size', {
                        method: 'GET',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    if (!response.ok) throw new Error(`Không thể lấy danh sách size: ${await response.text()}`);
                    sizesData = await response.json();
                    console.log('Fetched sizes:', sizesData);
                } catch (error) {
                    console.error('Lỗi fetch sizes:', error);
                    showAlert('Lỗi khi lấy danh sách size!', 'error');
                }
            }
            async function fetchProducts() {
                try {
                    const response = await fetch('https://localhost:7169/api/SanPham', {
                        method: 'GET',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    if (!response.ok) throw new Error(`Không thể lấy danh sách sản phẩm: ${await response.text()}`);
                    productsData = await response.json();
                    console.log('Fetched products:', productsData);
                } catch (error) {
                    console.error('Lỗi fetch products:', error);
                    showAlert('Lỗi khi lấy danh sách sản phẩm!', 'error');
                }
            }
            const chatBubble = document.getElementById('chatBubble');
            const chatFrame = document.getElementById('chatFrame');
            const closeChat = document.getElementById('closeChat');
            chatBubble.addEventListener('click', () => {
                chatFrame.style.display = chatFrame.style.display === 'none' ? 'block' : 'none';
            });
            closeChat.addEventListener('click', () => {
                chatFrame.style.display = 'none';
            });
            Promise.all([fetchProducts(), fetchSizes()]);
            function filterProducts() {
                const searchTerm = searchInput.value.toLowerCase().trim();
                let visibleCount = 0;
                productCards.forEach(card => {
                    const name = card.getAttribute('data-name');
                    if (name.includes(searchTerm)) {
                        card.style.display = 'block';
                        card.classList.add('animate__fadeIn');
                        visibleCount++;
                    } else {
                        card.style.display = 'none';
                    }
                });
                noResults.classList.toggle('hidden', visibleCount > 0 || searchTerm === '');
                if (visibleCount === 0 && searchTerm !== '') {
                    noResults.classList.add('animate__fadeIn');
                }
            }
            searchButton.addEventListener('click', filterProducts);
            searchInput.addEventListener('keyup', function (e) {
                if (e.key === 'Enter') filterProducts();
            });
            let basePrice = 0;
            let selectedSize = null;
            let selectedSizePrice = 0;
            let selectedIce = null;
            let selectedSweetness = null;
            let selectedToppings = [];
            let maxQuantity = 1;
            function calculateTotalPrice() {
                let quantity = parseInt(quantityInput.value) || 1;
                if (quantity < 1) quantity = 1;
                if (quantity > maxQuantity) quantity = maxQuantity;
                quantityInput.value = quantity;
                let total = (basePrice + selectedSizePrice) * quantity;
                selectedToppings.forEach(topping => {
                    total += topping.price * quantity;
                });
                document.getElementById('totalPrice').textContent = total.toLocaleString('vi-VN') + ' đ';
            }
            function validateSelections() {
                const isSizeSelected = selectedSize !== null;
                const isIceSelected = selectedIce !== null;
                const isSweetnessSelected = selectedSweetness !== null;
                sizeError.classList.toggle('hidden', isSizeSelected);
                iceError.classList.toggle('hidden', isIceSelected);
                sweetnessError.classList.toggle('hidden', isSweetnessSelected);
                addToCartBtn.disabled = !(isSizeSelected && isIceSelected && isSweetnessSelected);
            }
            function showAlert(message, type) {
                const alert = document.createElement('div');
                alert.className = `alert-notification alert-${type} animate__animated animate__slideInRight fixed top-20 right-4 z-50 max-w-sm`;
                alert.innerHTML = `
                    <i class="bi bi-${type === 'success' ? 'check-circle-fill' : 'exclamation-circle-fill'} mr-2 text-lg"></i>
                    <div>${message}</div>
                    <button type="button" class="close-button" onclick="this.parentElement.remove()">
                        <i class="bi bi-x"></i>
                    </button>
                `;
                document.body.appendChild(alert);
                setTimeout(() => {
                    if (alert.parentElement) alert.remove();
                }, 3000);
            }
            document.querySelectorAll('.view-details-btn').forEach(btn => {
                btn.addEventListener('click', function (e) {
                    e.stopPropagation();
                    this.closest('.product-card, .most-purchased-card').click();
                });
            });
            document.getElementById('modalAddToCart').addEventListener('click', async function () {
                if (!selectedSize || !selectedIce || !selectedSweetness) {
                    validateSelections();
                    showAlert('Vui lòng chọn đầy đủ Kích thước, Lượng đá và Độ ngọt!', 'error');
                    return;
                }
                const productId = this.getAttribute('data-id');
                const quantity = parseInt(quantityInput.value) || 1;
                if (isNaN(quantity) || quantity < 1 || quantity > maxQuantity) {
                    quantityError.classList.remove('hidden');
                    return;
                } else {
                    quantityError.classList.add('hidden');
                }
                const product = productsData.find(p => p.iD_San_Pham === parseInt(productId));
                const sizeData = sizesData.find(s => s.iD_Size === parseInt(selectedSize));
                const iceData = product.luongDas.find(i => i.iD_LuongDa === parseInt(selectedIce));
                const sweetnessData = product.doNgots.find(s => s.iD_DoNgot === parseInt(selectedSweetness));
                const toppingData = selectedToppings.map(t => ({
                    iD_Topping: parseInt(t.id),
                    ten_Topping: product.toppings.find(top => top.iD_Topping === parseInt(t.id)).ten,
                    gia_Topping: parseFloat(t.price)
                }));
                const hasActivePromotion = product.khuyenMais && product.khuyenMais.some(km => new Date(km.ngay_Bat_Dau) <= new Date('@currentDate.ToString("o")') && new Date(km.ngay_Ket_Thuc) >= new Date('@currentDate.ToString("o")'));
                const requestData = {
                    iD_San_Pham: parseInt(productId),
                    ten_San_Pham: product.ten_San_Pham,
                    gia_Hien_Thi: hasActivePromotion ? product.khuyenMais.find(km => new Date(km.ngay_Bat_Dau) <= new Date('@currentDate.ToString("o")') && new Date(km.ngay_Ket_Thuc) >= new Date('@currentDate.ToString("o")')).gia_Giam : product.gia,
                    gia_Goc: product.gia,
                    hinh_Anh: product.hinh_Anh,
                    so_Luong: quantity,
                    iD_Size: selectedSize ? parseInt(selectedSize) : null,
                    ten_Size: sizeData ? sizeData.sizeName : '',
                    gia_Size: sizeData ? sizeData.gia : 0,
                    iD_LuongDa: selectedIce ? parseInt(selectedIce) : null,
                    ten_LuongDa: iceData ? iceData.ten_LuongDa : '',
                    iD_SanPham_DoNgot: selectedSweetness ? parseInt(selectedSweetness) : null,
                    ten_DoNgot: sweetnessData ? sweetnessData.muc_Do : '',
                    ghi_Chu: '',
                    toppings: toppingData,
                    khuyen_Mai: hasActivePromotion ? {
                        co_Khuyen_Mai: true,
                        ten_Khuyen_Mai: product.khuyenMais.find(km => new Date(km.ngay_Bat_Dau) <= new Date('@currentDate.ToString("o")') && new Date(km.ngay_Ket_Thuc) >= new Date('@currentDate.ToString("o")')).ten_Khuyen_Mai,
                        gia_Giam: product.khuyenMais.find(km => new Date(km.ngay_Bat_Dau) <= new Date('@currentDate.ToString("o")') && new Date(km.ngay_Ket_Thuc) >= new Date('@currentDate.ToString("o")')).gia_Giam
                    } : { co_Khuyen_Mai: false }
                };
                if (userId) {
                    // For logged-in users, send to API
                    try {
                        const response = await fetch('https://localhost:7169/api/Gio_Hang/add', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ ...requestData, iD_Khach_Hang: userId })
                        });
                        if (!response.ok) throw new Error(`Không thể thêm vào giỏ hàng: ${await response.text()}`);
                        showAlert(`Đã thêm "${document.getElementById('modalProductName').textContent}" vào giỏ hàng!`, 'success');
                        modal.hide();
                    } catch (error) {
                        console.error('Lỗi khi thêm vào giỏ hàng:', error);
                        showAlert('Lỗi khi thêm vào giỏ hàng!', 'error');
                    }
                } else {
                    // For guest users, save to cookie
                    addToGuestCart(requestData);
                    showAlert(`Đã thêm "${document.getElementById('modalProductName').textContent}" vào giỏ hàng!`, 'success');
                    modal.hide();
                }
            });
            decreaseQuantity.addEventListener('click', function () {
                let quantity = parseInt(quantityInput.value) || 1;
                if (quantity > 1) {
                    quantityInput.value = quantity - 1;
                    calculateTotalPrice();
                    validateSelections();
                }
                decreaseQuantity.disabled = quantity <= 1;
                increaseQuantity.disabled = quantity >= maxQuantity;
            });
            increaseQuantity.addEventListener('click', function () {
                let quantity = parseInt(quantityInput.value) || 1;
                if (quantity < maxQuantity) {
                    quantityInput.value = quantity + 1;
                    calculateTotalPrice();
                    validateSelections();
                }
                decreaseQuantity.disabled = quantity <= 1;
                increaseQuantity.disabled = quantity >= maxQuantity;
            });
            document.querySelectorAll('.product-card, .most-purchased-card').forEach(card => {
                card.addEventListener('click', async function () {
                    const productId = this.getAttribute('data-id');
                    try {
                        const response = await fetch(`https://localhost:7169/api/SanPham/${productId}`, {
                            method: 'GET',
                            headers: { 'Content-Type': 'application/json' }
                        });
                        if (!response.ok) throw new Error(`Không thể lấy thông tin sản phẩm: ${await response.text()}`);
                        const product = await response.json();
                        const currentDate = new Date('@currentDate.ToString("o")');
                        document.getElementById('modalProductName').textContent = product.ten_San_Pham;
                        let hasActivePromotion = false;
                        let discountedPrice = product.gia;
                        let promotionName = '';
                        if (product.khuyenMais && product.khuyenMais.length > 0) {
                            for (let km of product.khuyenMais) {
                                if (new Date(km.ngay_Bat_Dau) <= currentDate && new Date(km.ngay_Ket_Thuc) >= currentDate) {
                                    hasActivePromotion = true;
                                    discountedPrice = km.gia_Giam || product.gia;
                                    promotionName = km.ten_Khuyen_Mai;
                                    break;
                                }
                            }
                        }
                        basePrice = hasActivePromotion ? discountedPrice : product.gia;
                        const priceElement = document.getElementById('modalProductPrice');
                        const promotionBadge = document.getElementById('modalProductPromotionBadge');
                        if (hasActivePromotion) {
                            priceElement.innerHTML = `<span class="original-price text-sm mr-2">${product.gia.toLocaleString('vi-VN')} đ</span><span class="text-green-600">${discountedPrice.toLocaleString('vi-VN')} đ</span>`;
                            promotionBadge.textContent = promotionName;
                            promotionBadge.classList.remove('hidden');
                        } else {
                            priceElement.textContent = product.gia.toLocaleString('vi-VN') + ' đ';
                            promotionBadge.classList.add('hidden');
                        }
                        maxQuantity = product.so_Luong;
                        document.getElementById('modalProductQuantity').textContent = `Số lượng có sẵn: ${product.so_Luong}`;
                        document.getElementById('modalProductImageSrc').src = `https://localhost:7169${product.hinh_Anh}`;
                        document.getElementById('modalProductDescription').textContent = product.mo_Ta;
                        quantityInput.value = 1;
                        quantityInput.setAttribute('max', maxQuantity);
                        maxQuantitySpan.textContent = maxQuantity;
                        quantityError.classList.add('hidden');
                        selectedSize = null;
                        selectedSizePrice = 0;
                        selectedIce = null;
                        selectedSweetness = null;
                        selectedToppings = [];
                        sizeError.classList.add('hidden');
                        iceError.classList.add('hidden');
                        sweetnessError.classList.add('hidden');
                        addToCartBtn.disabled = true;
                        let sizesHtml = '';
                        if (product.sizes && product.sizes.length > 0) {
                            product.sizes.forEach(size => {
                                if (size.trang_Thai) {
                                    const sizeData = sizesData.find(s => s.iD_Size === size.iD_Size);
                                    const sizePrice = sizeData ? sizeData.gia : 0;
                                    sizesHtml += `
                                        <label class="cursor-pointer">
                                            <input type="radio" name="size" value="${size.sizeName}" class="sr-only" data-id="${size.iD_Size}" data-price="${sizePrice}">
                                            <span class="option-badge">${size.sizeName} (+${sizePrice.toLocaleString('vi-VN')} đ)</span>
                                        </label>`;
                                }
                            });
                        } else {
                            sizesHtml = '<span class="text-gray-500 text-xs">Không có kích thước</span>';
                        }
                        document.getElementById('modalProductSizes').innerHTML = sizesHtml;
                        let iceLevelsHtml = '';
                        if (product.luongDas && product.luongDas.length > 0) {
                            product.luongDas.forEach(ice => {
                                if (ice.trang_Thai) {
                                    iceLevelsHtml += `
                                        <label class="cursor-pointer">
                                            <input type="radio" name="ice" value="${ice.ten_LuongDa}" class="sr-only" data-id="${ice.iD_LuongDa}">
                                            <span class="option-badge">${ice.ten_LuongDa}</span>
                                        </label>`;
                                }
                            });
                        } else {
                            iceLevelsHtml = '<span class="text-gray-500 text-xs">Không có lượng đá</span>';
                        }
                        document.getElementById('modalProductIceLevels').innerHTML = iceLevelsHtml;
                        let sweetnessHtml = '';
                        if (product.doNgots && product.doNgots.length > 0) {
                            product.doNgots.forEach(sweet => {
                                if (sweet.trang_Thai) {
                                    sweetnessHtml += `
                                        <label class="cursor-pointer">
                                            <input type="radio" name="sweetness" value="${sweet.muc_Do}" class="sr-only" data-id="${sweet.iD_DoNgot}">
                                            <span class="option-badge">${sweet.muc_Do}</span>
                                        </label>`;
                                }
                            });
                        } else {
                            sweetnessHtml = '<span class="text-gray-500 text-xs">Không có độ ngọt</span>';
                        }
                        document.getElementById('modalProductSweetness').innerHTML = sweetnessHtml;
                        let toppingsHtml = '';
                        if (product.toppings && product.toppings.length > 0) {
                            product.toppings.forEach(topping => {
                                if (topping.trang_Thai && topping.so_Luong > 0) {
                                    toppingsHtml += `
                                        <label class="cursor-pointer">
                                            <input type="checkbox" name="topping" value="${topping.ten}" class="sr-only" data-id="${topping.iD_Topping}" data-price="${topping.gia}">
                                            <span class="option-badge">${topping.ten} (+${topping.gia.toLocaleString('vi-VN')} đ)</span>
                                        </label>`;
                                }
                            });
                        } else {
                            toppingsHtml = '<span class="text-gray-500 text-xs">Không có topping</span>';
                        }
                        document.getElementById('modalProductToppings').innerHTML = toppingsHtml;
                        document.querySelectorAll('input[name="size"], input[name="ice"], input[name="sweetness"], input[name="topping"]').forEach(input => {
                            input.addEventListener('change', function () {
                                const badge = this.nextElementSibling;
                                if (this.name === 'topping') {
                                    if (this.checked) {
                                        selectedToppings.push({ id: this.dataset.id, price: parseFloat(this.dataset.price) });
                                        badge.classList.add('selected');
                                    } else {
                                        selectedToppings = selectedToppings.filter(t => t.id !== this.dataset.id);
                                        badge.classList.remove('selected');
                                    }
                                } else {
                                    if (this.name === 'size') {
                                        selectedSize = this.dataset.id;
                                        selectedSizePrice = parseFloat(this.dataset.price) || 0;
                                    }
                                    if (this.name === 'ice') selectedIce = this.dataset.id;
                                    if (this.name === 'sweetness') selectedSweetness = this.dataset.id;
                                    document.querySelectorAll(`input[name="${this.name}"]`).forEach(radio => {
                                        const siblingBadge = radio.nextElementSibling;
                                        siblingBadge.classList.toggle('selected', radio.checked);
                                    });
                                }
                                calculateTotalPrice();
                                validateSelections();
                            });
                        });
                        quantityInput.addEventListener('input', function () {
                            calculateTotalPrice();
                            validateSelections();
                        });
                        calculateTotalPrice();
                        decreaseQuantity.disabled = true;
                        increaseQuantity.disabled = quantityInput.value >= maxQuantity;
                        document.getElementById('modalAddToCart').setAttribute('data-id', product.iD_San_Pham);
                        modal.show();
                    } catch (error) {
                        console.error('Lỗi khi lấy thông tin sản phẩm:', error);
                        showAlert('Lỗi khi tải thông tin sản phẩm!', 'error');
                    }
                });
            });
        });
    </script>
</body>
</html> *@













@model FE.Models.ProductViewModel
@{
    var activeAllProducts = Model.AllProducts
        .Where(p => p.Trang_Thai && p.So_Luong > 0)
        .OrderByDescending(p => p.ID_San_Pham)
        .Take(9)
        .ToList();
    var activeMostPurchased = Model.MostPurchasedProducts
        .Where(p => p.Trang_Thai && p.So_Luong > 0)
        .Take(10)
        .ToList();
    var top5MostPurchased = activeMostPurchased.Take(5).ToList();
    var next5MostPurchased = activeMostPurchased.Skip(5).Take(5).ToList();
    TimeZoneInfo vnTimeZone;
    try
    {
        vnTimeZone = TimeZoneInfo.FindSystemTimeZoneById("SE Asia Standard Time");
    }
    catch
    {
        vnTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Asia/Ho_Chi_Minh");
    }
    var currentDate = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, vnTimeZone);
}
@Html.Partial("_ShopClosedNotice")
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Menu Sản Phẩm</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <style>
        :root {
            --primary: #3B82F6;
            --primary-dark: #2563EB;
            --secondary: #F59E0B;
            --light-bg: #F8FAFC;
            --card-bg: #FFFFFF;
            --text-primary: #1F2937;
            --text-secondary: #6B7280;
            --success: #10B981;
            --danger: #EF4444;
            --hot-badge: #EF4444;
        }

        body {
            font-family: 'Roboto', sans-serif;
            background-color: var(--light-bg);
            color: var(--text-primary);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .content-wrapper {
            flex: 1 0 auto;
        }
        /* Hero Section */
        .hero-section {
            position: relative;
            width: 100%;
            height: 60vh;
            background: url('https://theme.hstatic.net/200000399631/1000761068/14/slideshow_1.jpg?v=733') no-repeat center center/cover;
            overflow: hidden;
        }
        /* Most Purchased Sections */
        .most-purchased-section {
            background: linear-gradient(135deg, #FFF7ED 0%, #FEF3C7 100%);
            border-radius: 12px;
            padding: 1.5rem;
            margin: 1.5rem 0;
            box-shadow: 0 2px 8px rgba(245, 158, 11, 0.1);
        }

        .most-purchased-title {
            text-align: center;
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--secondary);
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .hot-badge {
            background: linear-gradient(135deg, var(--hot-badge), #DC2626);
            color: white;
            font-size: 0.65rem;
            font-weight: 600;
            padding: 3px 10px;
            border-radius: 16px;
            animation: pulse 2s infinite;
            z-index: 10;
        }

        .most-purchased-card {
            transition: all 0.3s ease;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
            background: var(--card-bg);
            height: 100%;
            display: flex;
            flex-direction: column;
            position: relative;
        }

            .most-purchased-card:hover {
                transform: translateY(-4px) scale(1.02);
                box-shadow: 0 8px 16px rgba(245, 158, 11, 0.2);
            }

        .most-purchased-image-container {
            position: relative;
            width: 100%;
            padding-top: 75%;
            overflow: hidden;
        }

        .most-purchased-image {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s ease;
        }

        .most-purchased-card:hover .most-purchased-image {
            transform: scale(1.03);
        }

        keyframes pulse {
            0%, 100%

        {
            transform: scale(1);
        }

        50% {
            transform: scale(1.08);
        }

        }
        /* All Products */
        .product-card {
            transition: all 0.2s ease;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
            background: var(--card-bg);
            height: 100%;
            display: flex;
            flex-direction: column;
        }

            .product-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.08);
            }

        .product-image-container {
            position: relative;
            width: 100%;
            padding-top: 75%;
            overflow: hidden;
        }

        .product-image {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s ease;
        }

        .product-card:hover .product-image {
            transform: scale(1.02);
        }

        .promotion-badge {
            position: absolute;
            top: 8px;
            right: 8px;
            background: linear-gradient(135deg, var(--secondary), #F97316);
            color: white;
            font-size: 0.6rem;
            font-weight: 600;
            padding: 3px 8px;
            border-radius: 16px;
            z-index: 10;
        }
        /* Price Styles */
        .original-price {
            text-decoration: line-through;
            color: var(--text-secondary);
        }

        .discounted-price {
            font-weight: bold;
        }
        /* Modal */
        .modal-content {
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        }

        .modal-header {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
            border-radius: 12px 12px 0 0;
            padding: 1rem;
        }

        .modal-body {
            padding: 1.5rem;
        }

        .option-group {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .option-badge {
            display: inline-block;
            padding: 0.5rem 1rem;
            border: 1px solid #E5E7EB;
            border-radius: 20px;
            font-size: 0.8rem;
            cursor: pointer;
            transition: all 0.2s ease;
        }

            .option-badge:hover {
                background: var(--primary);
                color: white;
                border-color: var(--primary);
            }

            .option-badge.selected {
                background: var(--primary);
                color: white;
                border-color: var(--primary);
            }

        .quantity-control {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            border: 1px solid #E5E7EB;
            border-radius: 8px;
            width: fit-content;
        }

        .quantity-btn {
            background: none;
            border: none;
            padding: 0.5rem 1rem;
            font-size: 1rem;
            color: var(--primary);
            cursor: pointer;
        }

            .quantity-btn:disabled {
                color: #D1D5DB;
                cursor: not-allowed;
            }

        .quantity-input {
            width: 50px;
            text-align: center;
            border: none;
            font-size: 0.9rem;
        }

        .add-to-cart-btn {
            width: 100%;
            padding: 0.75rem;
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
            font-weight: 500;
            border-radius: 8px;
            border: none;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

            .add-to-cart-btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            }

            .add-to-cart-btn:disabled {
                background: #D1D5DB;
                cursor: not-allowed;
            }
        /* Alerts */
        .alert-notification {
            padding: 0.75rem 1rem;
            border-radius: 8px;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.9rem;
            top: 20%;
        }

        .alert-success {
            background: #ECFDF5;
            color: var(--success);
            border: 1px solid var(--success);
        }

        .alert-error {
            background: #FEF2F2;
            color: var(--danger);
            border: 1px solid var(--danger);
        }

        .close-button {
            background: none;
            border: none;
            font-size: 1rem;
            cursor: pointer;
            color: inherit;
        }
        /* Footer */
        .footer {
            background: linear-gradient(135deg, #1F2937 0%, #111827 100%);
            color: white;
            padding: 3rem 0 1rem;
            width: 100%;
            flex-shrink: 0;
            margin-top: auto;
        }

        .footer-container {
            max-width: 100%;
            padding-left: 1.5rem;
            padding-right: 1.5rem;
            margin: 0 auto;
        }

        .footer-section {
            margin-bottom: 2rem;
        }

        .footer-title {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 1rem;
            color: var(--secondary);
        }

        .footer-link {
            display: block;
            color: #D1D5DB;
            text-decoration: none;
            font-size: 0.9rem;
            transition: color 0.2s ease;
            margin-bottom: 0.5rem;
        }

            .footer-link:hover {
                color: var(--primary);
            }

        .footer-social {
            display: flex;
            gap: 1rem;
        }

        .social-icon {
            width: 40px;
            height: 40px;
            background: var(--primary);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            text-decoration: none;
            transition: background 0.2s ease;
        }

            .social-icon:hover {
                background: var(--primary-dark);
            }

        .footer-bottom {
            border-top: 1px solid #374151;
            padding-top: 1.5rem;
            text-align: center;
            color: #9CA3AF;
            font-size: 0.85rem;
        }
        /* Responsive Footer */
       media (max-width: 768px) {
            .footer

        {
            padding: 2rem 0 1rem;
        }

        .footer-social {
            justify-content: center;
        }

        }
        /* Responsive */
        media (max-width: 768px) {
            .hero-section

        {
            height: 40vh;
        }

        .most-purchased-section .grid {
            grid-template-columns: repeat(2, 1fr);
        }

        .main-grid .grid {
            grid-template-columns: repeat(2, 1fr);
        }

        }
        media (max-width: 480px) {
            .most-purchased-section .grid

        {
            grid-template-columns: 1fr;
        }

        .main-grid .grid {
            grid-template-columns: 1fr;
        }

        }
        /* Chat Bubble */
        .chat-bubble {
            position: fixed;
            bottom: 1rem;
            right: 1rem;
            z-index: 50;
            cursor: pointer;
            background-color: #3B82F6;
            color: white;
            border-radius: 50%;
            padding: 1rem;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            transition: background-color 0.3s;
        }

            .chat-bubble:hover {
                background-color: #2563EB;
            }

        .chat-frame {
            position: fixed;
            bottom: 0;
            right: 0;
            z-index: 50;
            width: 23rem;
            height: 35rem;
            background-color: white;
            border-radius: 1rem;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            overflow: hidden;
            display: none;
        }

        .close-chat {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            background: red;
            border: none;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
        }

            .close-chat i {
                font-size: 1rem;
                color: white;
            }

        .chat-bubble i {
            font-size: 2rem;
        }
    </style>
</head>
<body>
    <div class="content-wrapper">
        <!-- Hero Section -->
        <section class="hero-section animate__animated animate__fadeIn"></section>
        <div class="container mx-auto py-6 px-3 sm:px-4 lg:px-6">
            <!-- Notifications -->
            @if (TempData["Success"] != null)
            {
                <div class="alert-notification alert-success animate__animated animate__fadeInDown">
                    <i class="bi bi-check-circle-fill mr-2 text-lg"></i>
                    <div class="flex-1">@TempData["Success"]</div>
                    <button type="button" class="close-button" data-bs-dismiss="alert" aria-label="Close">
                        <i class="bi bi-x"></i>
                    </button>
                </div>
            }
            @if (TempData["Error"] != null)
            {
                <div class="alert-notification alert-error animate__animated animate__fadeInDown">
                    <i class="bi bi-exclamation-circle-fill mr-2 text-lg"></i>
                    <div class="flex-1">@TempData["Error"]</div>
                    <button type="button" class="close-button" data-bs-dismiss="alert" aria-label="Close">
                        <i class="bi bi-x"></i>
                    </button>
                </div>
            }
            <!-- Title Section -->
            <div class="text-center mb-6">
                <h1 class="text-2xl md:text-3xl font-bold text-gray-800 mb-3">Thực Đơn</h1>
                <p class="text-gray-600 text-sm max-w-xl mx-auto">Khám phá đồ uống tươi ngon</p>
            </div>
            <!-- Most Purchased Section: Top 5 -->
            @if (top5MostPurchased.Any())
            {
                <section class="most-purchased-section animate__animated animate__fadeInUp">
                    <h2 class="most-purchased-title">
                        <i class="bi bi-fire text-xl text-red-500"></i>
                        Sản Phẩm Phổ Biến Nhất
                    </h2>
                    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
                        @foreach (var product in top5MostPurchased)
                        {
                            bool hasActivePromotion = false;
                            decimal basePrice = product.Gia;
                            string promotionName = "";
                            if (product.KhuyenMais != null && product.KhuyenMais.Any())
                            {
                                foreach (var km in product.KhuyenMais)
                                {
                                    if (currentDate >= km.Ngay_Bat_Dau && currentDate <= km.Ngay_Ket_Thuc)
                                    {
                                        hasActivePromotion = true;
                                        basePrice = km.Gia_Giam ?? product.Gia;
                                        promotionName = km.Ten_Khuyen_Mai;
                                        break;
                                    }
                                }
                            }
                            <div class="most-purchased-card animate__animated animate__zoomIn" data-id="@product.ID_San_Pham">
                                <div class="most-purchased-image-container">
                                    <img src="@("https://localhost:7169" + product.Hinh_Anh)" alt="@product.Ten_San_Pham" class="most-purchased-image" />
                                    <div class="hot-badge absolute top-3 left-3">Hot 🔥</div>
                                    @if (hasActivePromotion)
                                    {
                                        <div class="promotion-badge absolute top-3 right-3">Khuyến mãi</div>
                                    }
                                </div>
                                <div class="p-3 flex flex-col flex-grow">
                                    <h3 class="text-base font-semibold text-gray-800 mb-1">@product.Ten_San_Pham</h3>
                                    <p class="text-gray-600 text-xs mb-2 flex-grow">@(product.Mo_Ta.Length > 80 ? product.Mo_Ta.Substring(0, 80) + "..." : product.Mo_Ta)</p>
                                    <div class="price-container mb-2">
                                        @if (hasActivePromotion)
                                        {
                                            <span class="original-price text-sm">@string.Format("{0:N0} đ", product.Gia)</span>
                                            <span class="discounted-price text-base font-semibold text-green-600">@string.Format("{0:N0} đ", basePrice)</span>
                                        }
                                        else
                                        {
                                            <span class="regular-price text-base font-semibold">@string.Format("{0:N0} đ", product.Gia)</span>
                                        }
                                    </div>
                                    <div class="mt-auto flex justify-between items-center">
                                        <span class="text-xs text-gray-500">@product.So_Luong sẵn có</span>
                                        <button class="view-details-btn text-xs text-blue-600 font-medium hover:text-blue-800 transition">
                                            Chi tiết
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </section>
            }
            <!-- Most Purchased Section: Next 5 -->
            @if (next5MostPurchased.Any())
            {
                <section class="most-purchased-section animate__animated animate__fadeInUp">
                    <h2 class="most-purchased-title">
                        <i class="bi bi-star-fill text-xl text-yellow-500"></i>
                        Sản Phẩm Mua Nhiều Nhất
                    </h2>
                    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
                        @foreach (var product in next5MostPurchased)
                        {
                            bool hasActivePromotion = false;
                            decimal basePrice = product.Gia;
                            string promotionName = "";
                            if (product.KhuyenMais != null && product.KhuyenMais.Any())
                            {
                                foreach (var km in product.KhuyenMais)
                                {
                                    if (currentDate >= km.Ngay_Bat_Dau && currentDate <= km.Ngay_Ket_Thuc)
                                    {
                                        hasActivePromotion = true;
                                        basePrice = km.Gia_Giam ?? product.Gia;
                                        promotionName = km.Ten_Khuyen_Mai;
                                        break;
                                    }
                                }
                            }
                            <div class="most-purchased-card animate__animated animate__zoomIn" data-id="@product.ID_San_Pham">
                                <div class="most-purchased-image-container">
                                    <img src="@("https://localhost:7169" + product.Hinh_Anh)" alt="@product.Ten_San_Pham" class="most-purchased-image" />
                                    <div class="hot-badge absolute top-3 left-3">Hot 🔥</div>
                                    @if (hasActivePromotion)
                                    {
                                        <div class="promotion-badge absolute top-3 right-3">Khuyến mãi</div>
                                    }
                                </div>
                                <div class="p-3 flex flex-col flex-grow">
                                    <h3 class="text-base font-semibold text-gray-800 mb-1">@product.Ten_San_Pham</h3>
                                    <p class="text-gray-600 text-xs mb-2 flex-grow">@(product.Mo_Ta.Length > 80 ? product.Mo_Ta.Substring(0, 80) + "..." : product.Mo_Ta)</p>
                                    <div class="price-container mb-2">
                                        @if (hasActivePromotion)
                                        {
                                            <span class="original-price text-sm">@string.Format("{0:N0} đ", product.Gia)</span>
                                            <span class="discounted-price text-base font-semibold text-green-600">@string.Format("{0:N0} đ", basePrice)</span>
                                        }
                                        else
                                        {
                                            <span class="regular-price text-base font-semibold">@string.Format("{0:N0} đ", product.Gia)</span>
                                        }
                                    </div>
                                    <div class="mt-auto flex justify-between items-center">
                                        <span class="text-xs text-gray-500">@product.So_Luong sẵn có</span>
                                        <button class="view-details-btn text-xs text-blue-600 font-medium hover:text-blue-800 transition">
                                            Chi tiết
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </section>
            }
            <!-- Main Content Grid: All Products -->
            <div class="main-grid">
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                    @foreach (var product in activeAllProducts)
                    {
                        bool hasActivePromotion = false;
                        decimal basePrice = product.Gia;
                        string promotionName = "";
                        if (product.KhuyenMais != null && product.KhuyenMais.Any())
                        {
                            foreach (var km in product.KhuyenMais)
                            {
                                if (currentDate >= km.Ngay_Bat_Dau && currentDate <= km.Ngay_Ket_Thuc)
                                {
                                    hasActivePromotion = true;
                                    basePrice = km.Gia_Giam ?? product.Gia;
                                    promotionName = km.Ten_Khuyen_Mai;
                                    break;
                                }
                            }
                        }
                        <div class="product-card animate__animated animate__fadeIn" data-id="@product.ID_San_Pham">
                            <div class="product-image-container">
                                <img src="@("https://localhost:7169" + product.Hinh_Anh)" alt="@product.Ten_San_Pham" class="product-image" />
                                @if (hasActivePromotion)
                                {
                                    <div class="promotion-badge">Khuyến mãi</div>
                                }
                            </div>
                            <div class="p-3 flex flex-col flex-grow">
                                <h3 class="text-sm font-semibold text-gray-800 mb-1">@product.Ten_San_Pham</h3>
                                <p class="text-gray-600 text-xs mb-2 flex-grow">@(product.Mo_Ta.Length > 80 ? product.Mo_Ta.Substring(0, 80) + "..." : product.Mo_Ta)</p>
                                <div class="price-container">
                                    @if (hasActivePromotion)
                                    {
                                        <span class="original-price text-xs">@string.Format("{0:N0} đ", product.Gia)</span>
                                        <span class="discounted-price text-sm font-semibold text-green-600">@string.Format("{0:N0} đ", basePrice)</span>
                                    }
                                    else
                                    {
                                        <span class="regular-price text-sm font-semibold">@string.Format("{0:N0} đ", product.Gia)</span>
                                    }
                                </div>
                                <div class="mt-auto pt-2 flex justify-between items-center">
                                    <span class="text-xs text-gray-500">@product.So_Luong sẵn có</span>
                                    <button class="view-details-btn text-xs text-blue-600 font-medium hover:text-blue-800 transition">
                                        Chi tiết
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="text-center mt-6">
                    <a href="/SanPhamTK" class="inline-block bg-blue-600 text-white font-medium py-2 px-4 rounded-lg hover:bg-blue-700 transition">
                        Xem thêm sản phẩm
                    </a>
                </div>
            </div>
        </div>
    </div>
    <!-- Product Details Modal -->
    <div class="modal fade" id="productDetailsModal" tabindex="-1" aria-labelledby="productDetailsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="text-lg font-bold" id="modalProductName"></h2>
                    <button type="button" class="close-button" data-bs-dismiss="modal" aria-label="Close">
                        <i class="bi bi-x text-xl"></i>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div class="modal-image-container">
                            <img id="modalProductImageSrc" src="" alt="" class="w-full h-80 object-cover rounded-lg" />
                        </div>
                        <div class="space-y-4">
                            <div>
                                <p class="text-gray-600 text-sm" id="modalProductDescription"></p>
                            </div>
                            <div class="price-container flex items-center gap-2">
                                <span id="modalProductPrice" class="text-lg font-semibold"></span>
                                <span id="modalProductPromotionBadge" class="promotion-badge hidden"></span>
                            </div>
                            <div>
                                <p class="text-xs text-gray-500" id="modalProductQuantity"></p>
                            </div>
                            <form id="productOptionsForm" class="space-y-4">
                                <div>
                                    <h4 class="section-title text-sm font-medium"><i class="bi bi-rulers mr-1"></i> Kích thước <span class="text-red-500">*</span></h4>
                                    <div id="modalProductSizes" class="option-group"></div>
                                    <p id="sizeError" class="error-message text-red-500 text-xs hidden">Vui lòng chọn kích thước</p>
                                </div>
                                <div>
                                    <h4 class="section-title text-sm font-medium"><i class="bi bi-droplet-half mr-1"></i> Lượng đá <span class="text-red-500">*</span></h4>
                                    <div id="modalProductIceLevels" class="option-group"></div>
                                    <p id="iceError" class="error-message text-red-500 text-xs hidden">Vui lòng chọn lượng đá</p>
                                </div>
                                <div>
                                    <h4 class="section-title text-sm font-medium"><i class="bi bi-heart mr-1"></i> Độ ngọt <span class="text-red-500">*</span></h4>
                                    <div id="modalProductSweetness" class="option-group"></div>
                                    <p id="sweetnessError" class="error-message text-red-500 text-xs hidden">Vui lòng chọn độ ngọt</p>
                                </div>
                                <div>
                                    <h4 class="section-title text-sm font-medium"><i class="bi bi-star mr-1"></i> Topping</h4>
                                    <div id="modalProductToppings" class="option-group"></div>
                                </div>
                                <div>
                                    <h4 class="section-title text-sm font-medium"><i class="bi bi-hash mr-1"></i> Số lượng</h4>
                                    <div class="quantity-control">
                                        <button type="button" class="quantity-btn" id="decreaseQuantity">-</button>
                                        <input type="number" id="quantityInput" class="quantity-input" min="1" value="1" readonly>
                                        <button type="button" class="quantity-btn" id="increaseQuantity">+</button>
                                    </div>
                                    <p id="quantityError" class="error-message text-red-500 text-xs hidden">Số lượng từ 1 đến <span id="maxQuantity"></span>.</p>
                                </div>
                                <div class="pt-2 border-t border-gray-100">
                                    <div class="flex justify-between items-center">
                                        <span class="text-gray-700 font-medium text-sm">Tổng cộng:</span>
                                        <span id="totalPrice" class="text-blue-600 font-bold text-lg">0 đ</span>
                                    </div>
                                    <button type="button" class="add-to-cart-btn mt-3" id="modalAddToCart" disabled>
                                        <i class="bi bi-cart-plus mr-1"></i>Thêm vào giỏ
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Footer -->
    <footer class="footer">
        <div class="footer-container">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div class="footer-section">
                    <h3 class="footer-title">TheBoy Trà Sữa</h3>
                    <p class="text-sm text-gray-300 mb-4">Cửa hàng trà sữa tươi ngon, nguyên liệu chất lượng cao. Mang đến những ly trà sữa thơm ngon, đậm đà hương vị Việt Nam.</p>
                    <div class="flex items-center gap-4">
                        <i class="bi bi-geo-alt text-primary text-lg"></i>
                        <span class="text-sm">123 Đường ABC, Quận 1, TP. HCM</span>
                    </div>
                    <div class="flex items-center gap-4 mt-2">
                        <i class="bi bi-telephone text-primary text-lg"></i>
                        <span class="text-sm">+84 123 456 789</span>
                    </div>
                    <div class="flex items-center gap-4 mt-2">
                        <i class="bi bi-envelope text-primary text-lg"></i>
                        <span class="text-sm">theboy@trasua.vn</span>
                    </div>
                </div>
                <div class="footer-section">
                    <h3 class="footer-title">Menu</h3>
                    <a href="/" class="footer-link">Trang chủ</a>
                    <a href="/SanPham" class="footer-link">Sản phẩm</a>
                    <a href="/GioiThieu" class="footer-link">Giới thiệu</a>
                    <a href="/LienHe" class="footer-link">Liên hệ</a>
                    <a href="/KhuyenMai" class="footer-link">Khuyến mãi</a>
                </div>
                <div class="footer-section">
                    <h3 class="footer-title">Dịch vụ</h3>
                    <a href="/GiaoHang" class="footer-link">Giao hàng</a>
                    <a href="/ThanhToan" class="footer-link">Thanh toán</a>
                    <a href="/ChinhSach" class="footer-link">Chính sách</a>
                    <a href="/HoiDap" class="footer-link">Hỏi đáp</a>
                </div>
                <div class="footer-section">
                    <h3 class="footer-title">Theo dõi chúng tôi</h3>
                    <div class="footer-social">
                        <a href="https://facebook.com/theboytrasua" class="social-icon" target="_blank" rel="noopener">
                            <i class="bi bi-facebook"></i>
                        </a>
                        <a href="https://instagram.com/theboytrasua" class="social-icon" target="_blank" rel="noopener">
                            <i class="bi bi-instagram"></i>
                        </a>
                        <a href="https://tiktok.com/theboytrasua" class="social-icon" target="_blank" rel="noopener">
                            <i class="bi bi-tiktok"></i>
                        </a>
                        <a href="https://zalo.me/theboytrasua" class="social-icon" target="_blank" rel="noopener">
                            <i class="bi bi-chat-dots"></i>
                        </a>
                    </div>
                    <p class="text-sm text-gray-300 mt-4">Nhận ưu đãi đặc biệt qua app!</p>
                </div>
            </div>
            <div class="footer-bottom">
                <p>&copy; 2025 TheBoy Trà Sữa. Tất cả quyền được bảo lưu. | Thiết kế bởi xAI</p>
            </div>
        </div>
    </footer>
    <!-- Chat Bubble -->
    <div id="chatBubble" class="chat-bubble">
        <i class="bi bi-chat-dots text-2xl"></i>
    </div>
    <div id="chatFrame" class="chat-frame">
        <button id="closeChat" class="close-chat">
            <i class="bi bi-x"></i>
        </button>
        <iframe src="https://localhost:7081/chat/chatai" class="w-full h-full border-none"></iframe>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const modalElement = document.getElementById('productDetailsModal');
            const modal = new bootstrap.Modal(modalElement);
            const quantityInput = document.getElementById('quantityInput');
            const quantityError = document.getElementById('quantityError');
            const maxQuantitySpan = document.getElementById('maxQuantity');
            const addToCartBtn = document.getElementById('modalAddToCart');
            const sizeError = document.getElementById('sizeError');
            const iceError = document.getElementById('iceError');
            const sweetnessError = document.getElementById('sweetnessError');
            const decreaseQuantity = document.getElementById('decreaseQuantity');
            const increaseQuantity = document.getElementById('increaseQuantity');
            let userId = null;
            @if (Context.Request.Cookies["UserData"] != null)
            {
                        <text>
                        try {
                            const userData = JSON.parse('@Html.Raw(Context.Request.Cookies["UserData"])');
                            userId = userData.ID_Khach_Hang;
                            console.log('Parsed userId from UserData cookie:', userId);
                        } catch (e) {
                            console.error('Error parsing UserData cookie:', e);
                        }
                        </text>
            }
            else
            {
                        <text>
                        console.log('No UserData cookie found');
                        </text>
            }
            let productsData = [];
            let sizesData = [];
            // Cookie Management Functions
            function setCookie(name, value, days) {
                let expires = "";
                if (days) {
                    const date = new Date();
                    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                    expires = "; expires=" + date.toUTCString();
                }
                document.cookie = name + "=" + encodeURIComponent(JSON.stringify(value)) + expires + "; path=/";
            }
            function getCookie(name) {
                const nameEQ = name + "=";
                const cookies = document.cookie.split(';');
                for (let cookie of cookies) {
                    cookie = cookie.trim();
                    if (cookie.startsWith(nameEQ)) {
                        try {
                            return JSON.parse(decodeURIComponent(cookie.substring(nameEQ.length)));
                        } catch (e) {
                            console.error(`Error parsing cookie ${name}:`, e);
                            return null;
                        }
                    }
                }
                return null;
            }
            function deleteCookie(name) {
                document.cookie = name + "=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT";
            }
            function getGuestCart() {
                return getCookie('guestCart') || [];
            }
            function saveGuestCart(cart) {
                setCookie('guestCart', cart, 1); // Cookie expires in 1 day
            }
            function addToGuestCart(item) {
                const cart = getGuestCart();
                const cartItemId = Date.now().toString(); // Generate unique ID for guest cart item
                cart.push({ ...item, iD_GioHang_ChiTiet: cartItemId });
                saveGuestCart(cart);
            }
            function removeFromGuestCart(id) {
                const cart = getGuestCart();
                const updatedCart = cart.filter(item => item.iD_GioHang_ChiTiet !== id);
                saveGuestCart(updatedCart);
            }
            async function fetchSizes() {
                try {
                    const response = await fetch('https://localhost:7169/api/Size', {
                        method: 'GET',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    if (!response.ok) throw new Error(`Không thể lấy danh sách size: ${await response.text()}`);
                    sizesData = await response.json();
                    console.log('Fetched sizes:', sizesData);
                } catch (error) {
                    console.error('Lỗi fetch sizes:', error);
                    showAlert('Lỗi khi lấy danh sách size!', 'error');
                }
            }
            async function fetchProducts() {
                try {
                    const response = await fetch('https://localhost:7169/api/SanPham', {
                        method: 'GET',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    if (!response.ok) throw new Error(`Không thể lấy danh sách sản phẩm: ${await response.text()}`);
                    productsData = await response.json();
                    console.log('Fetched products:', productsData);
                } catch (error) {
                    console.error('Lỗi fetch products:', error);
                    showAlert('Lỗi khi lấy danh sách sản phẩm!', 'error');
                }
            }
            const chatBubble = document.getElementById('chatBubble');
            const chatFrame = document.getElementById('chatFrame');
            const closeChat = document.getElementById('closeChat');
            chatBubble.addEventListener('click', () => {
                chatFrame.style.display = chatFrame.style.display === 'none' ? 'block' : 'none';
            });
            closeChat.addEventListener('click', () => {
                chatFrame.style.display = 'none';
            });
            Promise.all([fetchProducts(), fetchSizes()]);
            let basePrice = 0;
            let selectedSize = null;
            let selectedSizePrice = 0;
            let selectedIce = null;
            let selectedSweetness = null;
            let selectedToppings = [];
            let maxQuantity = 1;
            function calculateTotalPrice() {
                let quantity = parseInt(quantityInput.value) || 1;
                if (quantity < 1) quantity = 1;
                if (quantity > maxQuantity) quantity = maxQuantity;
                quantityInput.value = quantity;
                let total = (basePrice + selectedSizePrice) * quantity;
                selectedToppings.forEach(topping => {
                    total += topping.price * quantity;
                });
                document.getElementById('totalPrice').textContent = total.toLocaleString('vi-VN') + ' đ';
            }
            function validateSelections() {
                const isSizeSelected = selectedSize !== null;
                const isIceSelected = selectedIce !== null;
                const isSweetnessSelected = selectedSweetness !== null;
                sizeError.classList.toggle('hidden', isSizeSelected);
                iceError.classList.toggle('hidden', isIceSelected);
                sweetnessError.classList.toggle('hidden', isSweetnessSelected);
                addToCartBtn.disabled = !(isSizeSelected && isIceSelected && isSweetnessSelected);
            }
            function showAlert(message, type) {
                const alert = document.createElement('div');
                alert.className = `alert-notification alert-${type} animate__animated animate__slideInRight fixed top-20 right-4 z-50 max-w-sm`;
                alert.innerHTML = `
                    <i class="bi bi-${type === 'success' ? 'check-circle-fill' : 'exclamation-circle-fill'} mr-2 text-lg"></i>
                    <div>${message}</div>
                    <button type="button" class="close-button" onclick="this.parentElement.remove()">
                        <i class="bi bi-x"></i>
                    </button>
                `;
                document.body.appendChild(alert);
                setTimeout(() => {
                    if (alert.parentElement) alert.remove();
                }, 3000);
            }
            document.querySelectorAll('.view-details-btn').forEach(btn => {
                btn.addEventListener('click', function (e) {
                    e.stopPropagation();
                    this.closest('.product-card, .most-purchased-card').click();
                });
            });
            document.getElementById('modalAddToCart').addEventListener('click', async function () {
                if (!selectedSize || !selectedIce || !selectedSweetness) {
                    validateSelections();
                    showAlert('Vui lòng chọn đầy đủ Kích thước, Lượng đá và Độ ngọt!', 'error');
                    return;
                }
                const productId = this.getAttribute('data-id');
                const quantity = parseInt(quantityInput.value) || 1;
                if (isNaN(quantity) || quantity < 1 || quantity > maxQuantity) {
                    quantityError.classList.remove('hidden');
                    return;
                } else {
                    quantityError.classList.add('hidden');
                }
                const product = productsData.find(p => p.iD_San_Pham === parseInt(productId));
                const sizeData = sizesData.find(s => s.iD_Size === parseInt(selectedSize));
                const iceData = product.luongDas.find(i => i.iD_LuongDa === parseInt(selectedIce));
                const sweetnessData = product.doNgots.find(s => s.iD_DoNgot === parseInt(selectedSweetness));
                const toppingData = selectedToppings.map(t => ({
                    iD_Topping: parseInt(t.id),
                    ten_Topping: product.toppings.find(top => top.iD_Topping === parseInt(t.id)).ten,
                    gia_Topping: parseFloat(t.price)
                }));
                const hasActivePromotion = product.khuyenMais && product.khuyenMais.some(km => new Date(km.ngay_Bat_Dau) <= new Date('@currentDate.ToString("o")') && new Date(km.ngay_Ket_Thuc) >= new Date('@currentDate.ToString("o")'));
                const requestData = {
                    iD_San_Pham: parseInt(productId),
                    ten_San_Pham: product.ten_San_Pham,
                    gia_Hien_Thi: hasActivePromotion ? product.khuyenMais.find(km => new Date(km.ngay_Bat_Dau) <= new Date('@currentDate.ToString("o")') && new Date(km.ngay_Ket_Thuc) >= new Date('@currentDate.ToString("o")')).gia_Giam : product.gia,
                    gia_Goc: product.gia,
                    hinh_Anh: product.hinh_Anh,
                    so_Luong: quantity,
                    iD_Size: selectedSize ? parseInt(selectedSize) : null,
                    ten_Size: sizeData ? sizeData.sizeName : '',
                    gia_Size: sizeData ? sizeData.gia : 0,
                    iD_LuongDa: selectedIce ? parseInt(selectedIce) : null,
                    ten_LuongDa: iceData ? iceData.ten_LuongDa : '',
                    iD_SanPham_DoNgot: selectedSweetness ? parseInt(selectedSweetness) : null,
                    ten_DoNgot: sweetnessData ? sweetnessData.muc_Do : '',
                    ghi_Chu: '',
                    toppings: toppingData,
                    khuyen_Mai: hasActivePromotion ? {
                        co_Khuyen_Mai: true,
                        ten_Khuyen_Mai: product.khuyenMais.find(km => new Date(km.ngay_Bat_Dau) <= new Date('@currentDate.ToString("o")') && new Date(km.ngay_Ket_Thuc) >= new Date('@currentDate.ToString("o")')).ten_Khuyen_Mai,
                        gia_Giam: product.khuyenMais.find(km => new Date(km.ngay_Bat_Dau) <= new Date('@currentDate.ToString("o")') && new Date(km.ngay_Ket_Thuc) >= new Date('@currentDate.ToString("o")')).gia_Giam
                    } : { co_Khuyen_Mai: false }
                };
                if (userId) {
                    // For logged-in users, send to API
                    try {
                        const response = await fetch('https://localhost:7169/api/Gio_Hang/add', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ ...requestData, iD_Khach_Hang: userId })
                        });
                        if (!response.ok) throw new Error(`Không thể thêm vào giỏ hàng: ${await response.text()}`);
                        showAlert(`Đã thêm "${document.getElementById('modalProductName').textContent}" vào giỏ hàng!`, 'success');
                        modal.hide();
                    } catch (error) {
                        console.error('Lỗi khi thêm vào giỏ hàng:', error);
                        showAlert('Lỗi khi thêm vào giỏ hàng!', 'error');
                    }
                } else {
                    // For guest users, save to cookie
                    addToGuestCart(requestData);
                    showAlert(`Đã thêm "${document.getElementById('modalProductName').textContent}" vào giỏ hàng!`, 'success');
                    modal.hide();
                }
            });
            decreaseQuantity.addEventListener('click', function () {
                let quantity = parseInt(quantityInput.value) || 1;
                if (quantity > 1) {
                    quantityInput.value = quantity - 1;
                    calculateTotalPrice();
                    validateSelections();
                }
                decreaseQuantity.disabled = quantity <= 1;
                increaseQuantity.disabled = quantity >= maxQuantity;
            });
            increaseQuantity.addEventListener('click', function () {
                let quantity = parseInt(quantityInput.value) || 1;
                if (quantity < maxQuantity) {
                    quantityInput.value = quantity + 1;
                    calculateTotalPrice();
                    validateSelections();
                }
                decreaseQuantity.disabled = quantity <= 1;
                increaseQuantity.disabled = quantity >= maxQuantity;
            });
            document.querySelectorAll('.product-card, .most-purchased-card').forEach(card => {
                card.addEventListener('click', async function () {
                    const productId = this.getAttribute('data-id');
                    try {
                        const response = await fetch(`https://localhost:7169/api/SanPham/${productId}`, {
                            method: 'GET',
                            headers: { 'Content-Type': 'application/json' }
                        });
                        if (!response.ok) throw new Error(`Không thể lấy thông tin sản phẩm: ${await response.text()}`);
                        const product = await response.json();
                        const currentDate = new Date('@currentDate.ToString("o")');
                        document.getElementById('modalProductName').textContent = product.ten_San_Pham;
                        let hasActivePromotion = false;
                        let discountedPrice = product.gia;
                        let promotionName = '';
                        if (product.khuyenMais && product.khuyenMais.length > 0) {
                            for (let km of product.khuyenMais) {
                                if (new Date(km.ngay_Bat_Dau) <= currentDate && new Date(km.ngay_Ket_Thuc) >= currentDate) {
                                    hasActivePromotion = true;
                                    discountedPrice = km.gia_Giam || product.gia;
                                    promotionName = km.ten_Khuyen_Mai;
                                    break;
                                }
                            }
                        }
                        basePrice = hasActivePromotion ? discountedPrice : product.gia;
                        const priceElement = document.getElementById('modalProductPrice');
                        const promotionBadge = document.getElementById('modalProductPromotionBadge');
                        if (hasActivePromotion) {
                            priceElement.innerHTML = `<span class="original-price text-sm mr-2">${product.gia.toLocaleString('vi-VN')} đ</span><span class="text-green-600">${discountedPrice.toLocaleString('vi-VN')} đ</span>`;
                            promotionBadge.textContent = promotionName;
                            promotionBadge.classList.remove('hidden');
                        } else {
                            priceElement.textContent = product.gia.toLocaleString('vi-VN') + ' đ';
                            promotionBadge.classList.add('hidden');
                        }
                        maxQuantity = product.so_Luong;
                        document.getElementById('modalProductQuantity').textContent = `Số lượng có sẵn: ${product.so_Luong}`;
                        document.getElementById('modalProductImageSrc').src = `https://localhost:7169${product.hinh_Anh}`;
                        document.getElementById('modalProductDescription').textContent = product.mo_Ta;
                        quantityInput.value = 1;
                        quantityInput.setAttribute('max', maxQuantity);
                        maxQuantitySpan.textContent = maxQuantity;
                        quantityError.classList.add('hidden');
                        selectedSize = null;
                        selectedSizePrice = 0;
                        selectedIce = null;
                        selectedSweetness = null;
                        selectedToppings = [];
                        sizeError.classList.add('hidden');
                        iceError.classList.add('hidden');
                        sweetnessError.classList.add('hidden');
                        addToCartBtn.disabled = true;
                        let sizesHtml = '';
                        if (product.sizes && product.sizes.length > 0) {
                            product.sizes.forEach(size => {
                                if (size.trang_Thai) {
                                    const sizeData = sizesData.find(s => s.iD_Size === size.iD_Size);
                                    const sizePrice = sizeData ? sizeData.gia : 0;
                                    sizesHtml += `
                                        <label class="cursor-pointer">
                                            <input type="radio" name="size" value="${size.sizeName}" class="sr-only" data-id="${size.iD_Size}" data-price="${sizePrice}">
                                            <span class="option-badge">${size.sizeName} (+${sizePrice.toLocaleString('vi-VN')} đ)</span>
                                        </label>`;
                                }
                            });
                        } else {
                            sizesHtml = '<span class="text-gray-500 text-xs">Không có kích thước</span>';
                        }
                        document.getElementById('modalProductSizes').innerHTML = sizesHtml;
                        let iceLevelsHtml = '';
                        if (product.luongDas && product.luongDas.length > 0) {
                            product.luongDas.forEach(ice => {
                                if (ice.trang_Thai) {
                                    iceLevelsHtml += `
                                        <label class="cursor-pointer">
                                            <input type="radio" name="ice" value="${ice.ten_LuongDa}" class="sr-only" data-id="${ice.iD_LuongDa}">
                                            <span class="option-badge">${ice.ten_LuongDa}</span>
                                        </label>`;
                                }
                            });
                        } else {
                            iceLevelsHtml = '<span class="text-gray-500 text-xs">Không có lượng đá</span>';
                        }
                        document.getElementById('modalProductIceLevels').innerHTML = iceLevelsHtml;
                        let sweetnessHtml = '';
                        if (product.doNgots && product.doNgots.length > 0) {
                            product.doNgots.forEach(sweet => {
                                if (sweet.trang_Thai) {
                                    sweetnessHtml += `
                                        <label class="cursor-pointer">
                                            <input type="radio" name="sweetness" value="${sweet.muc_Do}" class="sr-only" data-id="${sweet.iD_DoNgot}">
                                            <span class="option-badge">${sweet.muc_Do}</span>
                                        </label>`;
                                }
                            });
                        } else {
                            sweetnessHtml = '<span class="text-gray-500 text-xs">Không có độ ngọt</span>';
                        }
                        document.getElementById('modalProductSweetness').innerHTML = sweetnessHtml;
                        let toppingsHtml = '';
                        if (product.toppings && product.toppings.length > 0) {
                            product.toppings.forEach(topping => {
                                if (topping.trang_Thai && topping.so_Luong > 0) {
                                    toppingsHtml += `
                                        <label class="cursor-pointer">
                                            <input type="checkbox" name="topping" value="${topping.ten}" class="sr-only" data-id="${topping.iD_Topping}" data-price="${topping.gia}">
                                            <span class="option-badge">${topping.ten} (+${topping.gia.toLocaleString('vi-VN')} đ)</span>
                                        </label>`;
                                }
                            });
                        } else {
                            toppingsHtml = '<span class="text-gray-500 text-xs">Không có topping</span>';
                        }
                        document.getElementById('modalProductToppings').innerHTML = toppingsHtml;
                        document.querySelectorAll('input[name="size"], input[name="ice"], input[name="sweetness"], input[name="topping"]').forEach(input => {
                            input.addEventListener('change', function () {
                                const badge = this.nextElementSibling;
                                if (this.name === 'topping') {
                                    if (this.checked) {
                                        selectedToppings.push({ id: this.dataset.id, price: parseFloat(this.dataset.price) });
                                        badge.classList.add('selected');
                                    } else {
                                        selectedToppings = selectedToppings.filter(t => t.id !== this.dataset.id);
                                        badge.classList.remove('selected');
                                    }
                                } else {
                                    if (this.name === 'size') {
                                        selectedSize = this.dataset.id;
                                        selectedSizePrice = parseFloat(this.dataset.price) || 0;
                                    }
                                    if (this.name === 'ice') selectedIce = this.dataset.id;
                                    if (this.name === 'sweetness') selectedSweetness = this.dataset.id;
                                    document.querySelectorAll(`input[name="${this.name}"]`).forEach(radio => {
                                        const siblingBadge = radio.nextElementSibling;
                                        siblingBadge.classList.toggle('selected', radio.checked);
                                    });
                                }
                                calculateTotalPrice();
                                validateSelections();
                            });
                        });
                        quantityInput.addEventListener('input', function () {
                            calculateTotalPrice();
                            validateSelections();
                        });
                        calculateTotalPrice();
                        decreaseQuantity.disabled = true;
                        increaseQuantity.disabled = quantityInput.value >= maxQuantity;
                        document.getElementById('modalAddToCart').setAttribute('data-id', product.iD_San_Pham);
                        modal.show();
                    } catch (error) {
                        console.error('Lỗi khi lấy thông tin sản phẩm:', error);
                        showAlert('Lỗi khi tải thông tin sản phẩm!', 'error');
                    }
                });
            });
        });
    </script>
</body>
</html>