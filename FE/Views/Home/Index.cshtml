@model List<FE.Models.SanPham>
@{
    var activeProducts = Model.Where(p => p.Trang_Thai && p.So_Luong > 0).OrderByDescending(p => p.ID_San_Pham).ToList();
    // Xử lý múi giờ
    TimeZoneInfo vnTimeZone;
    try
    {
        vnTimeZone = TimeZoneInfo.FindSystemTimeZoneById("SE Asia Standard Time");
    }
    catch
    {
        vnTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Asia/Ho_Chi_Minh");
    }
    var currentDate = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, vnTimeZone);
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Menu Sản Phẩm</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <style>
        :root {
            --primary: #3B82F6;
            --primary-dark: #2563EB;
            --secondary: #F59E0B;
            --light-bg: #F8FAFC;
            --card-bg: #FFFFFF;
            --text-primary: #1F2937;
            --text-secondary: #6B7280;
            --success: #10B981;
            --danger: #EF4444;
        }

        body {
            font-family: 'Roboto', sans-serif;
            background-color: var(--light-bg);
            color: var(--text-primary);
        }

        .product-card {
            transition: all 0.2s ease;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            background: var(--card-bg);
            height: 100%;
            display: flex;
            flex-direction: column;
        }

            .product-card:hover {
                transform: translateY(-4px);
                box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
            }

        .product-image-container {
            position: relative;
            width: 100%;
            padding-top: 75%;
            overflow: hidden;
        }

        .product-image {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s ease;
        }

        .product-card:hover .product-image {
            transform: scale(1.03);
        }

        .promotion-badge {
            position: absolute;
            top: 8px;
            right: 8px;
            background: linear-gradient(135deg, var(--secondary), #F97316);
            color: white;
            font-size: 0.65rem;
            font-weight: 600;
            padding: 3px 8px;
            border-radius: 16px;
            z-index: 10;
        }

        .badge {
            display: inline-flex;
            align-items: center;
            padding: 0.3rem 0.6rem;
            border-radius: 9999px;
            font-size: 0.65rem;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .option-badge {
            background-color: #EFF6FF;
            color: var(--primary);
            border: 1px solid #DBEAFE;
            cursor: pointer;
        }

            .option-badge:hover,
            input[type="radio"]:checked + .option-badge,
            input[type="checkbox"]:checked + .option-badge {
                background-color: var(--primary);
                color: white;
            }

        input[type="radio"] {
            position: absolute;
            opacity: 0;
        }

        input[type="checkbox"] {
            margin-right: 0.5rem;
        }

        .cart-checkbox {
            margin-right: 0.5rem;
            width: 16px;
            height: 16px;
            cursor: pointer;
        }

        .add-to-cart-btn {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            transition: all 0.2s ease;
            box-shadow: 0 2px 4px rgba(59, 130, 246, 0.25);
        }

            .add-to-cart-btn:hover {
                transform: translateY(-1px);
                box-shadow: 0 4px 8px rgba(59, 130, 246, 0.35);
            }

            .add-to-cart-btn:disabled {
                background: #D1D5DB;
                cursor: not-allowed;
                box-shadow: none;
            }

        .search-container {
            position: relative;
            max-width: 500px;
            margin: 0 auto 1.5rem;
        }

        .search-input {
            width: 100%;
            padding: 0.75rem 1rem 0.75rem 2.5rem;
            border-radius: 50px;
            border: 1px solid #E5E7EB;
            background: white;
            font-size: 0.9rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.03);
            transition: all 0.2s ease;
        }

            .search-input:focus {
                outline: none;
                box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.25);
                border-color: var(--primary);
            }

        .search-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #9CA3AF;
            font-size: 0.9rem;
        }

        .search-button {
            position: absolute;
            right: 0.25rem;
            top: 50%;
            transform: translateY(-50%);
            background: var(--primary);
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 50px;
            font-size: 0.8rem;
            font-weight: 500;
            transition: all 0.2s ease;
        }

            .search-button:hover {
                background: var(--primary-dark);
            }

        .modal-content {
            border-radius: 16px;
            border: none;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
            background: linear-gradient(135deg, #FFFFFF 0%, #F9FAFB 100%);
        }

        .modal-header {
            border-bottom: 1px solid #E5E7EB;
            padding: 1rem 1.5rem;
        }

        .modal-body {
            padding: 1.5rem;
        }

        .modal-image-container {
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .option-group {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-top: 0.3rem;
        }

        .alert-notification {
            border-radius: 8px;
            padding: 0.75rem 1rem;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            animation: slideIn 0.4s ease-out;
        }

        .alert-success {
            background-color: #ECFDF5;
            color: #065F46;
            border-left: 3px solid #10B981;
        }

        .alert-error {
            background-color: #FEF2F2;
            color: #991B1B;
            border-left: 3px solid #EF4444;
        }

        .price-container {
            display: flex;
            align-items: center;
            flex-wrap: wrap;
            gap: 0.3rem;
            margin: 0.5rem 0;
        }

        .original-price {
            text-decoration: line-through;
            color: var(--text-secondary);
            font-size: 0.8rem;
        }

        .discounted-price {
            color: var(--danger);
            font-weight: 600;
            font-size: 1rem;
        }

        .regular-price {
            color: var(--primary);
            font-weight: 600;
            font-size: 1rem;
        }

        .section-title {
            font-size: 0.9rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--text-primary);
            display: flex;
            align-items: center;
            gap: 0.3rem;
        }

            .section-title i {
                font-size: 1rem;
                color: var(--primary);
            }

        .close-button {
            background: none;
            border: none;
            font-size: 1.2rem;
            color: var(--text-secondary);
            transition: all 0.2s ease;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
        }

            .close-button:hover {
                background-color: #F3F4F6;
                color: var(--text-primary);
            }

        .cart-container {
            position: sticky;
            top: 0.5rem;
            background: var(--card-bg);
            padding: 1rem;
            border-radius: 12px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            max-width: 280px;
            width: 100%;
            transition: all 0.2s ease;
        }

            .cart-container:hover {
                box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
            }

        .cart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.75rem;
        }

        .cart-title {
            font-size: 1rem;
            font-weight: 600;
            color: var(--text-primary);
        }

        .cart-item {
            display: flex;
            align-items: flex-start;
            padding: 0.5rem 0;
            border-bottom: 1px solid #E5E7EB;
            transition: all 0.2s ease;
        }

            .cart-item:hover {
                background-color: #F9FAFB;
            }

            .cart-item:last-child {
                border-bottom: none;
            }

        .cart-item-image {
            width: 48px;
            height: 48px;
            object-fit: cover;
            border-radius: 6px;
            margin-right: 0.75rem;
        }

        .cart-item-details {
            flex: 1;
        }

        .cart-item-name {
            font-size: 0.8rem;
            font-weight: 500;
            color: var(--text-primary);
        }

        .cart-item-options {
            font-size: 0.65rem;
            color: var(--text-secondary);
            margin-top: 0.2rem;
        }

        .cart-item-price {
            font-size: 0.8rem;
            font-weight: 500;
            color: var(--primary);
            margin-right: 0.5rem;
        }

        .cart-item-controls {
            display: flex;
            align-items: center;
            gap: 0.3rem;
        }

        .cart-item-remove {
            background: none;
            border: none;
            color: var(--danger);
            font-size: 0.8rem;
            cursor: pointer;
        }

            .cart-item-remove:hover {
                color: #B91C1C;
            }

        .cart-total {
            font-weight: 600;
            margin-top: 0.75rem;
            font-size: 0.9rem;
            color: var(--text-primary);
        }

        .cart-empty {
            color: var(--text-secondary);
            font-size: 0.8rem;
            text-align: center;
            padding: 0.75rem 0;
        }

        .cart-checkout-btn {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
            padding: 0.5rem;
            border-radius: 6px;
            text-align: center;
            margin-top: 0.75rem;
            font-size: 0.8rem;
            font-weight: 500;
            transition: all 0.2s ease;
        }

            .cart-checkout-btn:hover {
                transform: translateY(-1px);
                box-shadow: 0 2px 4px rgba(59, 130, 246, 0.25);
            }

        .quantity-input {
            width: 60px;
            padding: 0.3rem;
            border: 1px solid #E5E7EB;
            border-radius: 6px;
            font-size: 0.8rem;
            text-align: center;
        }

            .quantity-input:focus {
                outline: none;
                border-color: var(--primary);
                box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.25);
            }

        .error-message {
            color: var(--danger);
            font-size: 0.65rem;
            margin-top: 0.2rem;
            display: none;
        }
    </style>
</head>
<body class="min-h-screen bg-gray-50">
    <div class="container mx-auto py-6 px-3 sm:px-4 lg:px-6 responsive-container">
        <!-- Notifications -->
        @if (TempData["Success"] != null)
        {
            <div class="alert-notification alert-success animate__animated animate__fadeInDown">
                <i class="bi bi-check-circle-fill mr-2 text-lg"></i>
                <div class="flex-1">@TempData["Success"]</div>
                <button type="button" class="close-button" data-bs-dismiss="alert" aria-label="Close">
                    <i class="bi bi-x"></i>
                </button>
            </div>
        }
        @if (TempData["Error"] != null)
        {
            <div class="alert-notification alert-error animate__animated animate__fadeInDown">
                <i class="bi bi-exclamation-circle-fill mr-2 text-lg"></i>
                <div class="flex-1">@TempData["Error"]</div>
                <button type="button" class="close-button" data-bs-dismiss="alert" aria-label="Close">
                    <i class="bi bi-x"></i>
                </button>
            </div>
        }

        <!-- Header with search -->
        <div class="text-center mb-6">
            <h1 class="text-2xl md:text-3xl font-bold text-gray-800 mb-3">Hưng sẽ code ở trang này nhe home/index , Bạn có thể thêm chức năng check xem người dùng đã đăng nhập chưa nếu rồi thì tự động chuyển hướng đến /homekhachHang/index</h1>
            <p class="text-gray-600 text-sm max-w-xl mx-auto">Khám phá đồ uống tươi ngon</p>

            <!-- Search Bar -->
            <div class="search-container">
                <i class="bi bi-search search-icon responsive-search-icon"></i>
                <input type="text" id="searchInput" class="search-input responsive-search-input" placeholder="Tìm kiếm sản phẩm...">
                <button id="searchButton" class="search-button responsive-search-button">Tìm</button>
            </div>
        </div>

        <!-- Main content grid -->
        <div class="main-grid grid grid-cols-1 lg:grid-cols-4 gap-4">
            <!-- Product List -->
            <div class="lg:col-span-3">
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                    @foreach (var product in activeProducts)
                    {
                        bool hasActivePromotion = false;
                        decimal basePrice = product.Gia;
                        string promotionName = "";

                        if (product.KhuyenMais != null && product.KhuyenMais.Any())
                        {
                            foreach (var km in product.KhuyenMais)
                            {
                                if (currentDate >= km.Ngay_Bat_Dau && currentDate <= km.Ngay_Ket_Thuc)
                                {
                                    hasActivePromotion = true;
                                    basePrice = km.Gia_Giam ?? product.Gia;
                                    promotionName = km.Ten_Khuyen_Mai;
                                    break;
                                }
                            }
                        }

                        <div class="product-card animate__animated animate__fadeIn" data-name="@product.Ten_San_Pham.ToLower()" data-id="@product.ID_San_Pham">
                            <div class="product-image-container">
                                <img src="@("https://localhost:7169" + product.Hinh_Anh)" alt="@product.Ten_San_Pham" class="product-image" />
                                @if (hasActivePromotion)
                                {
                                    <div class="promotion-badge">Khuyến mãi</div>
                                }
                            </div>
                            <div class="p-3 flex flex-col flex-grow">
                                <h3 class="text-lg font-bold text-gray-800 mb-1">@product.Ten_San_Pham</h3>
                                <p class="text-gray-600 text-xs mb-2 flex-grow">@(product.Mo_Ta.Length > 80 ? product.Mo_Ta.Substring(0, 80) + "..." : product.Mo_Ta)</p>

                                <div class="price-container">
                                    @if (hasActivePromotion)
                                    {
                                        <span class="original-price">@string.Format("{0:N0} đ", product.Gia)</span>
                                        <span class="discounted-price">@string.Format("{0:N0} đ", basePrice)</span>
                                    }
                                    else
                                    {
                                        <span class="regular-price">@string.Format("{0:N0} đ", product.Gia)</span>
                                    }
                                </div>

                                <div class="mt-auto pt-2 flex justify-between items-center">
                                    <span class="text-xs text-gray-500">@product.So_Luong sẵn có</span>
                                    <button class="view-details-btn text-xs text-blue-600 font-medium hover:text-blue-800 transition">
                                        Chi tiết
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <!-- Empty state for search results -->
                <div id="noResults" class="hidden text-center py-8">
                    <i class="bi bi-search text-3xl text-gray-300 mb-3"></i>
                    <h3 class="text-lg font-medium text-gray-500">Không tìm thấy sản phẩm</h3>
                    <p class="text-gray-400 text-sm mt-1">Thử từ khóa khác</p>
                </div>
            </div>

            <!-- Cart Container -->
            <div class="lg:col-span-1">
                <div class="cart-container" id="cartContainer">
                    <div class="cart-header">
                        <h3 class="cart-title">Giỏ hàng</h3>
                    </div>
                    <div id="cartItems" class="cart-items"></div>
                    <div class="cart-total" id="cartTotal">Tổng cộng: 0 đ</div>
                    <button id="checkoutBtn" class="cart-checkout-btn">Thanh toán</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Product Details Modal -->
    <div class="modal fade" id="productDetailsModal" tabindex="-1" aria-labelledby="productDetailsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-md modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="text-lg font-bold text-gray-800" id="modalProductName"></h2>
                    <button type="button" class="close-button" data-bs-dismiss="modal" aria-label="Close">
                        <i class="bi bi-x"></i>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div class="modal-image-container">
                            <img id="modalProductImageSrc" src="" alt="" class="w-full h-60 object-cover" />
                        </div>
                        <div class="space-y-4">
                            <div>
                                <p class="text-gray-600 text-sm" id="modalProductDescription"></p>
                            </div>

                            <div class="price-container">
                                <span id="modalProductPrice" class="regular-price"></span>
                                <span id="modalProductPromotionBadge" class="badge bg-amber-100 text-amber-800 hidden"></span>
                            </div>

                            <div>
                                <p class="text-xs text-gray-500" id="modalProductQuantity"></p>
                            </div>

                            <form id="productOptionsForm" class="space-y-4">
                                <div>
                                    <h4 class="section-title"><i class="bi bi-rulers"></i> Kích thước <span class="text-red-500">*</span></h4>
                                    <div id="modalProductSizes" class="option-group"></div>
                                    <p id="sizeError" class="error-message">Vui lòng chọn kích thước</p>
                                </div>
                                <div>
                                    <h4 class="section-title"><i class="bi bi-droplet-half"></i> Lượng đá <span class="text-red-500">*</span></h4>
                                    <div id="modalProductIceLevels" class="option-group"></div>
                                    <p id="iceError" class="error-message">Vui lòng chọn lượng đá</p>
                                </div>
                                <div>
                                    <h4 class="section-title"><i class="bi bi-heart"></i> Độ ngọt <span class="text-red-500">*</span></h4>
                                    <div id="modalProductSweetness" class="option-group"></div>
                                    <p id="sweetnessError" class="error-message">Vui lòng chọn độ ngọt</p>
                                </div>
                                <div>
                                    <h4 class="section-title"><i class="bi bi-star"></i> Topping</h4>
                                    <div id="modalProductToppings" class="option-group"></div>
                                </div>
                                <div>
                                    <h4 class="section-title"><i class="bi bi-hash"></i> Số lượng</h4>
                                    <input type="number" id="quantityInput" class="quantity-input" min="1" value="1" required>
                                    <p id="quantityError" class="text-red-500 text-xs hidden">Số lượng từ 1 đến <span id="maxQuantity"></span>.</p>
                                </div>

                                <div class="pt-2 border-t border-gray-100">
                                    <div class="flex justify-between items-center">
                                        <span class="text-gray-700 font-medium text-sm">Tổng cộng:</span>
                                        <span id="totalPrice" class="text-blue-600 font-bold text-lg">0 đ</span>
                                    </div>
                                    <button type="button" class="add-to-cart-btn w-full mt-3 py-2 px-3 rounded-lg text-white font-medium text-sm" id="modalAddToCart" disabled>
                                        <i class="bi bi-cart-plus mr-1"></i>Thêm vào giỏ
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const searchInput = document.getElementById('searchInput');
            const searchButton = document.getElementById('searchButton');
            const productCards = document.querySelectorAll('.product-card');
            const noResults = document.getElementById('noResults');
            const modalElement = document.getElementById('productDetailsModal');
            const modal = new bootstrap.Modal(modalElement);
            const cartItemsContainer = document.getElementById('cartItems');
            const cartTotalElement = document.getElementById('cartTotal');
            const quantityInput = document.getElementById('quantityInput');
            const quantityError = document.getElementById('quantityError');
            const maxQuantitySpan = document.getElementById('maxQuantity');
            const addToCartBtn = document.getElementById('modalAddToCart');
            const sizeError = document.getElementById('sizeError');
            const iceError = document.getElementById('iceError');
            const sweetnessError = document.getElementById('sweetnessError');
            const checkoutBtn = document.getElementById('checkoutBtn');

            // Lấy userId từ cookie giống như trong Layout
            let userId = null;
            @if (Context.Request.Cookies["UserData"] != null)
            {
                        <text>
                        try {
                            const userData = JSON.parse('@Html.Raw(Context.Request.Cookies["UserData"])');
                            userId = userData.ID_Khach_Hang;
                            console.log('Parsed userId from UserData cookie:', userId);
                        } catch (e) {
                            console.error('Error parsing UserData cookie:', e);
                        }
                        </text>
            }
            else
            {
                        <text>
                        console.log('No UserData cookie found');
                        </text>
            }

            let productsData = [];

            // Fetch all products for checkout check
            async function fetchProducts() {
                try {
                    const response = await fetch('https://localhost:7169/api/SanPham', {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    if (!response.ok) {
                        const errorText = await response.text();
                        throw new Error(`Không thể lấy danh sách sản phẩm: ${errorText}`);
                    }
                    productsData = await response.json();
                    console.log('Fetched products:', productsData);
                } catch (error) {
                    console.error('Lỗi fetch products:', error);
                    showAlert('Lỗi khi lấy danh sách sản phẩm!', 'error');
                }
            }

            fetchProducts();

            // View details buttons
            document.querySelectorAll('.view-details-btn').forEach((btn, index) => {
                btn.addEventListener('click', function(e) {
                    e.stopPropagation();
                    const card = this.closest('.product-card');
                    card.click();
                });
            });

            function filterProducts() {
                const searchTerm = searchInput.value.toLowerCase().trim();
                let visibleCount = 0;

                productCards.forEach(card => {
                    const name = card.getAttribute('data-name');
                    if (name.includes(searchTerm)) {
                        card.style.display = 'block';
                        card.classList.add('animate__fadeIn');
                        visibleCount++;
                    } else {
                        card.style.display = 'none';
                    }
                });

                if (visibleCount === 0 && searchTerm !== '') {
                    noResults.classList.remove('hidden');
                    noResults.classList.add('animate__fadeIn');
                } else {
                    noResults.classList.add('hidden');
                }
            }

            searchButton.addEventListener('click', filterProducts);
            searchInput.addEventListener('keyup', function (e) {
                if (e.key === 'Enter') filterProducts();
            });

            let basePrice = 0;
            let selectedSize = null;
            let selectedIce = null;
            let selectedSweetness = null;
            let selectedToppings = [];
            let maxQuantity = 1;

            function calculateTotalPrice() {
                let quantity = parseInt(quantityInput.value) || 1;
                if (quantity < 1) quantity = 1;
                if (quantity > maxQuantity) quantity = maxQuantity;
                quantityInput.value = quantity;

                let total = basePrice * quantity;
                selectedToppings.forEach(topping => {
                    total += topping.price * quantity;
                });
                document.getElementById('totalPrice').textContent = total.toLocaleString('vi-VN') + ' đ';
            }

            function validateSelections() {
                const isSizeSelected = selectedSize !== null;
                const isIceSelected = selectedIce !== null;
                const isSweetnessSelected = selectedSweetness !== null;

                sizeError.style.display = isSizeSelected ? 'none' : 'block';
                iceError.style.display = isIceSelected ? 'none' : 'block';
                sweetnessError.style.display = isSweetnessSelected ? 'none' : 'block';

                addToCartBtn.disabled = !(isSizeSelected && isIceSelected && isSweetnessSelected);
            }

            function showAlert(message, type) {
                const alert = document.createElement('div');
                alert.className = `alert-notification alert-${type} animate__animated animate__slideInRight fixed top-4 right-4 z-50 max-w-sm`;
                alert.innerHTML = `
                    <i class="bi bi-${type === 'success' ? 'check-circle-fill' : 'exclamation-circle-fill'} mr-2 text-lg"></i>
                    <div>${message}</div>
                    <button type="button" class="close-button" onclick="this.parentElement.remove()">
                        <i class="bi bi-x"></i>
                    </button>
                `;
                document.body.appendChild(alert);
                setTimeout(() => {
                    if (alert.parentElement) {
                        alert.remove();
                    }
                }, 3000);
            }

            async function fetchCart() {
                if (!userId) {
                    console.log('No userId, showing login message');
                    cartItemsContainer.innerHTML = '<p class="cart-empty">Vui lòng đăng nhập để xem giỏ hàng.</p>';
                    cartTotalElement.textContent = 'Tổng cộng: 0 đ';
                    return;
                }

                console.log('Fetching cart for userId:', userId);
                try {
                    const response = await fetch(`https://localhost:7169/api/Gio_Hang/${userId}`, {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        const errorText = await response.text();
                        console.error('Error response from fetchCart:', errorText);
                        throw new Error(`Không thể lấy dữ liệu giỏ hàng: ${errorText}`);
                    }

                    const cartData = await response.json();
                    console.log('Cart data received:', cartData);
                    displayCart(cartData);
                } catch (error) {
                    console.error('Lỗi khi lấy giỏ hàng:', error);
                    cartItemsContainer.innerHTML = '<p class="cart-empty text-red-500">Lỗi khi tải giỏ hàng.</p>';
                    cartTotalElement.textContent = 'Tổng cộng: 0 đ';
                }
            }

            function displayCart(cartData) {
                console.log('Rendering cart items...');
                cartItemsContainer.innerHTML = '';
                let cartTotal = 0;

                if (!cartData.chi_Tiet_Gio_Hang || cartData.chi_Tiet_Gio_Hang.length === 0) {
                    console.log('Cart is empty');
                    cartItemsContainer.innerHTML = '<p class="cart-empty">Giỏ hàng trống.</p>';
                    cartTotalElement.textContent = 'Tổng cộng: 0 đ';
                    return;
                }

                cartData.chi_Tiet_Gio_Hang.forEach(item => {
                    console.log('Creating cart item:', item.ten_San_Pham);
                    const toppingTotal = item.toppings ? item.toppings.reduce((sum, topping) => sum + (topping.gia_Topping || 0), 0) : 0;
                    const itemTotal = (item.gia_Hien_Thi + toppingTotal) * item.so_Luong;

                    const itemElement = document.createElement('div');
                    itemElement.className = 'cart-item';
                    itemElement.dataset.itemData = JSON.stringify(item);
                    itemElement.innerHTML = `
                        <input type="checkbox" class="cart-checkbox" checked data-id="${item.iD_GioHang_ChiTiet}">
                        <img src="https://localhost:7169${item.hinh_Anh || '/images/products/default.jpg'}" alt="${item.ten_San_Pham}" class="cart-item-image">
                        <div class="cart-item-details">
                            <div class="cart-item-name">${item.ten_San_Pham}</div>
                            <div class="cart-item-options">
                                ${item.ten_Size ? `Kích thước: ${item.ten_Size}<br>` : ''}
                                ${item.ten_LuongDa ? `Lượng đá: ${item.ten_LuongDa}<br>` : ''}
                                ${item.ten_DoNgot ? `Độ ngọt: ${item.ten_DoNgot}<br>` : ''}
                                ${item.toppings && item.toppings.length > 0 ? `Topping: ${item.toppings.map(t => `${t.ten_Topping} (+${t.gia_Topping.toLocaleString('vi-VN')} đ)`).join(', ')}<br>` : ''}
                                ${item.ghi_Chu ? `Ghi chú: ${item.ghi_Chu}` : ''}
                            </div>
                            <div class="price-container">
                                ${item.khuyen_Mai ? `
                                    <span class="original-price">${(item.gia_Goc + toppingTotal).toLocaleString('vi-VN')} đ</span>
                                    <span class="discounted-price">${(item.gia_Hien_Thi + toppingTotal).toLocaleString('vi-VN')} đ</span>
                                ` : `
                                    <span class="regular-price">${(item.gia_Hien_Thi + toppingTotal).toLocaleString('vi-VN')} đ</span>
                                `}
                            </div>
                        </div>
                        <div class="cart-item-controls">
                            <span class="cart-item-price">x${item.so_Luong}</span>
                            <button class="cart-item-remove" data-id="${item.iD_GioHang_ChiTiet}">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    `;
                    cartItemsContainer.appendChild(itemElement);

                    cartTotal += itemTotal;
                });

                console.log('Cart items rendered, total:', cartTotal);
                cartTotalElement.textContent = `Tổng cộng: ${cartTotal.toLocaleString('vi-VN')} đ`;

                document.querySelectorAll('.cart-checkbox').forEach(checkbox => {
                    console.log('Attaching event to checkbox:', checkbox.dataset.id);
                    checkbox.addEventListener('change', function () {
                        const item = JSON.parse(this.closest('.cart-item').dataset.itemData);
                        if (this.checked) {
                            console.log('Sản phẩm được chọn:', item);
                        } else {
                            console.log('Sản phẩm bị bỏ chọn:', item);
                        }
                        updateCartTotal();
                    });
                });

                document.querySelectorAll('.cart-item-remove').forEach(btn => {
                    btn.addEventListener('click', async function () {
                        const id = this.dataset.id;
                        await removeCartItem(id);
                    });
                });
            }

            function updateCartTotal() {
                let cartTotal = 0;
                document.querySelectorAll('.cart-item').forEach(item => {
                    const checkbox = item.querySelector('.cart-checkbox');
                    if (checkbox.checked) {
                        const itemData = JSON.parse(item.dataset.itemData);
                        const toppingTotal = itemData.toppings ? itemData.toppings.reduce((sum, topping) => sum + (topping.gia_Topping || 0), 0) : 0;
                        const itemTotal = (itemData.gia_Hien_Thi + toppingTotal) * itemData.so_Luong;
                        cartTotal += itemTotal;
                    }
                });
                console.log('Updating cart total:', cartTotal);
                cartTotalElement.textContent = `Tổng cộng: ${cartTotal.toLocaleString('vi-VN')} đ`;
            }

            async function removeCartItem(id) {
                try {
                    const response = await fetch(`https://localhost:7169/api/Gio_Hang/delete/${id}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        const errorText = await response.text();
                        throw new Error(`Không thể xóa sản phẩm: ${errorText}`);
                    }

                    showAlert('Đã xóa sản phẩm khỏi giỏ hàng!', 'success');
                    fetchCart();
                } catch (error) {
                    console.error('Lỗi khi xóa sản phẩm:', error);
                    showAlert('Lỗi khi xóa sản phẩm!', 'error');
                }
            }

            async function checkCartAvailability() {
                try {
                    const cartResponse = await fetch(`https://localhost:7169/api/Gio_Hang/${userId}`, {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (!cartResponse.ok) {
                        throw new Error('Không thể lấy giỏ hàng');
                    }

                    const cartData = await cartResponse.json();
                    if (!cartData.chi_Tiet_Gio_Hang || cartData.chi_Tiet_Gio_Hang.length === 0) {
                        showAlert('Giỏ hàng trống, vui lòng thêm sản phẩm!', 'error');
                        return false;
                    }

                    const checkedItems = Array.from(document.querySelectorAll('.cart-checkbox:checked')).map(checkbox => {
                        return JSON.parse(checkbox.closest('.cart-item').dataset.itemData);
                    });

                    if (checkedItems.length === 0) {
                        showAlert('Vui lòng chọn ít nhất một sản phẩm để thanh toán!', 'error');
                        return false;
                    }

                    for (const item of checkedItems) {
                        const productResponse = await fetch(`https://localhost:7169/api/SanPham/${item.iD_San_Pham}`, {
                            method: 'GET',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        });

                        if (!productResponse.ok) {
                            throw new Error(`Không thể lấy thông tin sản phẩm ${item.ten_San_Pham}`);
                        }

                        const product = await productResponse.json();
                        if (product.so_Luong < item.so_Luong) {
                            showAlert(`Sản phẩm ${item.ten_San_Pham} chỉ còn ${product.so_Luong} đơn vị, không đủ số lượng ${item.so_Luong}. Vui lòng chọn lại!`, 'error');
                            return false;
                        }

                        if (item.toppings && item.toppings.length > 0) {
                            for (const topping of item.toppings) {
                                const productTopping = product.toppings.find(t => t.iD_Topping === topping.iD_Topping);
                                if (!productTopping || productTopping.so_Luong < item.so_Luong) {
                                    showAlert(`Topping ${topping.ten_Topping} chỉ còn ${productTopping ? productTopping.so_Luong : 0} đơn vị, không đủ số lượng ${item.so_Luong}. Vui lòng chọn lại!`, 'error');
                                    return false;
                                }
                            }
                        }
                    }

                    return true;
                } catch (error) {
                    console.error('Lỗi khi kiểm tra giỏ hàng:', error);
                    showAlert('Lỗi khi kiểm tra giỏ hàng, vui lòng thử lại!', 'error');
                    return false;
                }
            }

            checkoutBtn.addEventListener('click', async function () {
                if (!userId) {
                    showAlert('Vui lòng đăng nhập để thanh toán!', 'error');
                    return;
                }

                const isAvailable = await checkCartAvailability();
                if (isAvailable) {
                    showAlert('Đang chuyển hướng đến trang thanh toán...', 'success');
                    setTimeout(() => {
                        window.location.href = '/Cart';
                    }, 1000);
                }
            });

            document.getElementById('modalAddToCart').addEventListener('click', async function () {
                if (!userId) {
                    showAlert('Vui lòng đăng nhập để thêm vào giỏ hàng!', 'error');
                    return;
                }

                if (!selectedSize || !selectedIce || !selectedSweetness) {
                    validateSelections();
                    showAlert('Vui lòng chọn đầy đủ Kích thước, Lượng đá và Độ ngọt!', 'error');
                    return;
                }

                const productId = this.getAttribute('data-id');
                const quantity = parseInt(quantityInput.value) || 1;

                if (isNaN(quantity) || quantity < 1 || quantity > maxQuantity) {
                    quantityError.classList.remove('hidden');
                    return;
                } else {
                    quantityError.classList.add('hidden');
                }

                const requestData = {
                    iD_Khach_Hang: userId,
                    iD_San_Pham: parseInt(productId),
                    iD_Size: selectedSize ? parseInt(selectedSize) : null,
                    iD_SanPham_DoNgot: selectedSweetness ? parseInt(selectedSweetness) : null,
                    iD_LuongDa: selectedIce ? parseInt(selectedIce) : null,
                    iD_Toppings: selectedToppings.map(t => parseInt(t.id)),
                    so_Luong: quantity,
                    ghi_Chu: ''
                };

                try {
                    const response = await fetch('https://localhost:7169/api/Gio_Hang/add', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(requestData)
                    });

                    if (!response.ok) {
                        const errorText = await response.text();
                        throw new Error(`Không thể thêm vào giỏ hàng: ${errorText}`);
                    }

                    const responseData = await response.json();
                    showAlert(`Đã thêm "${document.getElementById('modalProductName').textContent}" vào giỏ hàng!`, 'success');
                    fetchCart();
                    modal.hide();
                } catch (error) {
                    console.error('Lỗi khi thêm vào giỏ hàng:', error);
                    showAlert('Lỗi khi thêm vào giỏ hàng!', 'error');
                }
            });

            fetchCart();

            document.querySelectorAll('.product-card').forEach(card => {
                card.addEventListener('click', async function () {
                    const productId = this.getAttribute('data-id');
                    try {
                        const response = await fetch(`https://localhost:7169/api/SanPham/${productId}`, {
                            method: 'GET',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        });

                        if (!response.ok) {
                            const errorText = await response.text();
                            throw new Error(`Không thể lấy thông tin sản phẩm: ${errorText}`);
                        }

                        const product = await response.json();
                        const currentDate = new Date('@currentDate.ToString("o")');

                        document.getElementById('modalProductName').textContent = product.ten_San_Pham;

                        let hasActivePromotion = false;
                        let discountedPrice = product.gia;
                        let promotionName = '';

                        if (product.khuyenMais && product.khuyenMais.length > 0) {
                            for (let km of product.khuyenMais) {
                                if (new Date(km.ngay_Bat_Dau) <= currentDate && new Date(km.ngay_Ket_Thuc) >= currentDate) {
                                    hasActivePromotion = true;
                                    discountedPrice = km.gia_Giam || product.gia;
                                    promotionName = km.ten_Khuyen_Mai;
                                    break;
                                }
                            }
                        }

                        basePrice = hasActivePromotion ? discountedPrice : product.gia;
                        const priceElement = document.getElementById('modalProductPrice');
                        const promotionBadge = document.getElementById('modalProductPromotionBadge');

                        if (hasActivePromotion) {
                            priceElement.innerHTML = `<span class="original-price mr-1">${product.gia.toLocaleString('vi-VN')} đ</span> ${discountedPrice.toLocaleString('vi-VN')} đ`;
                            priceElement.className = 'discounted-price';
                            promotionBadge.textContent = promotionName;
                            promotionBadge.classList.remove('hidden');
                        } else {
                            priceElement.textContent = product.gia.toLocaleString('vi-VN') + ' đ';
                            priceElement.className = 'regular-price';
                            promotionBadge.classList.add('hidden');
                        }

                        maxQuantity = product.so_Luong;
                        document.getElementById('modalProductQuantity').textContent = `Số lượng có sẵn: ${product.so_Luong}`;
                        document.getElementById('modalProductImageSrc').src = `https://localhost:7169${product.hinh_Anh}`;
                        document.getElementById('modalProductDescription').textContent = product.mo_Ta;
                        quantityInput.value = 1;
                        quantityInput.setAttribute('max', maxQuantity);
                        maxQuantitySpan.textContent = maxQuantity;
                        quantityError.classList.add('hidden');

                        selectedSize = null;
                        selectedIce = null;
                        selectedSweetness = null;
                        selectedToppings = [];

                        sizeError.style.display = 'none';
                        iceError.style.display = 'none';
                        sweetnessError.style.display = 'none';
                        addToCartBtn.disabled = true;

                        let sizesHtml = '';
                        if (product.sizes && product.sizes.length > 0) {
                            product.sizes.forEach(size => {
                                if (size.trang_Thai) {
                                    sizesHtml += `
                                        <label class="cursor-pointer">
                                            <input type="radio" name="size" value="${size.sizeName}" class="sr-only" data-id="${size.iD_Size}">
                                            <span class="option-badge">${size.sizeName}</span>
                                        </label>`;
                                }
                            });
                        } else {
                            sizesHtml = '<span class="text-gray-500 text-xs">Không có kích thước</span>';
                        }
                        document.getElementById('modalProductSizes').innerHTML = sizesHtml;

                        let iceLevelsHtml = '';
                        if (product.luongDas && product.luongDas.length > 0) {
                            product.luongDas.forEach(ice => {
                                if (ice.trang_Thai) {
                                    iceLevelsHtml += `
                                        <label class="cursor-pointer">
                                            <input type="radio" name="ice" value="${ice.ten_LuongDa}" class="sr-only" data-id="${ice.iD_LuongDa}">
                                            <span class="option-badge">${ice.ten_LuongDa}</span>
                                        </label>`;
                                }
                            });
                        } else {
                            iceLevelsHtml = '<span class="text-gray-500 text-xs">Không có lượng đá</span>';
                        }
                        document.getElementById('modalProductIceLevels').innerHTML = iceLevelsHtml;

                        let sweetnessHtml = '';
                        if (product.doNgots && product.doNgots.length > 0) {
                            product.doNgots.forEach(sweet => {
                                if (sweet.trang_Thai) {
                                    sweetnessHtml += `
                                        <label class="cursor-pointer">
                                            <input type="radio" name="sweetness" value="${sweet.muc_Do}" class="sr-only" data-id="${sweet.iD_DoNgot}">
                                            <span class="option-badge">${sweet.muc_Do}</span>
                                        </label>`;
                                }
                            });
                        } else {
                            sweetnessHtml = '<span class="text-gray-500 text-xs">Không có độ ngọt</span>';
                        }
                        document.getElementById('modalProductSweetness').innerHTML = sweetnessHtml;

                        let toppingsHtml = '';
                        if (product.toppings && product.toppings.length > 0) {
                            product.toppings.forEach(topping => {
                                if (topping.trang_Thai && topping.so_Luong > 0) {
                                    toppingsHtml += `
                                        <label class="cursor-pointer">
                                            <input type="checkbox" name="topping" value="${topping.ten}" class="sr-only" data-id="${topping.iD_Topping}" data-price="${topping.gia}">
                                            <span class="option-badge">${topping.ten} (+${topping.gia.toLocaleString('vi-VN')} đ)</span>
                                        </label>`;
                                }
                            });
                        } else {
                            toppingsHtml = '<span class="text-gray-500 text-xs">Không có topping</span>';
                        }
                        document.getElementById('modalProductToppings').innerHTML = toppingsHtml;

                        document.querySelectorAll('input[name="size"], input[name="ice"], input[name="sweetness"], input[name="topping"]').forEach(input => {
                            input.addEventListener('change', function () {
                                if (this.name === 'topping') {
                                    if (this.checked) {
                                        selectedToppings.push({ id: this.dataset.id, price: parseFloat(this.dataset.price) });
                                    } else {
                                        selectedToppings = selectedToppings.filter(t => t.id !== this.dataset.id);
                                    }
                                } else {
                                    if (this.name === 'size') selectedSize = this.dataset.id;
                                    if (this.name === 'ice') selectedIce = this.dataset.id;
                                    if (this.name === 'sweetness') selectedSweetness = this.dataset.id;

                                    document.querySelectorAll(`input[name="${this.name}"]`).forEach(radio => {
                                        const badge = radio.nextElementSibling;
                                        if (radio.checked) {
                                            badge.classList.add('bg-blue-600', 'text-white');
                                        } else {
                                            badge.classList.remove('bg-blue-600', 'text-white');
                                        }
                                    });
                                }

                                if (this.name === 'topping') {
                                    const badge = this.nextElementSibling;
                                    if (this.checked) {
                                        badge.classList.add('bg-blue-600', 'text-white');
                                    } else {
                                        badge.classList.remove('bg-blue-600', 'text-white');
                                    }
                                }

                                calculateTotalPrice();
                                validateSelections();
                            });
                        });

                        quantityInput.addEventListener('input', function () {
                            calculateTotalPrice();
                            validateSelections();
                        });

                        calculateTotalPrice();

                        document.getElementById('modalAddToCart').setAttribute('data-id', product.iD_San_Pham);

                        modal.show();
                    } catch (error) {
                        console.error('Lỗi khi lấy thông tin sản phẩm:', error);
                        showAlert('Lỗi khi tải thông tin sản phẩm!', 'error');
                    }
                });
            });
        });
    </script>
</body>
</html>