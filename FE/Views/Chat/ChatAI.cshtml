@* @{
    Layout = null; // Không kế thừa layout
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>AI Chat Fullscreen</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .chat-widget * {
            box-sizing: border-box;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        }

        .chat-widget {
            isolation: isolate;
        }
    </style>
</head>
<body class="m-0 p-0">
    <div id="chat-box" class="chat-widget fixed inset-0 w-screen h-screen bg-white shadow-2xl flex flex-col z-50">
        <!-- Header -->
        <div class="bg-gradient-to-r from-blue-500 to-indigo-600 text-white p-4">
            <h3 class="text-lg font-semibold">Chat Với AI THEBOY</h3>
        </div>

        <!-- Messages -->
        <div id="chat-messages" class="flex-1 overflow-y-auto p-4 space-y-3 bg-gray-50 relative">
            <div id="loading-indicator" class="hidden absolute inset-0 flex items-center justify-center bg-gray-50 bg-opacity-75">
                <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div>
            </div>
        </div>

        <!-- Input -->
        <div class="p-4 bg-white border-t border-gray-200">
            <div class="flex items-center gap-2">
                <input type="text" id="chat-input"
                       class="flex-1 p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                       placeholder="Nhập tin nhắn..." />
                <button onclick="sendMessage()"
                        class="bg-blue-500 text-white p-2 rounded-lg hover:bg-blue-600 transition">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                              d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                    </svg>
                </button>
            </div>
        </div>
    </div>

    <script>
        const widgetConfig = {
            apiUrl: 'https://localhost:7169/api/AIChat/chat'
        };

        async function sendMessage() {
            const input = document.getElementById('chat-input');
            const query = input.value.trim();
            if (!query) return;

            appendMessage(query, 'user');
            input.value = '';

            const loadingIndicator = document.getElementById('loading-indicator');
            loadingIndicator.classList.remove('hidden');

            try {
                const response = await fetch(widgetConfig.apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ query })
                });

                if (!response.ok) throw new Error('API call failed');
                const data = await response.json();

                await new Promise(resolve => setTimeout(resolve, 1000));
                loadingIndicator.classList.add('hidden');

                for (const text of data.textResponses) {
                    await typeMessage(text, 'bot');
                }
            } catch (error) {
                loadingIndicator.classList.add('hidden');
                await typeMessage('⚠️ Lỗi: Không thể kết nối tới dịch vụ AI', 'bot');
            }
        }

        function appendMessage(text, sender) {
            const messagesDiv = document.getElementById('chat-messages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `p-3 rounded-lg max-w-[80%] break-words ${sender === 'user' ? 'bg-blue-100 ml-auto' : 'bg-gray-200 mr-auto'}`;
            messageDiv.textContent = text;
            messagesDiv.appendChild(messageDiv);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        async function typeMessage(text, sender) {
            const messagesDiv = document.getElementById('chat-messages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `p-3 rounded-lg max-w-[80%] break-words ${sender === 'user' ? 'bg-blue-100 ml-auto' : 'bg-gray-200 mr-auto'}`;
            messagesDiv.appendChild(messageDiv);

            for (let i = 0; i < text.length; i++) {
                messageDiv.textContent += text[i];
                messagesDiv.scrollTop = messagesDiv.scrollHeight;
                await new Promise(resolve => setTimeout(resolve, 20));
            }
        }

        document.getElementById('chat-input').addEventListener('keypress', function (e) {
            if (e.key === 'Enter') sendMessage();
        });
    </script>
</body>
</html>
 *@













@{
    Layout = null; // Không kế thừa layout
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>AI Chat Fullscreen</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .chat-widget * {
            box-sizing: border-box;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        }

        .chat-widget {
            isolation: isolate;
        }
    </style>
</head>
<body class="m-0 p-0">
    <div id="chat-box" class="chat-widget fixed inset-0 w-screen h-screen bg-white shadow-2xl flex flex-col z-50">
        <!-- Header -->
        <div class="bg-gradient-to-r from-blue-500 to-indigo-600 text-white p-4">
            <h3 class="text-lg font-semibold">Bot TheBoy </h3>
        </div>

        <!-- Messages -->
        <div id="chat-messages" class="flex-1 overflow-y-auto p-4 space-y-3 bg-gray-50 relative">
            <div id="loading-indicator" class="hidden absolute inset-0 flex items-center justify-center bg-gray-50 bg-opacity-75">
                <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div>
            </div>
        </div>

        <!-- Input -->
        <div class="p-4 bg-white border-t border-gray-200">
            <div class="flex items-center gap-2">
                <input type="text" id="chat-input"
                       class="flex-1 p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                       placeholder="Nhập tin nhắn..." />
                <button id="send-button" onclick="sendMessage()"
                        class="bg-blue-500 text-white p-2 rounded-lg hover:bg-blue-600 transition">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                              d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                    </svg>
                </button>
            </div>
        </div>
    </div>

    <script>
        const widgetConfig = {
            apiUrl: 'https://localhost:7169/api/AIChat/chat'
        };

        async function sendMessage() {
            const input = document.getElementById('chat-input');
            const sendButton = document.getElementById('send-button');
            const query = input.value.trim();
            if (!query) return;

            appendMessage(query, 'user');
            input.value = '';

            const loadingIndicator = document.getElementById('loading-indicator');
            loadingIndicator.classList.remove('hidden');
            input.disabled = true;
            sendButton.disabled = true;

            try {
                const response = await fetch(widgetConfig.apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ query })
                });

                if (!response.ok) throw new Error('API call failed');
                const data = await response.json();

                await new Promise(resolve => setTimeout(resolve, 1000));
                loadingIndicator.classList.add('hidden');

                for (const text of data.textResponses) {
                    await typeMessage(text, 'bot');
                }
            } catch (error) {
                loadingIndicator.classList.add('hidden');
                await typeMessage('⚠️ Lỗi: Không thể kết nối tới dịch vụ AI', 'bot');
            } finally {
                input.disabled = false;
                sendButton.disabled = false;
            }
        }

        function appendMessage(text, sender) {
            const messagesDiv = document.getElementById('chat-messages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `p-3 rounded-lg max-w-[80%] break-words ${sender === 'user' ? 'bg-blue-100 ml-auto' : 'bg-gray-200 mr-auto'}`;
            messageDiv.textContent = text;
            messagesDiv.appendChild(messageDiv);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        async function typeMessage(text, sender) {
            const messagesDiv = document.getElementById('chat-messages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `p-3 rounded-lg max-w-[80%] break-words ${sender === 'user' ? 'bg-blue-100 ml-auto' : 'bg-gray-200 mr-auto'}`;
            messagesDiv.appendChild(messageDiv);

            for (let i = 0; i < text.length; i++) {
                messageDiv.textContent += text[i];
                messagesDiv.scrollTop = messagesDiv.scrollHeight;
                await new Promise(resolve => setTimeout(resolve, 20));
            }
        }

        document.getElementById('chat-input').addEventListener('keypress', function (e) {
            if (e.key === 'Enter') sendMessage();
        });

        async function initChat() {
            await typeMessage("Bạn cần mình tìm kiếm sản phẩm gì nào ?", 'bot');
            await typeMessage("Trò chuyện 1 xíu để cùng tìm kiếm nhé", 'bot');
        }

        initChat();
    </script>
</body>
</html>