@* @model FE.Models.DonHangTK

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Chi Tiết Đơn Hàng";

    var statusList = new List<object>
    {
        new { Key = "Chua_Xac_Nhan", Value = "Chờ xác nhận" },
        new { Key = "Chua_Thanh_Toan", Value = "Chưa Thanh Toán" },
        new { Key = "Da_Xac_Nhan", Value = "Đã xác nhận" },
        new { Key = "Dang_Xu_Ly", Value = "Đang xử lý" },
        new { Key = "Dang_Giao_Hang", Value = "Vận chuyển" },
        new { Key = "Hoan_Thanh", Value = "Hoàn thành" },
        new { Key = "Huy_Don", Value = "Đã huỷ" }
    };

    var statusDisplay = statusList.ToDictionary(s => (string)s.GetType().GetProperty("Key").GetValue(s), s => (string)s.GetType().GetProperty("Value").GetValue(s));

    var statuses = new[] { "Chua_Xac_Nhan", "Da_Xac_Nhan", "Dang_Xu_Ly", "Dang_Giao_Hang", "Hoan_Thanh" };
    var currentStatusIndex = Array.IndexOf(statuses, Model.Trang_Thai?.Trim());
    var isCancelled = Model.Trang_Thai?.Trim() == "Huy_Don";

    var diaChiRaw = Model.DiaChi?.Dia_Chi ?? "";
}

<div class="container mt-5">
    <a class="btn btn-sm btn-outline-secondary mb-3" href="@Url.Action("Index")">← Quay lại</a>

    <h2 class="text-center mb-4 fw-bold">Chi Tiết Đơn Hàng #@Model.Ma_Hoa_Don</h2>

    <!-- Order Progress Timeline -->
    <div class="mb-5">
        <h4 class="mb-3">Tiến Trình Đơn Hàng</h4>
        <div class="order-tracker @(isCancelled ? "canceled" : "")">
            @for (int i = 0; i < statuses.Length; i++)
            {
                var isActive = !isCancelled && i <= currentStatusIndex;
                var isPending = !isCancelled && i > currentStatusIndex;
                var state = isCancelled ? "" : (i < currentStatusIndex ? "done" : (i == currentStatusIndex ? "active" : ""));
                var iconClass = i switch
                {
                    0 => "fas fa-clock",
                    1 => "fas fa-check-circle",
                    2 => "fas fa-coffee",
                    3 => "fas fa-truck",
                    4 => "fas fa-flag-checkered",
                    _ => ""
                };
                var statusColor = isCancelled ? "text-danger" : isActive ? "text-success" : "text-secondary";

                <div class="order-step @state">
                    <div class="dot timeline-icon @statusColor bg-light border @statusColor">
                        @if (isCancelled)
                        {
                            <i class="fas fa-times-circle"></i>
                        }
                        else if (i < currentStatusIndex)
                        {
                            <i class="@iconClass"></i>
                        }
                        else
                        {
                            <span>@(i + 1)</span>
                        }
                    </div>
                    <div class="label fw-bold @statusColor">@statusDisplay[statuses[i]]</div>
                    @if (i < statuses.Length - 1)
                    {
                        <div class="order-connector @(isActive ? "active" : (isPending ? "pending" : ""))"></div>
                    }
                </div>
            }
            @if (isCancelled)
            {
                <div class="order-step canceled">
                    <div class="dot timeline-icon text-danger bg-light border text-danger">
                        <i class="fas fa-times-circle"></i>
                    </div>
                    <div class="label fw-bold text-danger">Đã huỷ</div>
                </div>
                <div class="text-danger fw-bold">Đơn hàng đã huỷ. @(Model.LyDoHuyDon ?? "Không có lý do")</div>
            }
        </div>
    </div>

    <!-- Order Details Card -->
    <div class="card mb-4 shadow-sm border-0 rounded">
        <div class="card-header bg-info text-white">
            <h5 class="mb-0">Thông Tin Đơn Hàng</h5>
        </div>
        <div class="card-body">
            <p><strong>Mã Đơn Hàng:</strong> @Model.Ma_Hoa_Don</p>
            <p><strong>Ngày Tạo:</strong> @Model.Ngay_Tao.ToString("dd/MM/yyyy HH:mm")</p>
            <p><strong>Tổng Tiền:</strong> @Model.Tong_Tien.ToString("N0") VNĐ</p>
            <p><strong>Phí Ship:</strong> @Model.Phi_Ship.ToString("N0") VNĐ</p>
            <p><strong>Tổng Tiền Thanh Toán:</strong> @(Model.Tong_Tien + Model.Phi_Ship).ToString("N0") VNĐ</p>
            <p><strong>Phương Thức Thanh Toán:</strong> @Model.Phuong_Thuc_Thanh_Toan</p>
            <p>
                <strong>Địa Chỉ:</strong>
                <span id="fullAddress" class="text-muted">
                    <span class="spinner-border spinner-border-sm me-1" role="status" id="addressLoading"></span>
                    Đang tải địa chỉ...
                </span>
            </p>
            <p><strong>Địa Chỉ chi tiết:</strong> @(string.IsNullOrEmpty(Model.DiaChi?.Ghi_Chu) ? "Không có" : Model.DiaChi.Ghi_Chu)</p>
            <p><strong>Ghi Chú Đơn Hàng:</strong> @(string.IsNullOrEmpty(Model.Ghi_Chu) ? "Không có" : Model.Ghi_Chu)</p>
        </div>
    </div>

    <!-- Order Items Card -->
    <div class="card mb-4 shadow-sm border-0 rounded">
        <div class="card-header bg-info text-white">
            <h5 class="mb-0">Chi Tiết Sản Phẩm</h5>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Sản Phẩm</th>
                            <th>Size</th>
                            <th>Mức Độ</th>
                            <th>Lượng Đá</th>
                            <th>Topping</th>
                            <th>Số Lượng</th>
                            <th>Tổng Tiền</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.ChiTiets)
                        {
                            <tr>
                                <td>@item.Ten_San_Pham</td>
                                <td>@item.SizeName</td>
                                <td>@item.Muc_Do</td>
                                <td>@item.Ten_LuongDa</td>
                                <td>@(item.Toppings.Any() ? string.Join(", ", item.Toppings.Select(t => $"{t.Ten} (+{t.Gia:N0} VNĐ)")) : "Không có")</td>
                                <td>@item.So_Luong</td>
                                <td>@item.Tong_Tien.ToString("N0") VNĐ</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Vouchers Card -->
    @if (Model.Vouchers.Any())
    {
        <div class="card mb-4 shadow-sm border-0 rounded">
            <div class="card-header bg-info text-white">
                <h5 class="mb-0">Voucher</h5>
            </div>
            <div class="card-body">
                <ul class="list-group list-group-flush">
                    @foreach (var voucher in Model.Vouchers)
                    {
                        <li class="list-group-item">@voucher.Ten (Giảm: @voucher.Gia_Tri_Giam%)</li>
                    }
                </ul>
            </div>
        </div>
    }

    <a class="btn btn-secondary mt-3" asp-action="Index">Quay lại</a>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script>
        $(document).ready(function () {
            const diaChiRaw = '@diaChiRaw';
            console.log('diaChiRaw:', diaChiRaw); // Debug: In giá trị dia_Chi
            console.log('Split parts:', diaChiRaw ? diaChiRaw.split(',').map(p => p.trim()) : []); // Debug: In mảng sau split

            if (diaChiRaw) {
                const parts = diaChiRaw.split(',').map(p => p.trim());
                console.log('Parts length:', parts.length); // Debug: Số phần tử

                // Hardcode provinceId vì chỉ bán ở Hà Nội
                const provinceId = '201';

                if (parts.length >= 2 && parts.every(p => !isNaN(p))) { // Chỉ cần wardCode và districtId
                    const wardCode = parts[0]; // 11008
                    const districtId = parts[1]; // 1482
                    console.log('Parsed:', { wardCode, districtId, provinceId }); // Debug: Các giá trị parse

                    const baseUrl = 'https://localhost:7169/api/Shipping';

                    // Gọi API districts/201
                    $.ajax({
                        url: `${baseUrl}/districts/${provinceId}`,
                        type: 'GET',
                        dataType: 'json',
                        success: function(districtsData) {
                            console.log('Districts API response:', districtsData); // Debug: Response districts
                            let districtName = 'Unknown District';
                            if (districtsData && districtsData.data) {
                                const district = districtsData.data.find(d => String(d.DistrictID) === districtId);
                                if (district) {
                                    districtName = district.DistrictName;
                                }
                            }

                            // Gọi API wards/districtId
                            $.ajax({
                                url: `${baseUrl}/wards/${districtId}`,
                                type: 'GET',
                                dataType: 'json',
                                success: function(wardsData) {
                                    console.log('Wards API response:', wardsData); // Debug: Response wards
                                    let wardName = 'Unknown Ward';
                                    if (wardsData && wardsData.data) {
                                        const ward = wardsData.data.find(w => w.WardCode === wardCode);
                                        if (ward) {
                                            wardName = ward.WardName;
                                        }
                                    }

                                    // Tạo fullAddress (không có addressDetail vì chỉ có mã)
                                    const fullAddress = `${wardName}, ${districtName}, Hà Nội`;
                                    console.log('Full address:', fullAddress); // Debug: Địa chỉ cuối
                                    $('#fullAddress').html(fullAddress);
                                    $('#addressLoading').hide();
                                },
                                error: function(xhr) {
                                    console.error('Lỗi gọi API wards:', xhr); // Debug: Lỗi wards
                                    $('#fullAddress').html('Lỗi tải địa chỉ chi tiết');
                                    $('#addressLoading').hide();
                                }
                            });
                        },
                        error: function(xhr) {
                            console.error('Lỗi gọi API districts:', xhr); // Debug: Lỗi districts
                            $('#fullAddress').html('Lỗi tải địa chỉ chi tiết');
                            $('#addressLoading').hide();
                        }
                    });
                } else {
                    console.log('Invalid address format. Parts:', parts); // Debug: Format sai
                    $('#fullAddress').html(diaChiRaw || 'Địa chỉ không hợp lệ');
                    $('#addressLoading').hide();
                }
            } else {
                console.log('No address provided'); // Debug: Không có địa chỉ
                $('#fullAddress').html('Không có địa chỉ');
                $('#addressLoading').hide();
            }
        });
    </script>
}

<style>
    .order-tracker {
        display: flex;
        justify-content: space-between;
        align-items: center;
        position: relative;
        padding: 20px 0;
    }

    .order-step {
        text-align: center;
        flex: 1;
        position: relative;
        z-index: 1;
    }

    .dot {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 10px;
        font-size: 1.2rem;
        border: 2px solid;
    }

    .order-step.done .dot {
        background-color: #28a745;
        color: white;
        border-color: #28a745;
    }

    .order-step.active .dot {
        background-color: #007bff;
        color: white;
        border-color: #007bff;
    }

    .order-step.canceled .dot {
        background-color: #dc3545;
        color: white;
        border-color: #dc3545;
    }

    .label {
        font-size: 0.9rem;
    }

    .order-connector {
        position: absolute;
        top: 20px;
        left: 50%;
        width: calc(100% - 40px);
        height: 2px;
        background: #dee2e6;
        z-index: -1;
    }

        .order-connector.active {
            background: #28a745;
        }

        .order-connector.pending {
            background: #6c757d;
        }

    .text-success {
        color: #28a745 !important;
    }

    .text-danger {
        color: #dc3545 !important;
    }

    .text-secondary {
        color: #6c757d !important;
    }

    .timeline-icon {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 10px;
        font-size: 1.2rem;
        border-width: 2px;
    }

    .card-header.bg-info {
        background-color: #17a2b8 !important;
    }
</style> *@





@* 



@model FE.Models.DonHangTK

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Chi Tiết Đơn Hàng";

    var statusList = new List<object>
    {
        new { Key = "Chua_Xac_Nhan", Value = "Chờ xác nhận" },
        new { Key = "Chua_Thanh_Toan", Value = "Chưa Thanh Toán" },
        new { Key = "Da_Xac_Nhan", Value = "Đã xác nhận" },
        new { Key = "Dang_Xu_Ly", Value = "Đang xử lý" },
        new { Key = "Dang_Giao_Hang", Value = "Vận chuyển" },
        new { Key = "Hoan_Thanh", Value = "Hoàn thành" },
        new { Key = "Huy_Don", Value = "Đã huỷ" }
    };

    var statusDisplay = statusList.ToDictionary(s => (string)s.GetType().GetProperty("Key").GetValue(s), s => (string)s.GetType().GetProperty("Value").GetValue(s));

    var statuses = new[] { "Chua_Xac_Nhan", "Da_Xac_Nhan", "Dang_Xu_Ly", "Dang_Giao_Hang", "Hoan_Thanh" };
    var currentStatusIndex = Array.IndexOf(statuses, Model.Trang_Thai?.Trim());
    var isCancelled = Model.Trang_Thai?.Trim() == "Huy_Don";

    var diaChiRaw = Model.DiaChi?.Dia_Chi ?? "";
}

<div class="container mt-3">
    <a class="btn btn-sm btn-outline-secondary mb-3 shadow-sm" href="@Url.Action("Index")">← Quay lại</a>

    <h2 class="text-center mb-4 fw-bold text-primary">Chi Tiết Đơn Hàng #@Model.Ma_Hoa_Don</h2>

    <!-- Order Progress Timeline -->
    <div class="card mb-4 shadow-lg border-0 rounded-3">
        <div class="card-header bg-gradient text-white fw-semibold">
            <h4 class="mb-0">Tiến Trình Đơn Hàng</h4>
        </div>
        <div class="card-body">
            <div class="order-tracker @(isCancelled ? "canceled" : "")">
                @for (int i = 0; i < statuses.Length; i++)
                {
                    var isActive = !isCancelled && i <= currentStatusIndex;
                    var isPending = !isCancelled && i > currentStatusIndex;
                    var state = isCancelled ? "" : (i < currentStatusIndex ? "done" : (i == currentStatusIndex ? "active" : ""));
                    var iconClass = i switch
                    {
                        0 => "fas fa-clock",
                        1 => "fas fa-check-circle",
                        2 => "fas fa-coffee",
                        3 => "fas fa-truck",
                        4 => "fas fa-flag-checkered",
                        _ => ""
                    };
                    var statusColor = isCancelled ? "text-danger" : isActive ? "text-success" : "text-secondary";

                    <div class="order-step @state">
                        <div class="dot timeline-icon @statusColor bg-light border @statusColor">
                            @if (isCancelled)
                            {
                                <i class="fas fa-times-circle"></i>
                            }
                            else if (i < currentStatusIndex)
                            {
                                <i class="@iconClass"></i>
                            }
                            else
                            {
                                <span>@(i + 1)</span>
                            }
                        </div>
                        <div class="label fw-bold @statusColor">@statusDisplay[statuses[i]]</div>
                        @if (i < statuses.Length - 1)
                        {
                            <div class="order-connector @(isActive ? "active" : (isPending ? "pending" : ""))"></div>
                        }
                    </div>
                }
                @if (isCancelled)
                {
                    <div class="order-step canceled">
                        <div class="dot timeline-icon text-danger bg-light border text-danger">
                            <i class="fas fa-times-circle"></i>
                        </div>
                        <div class="label fw-bold text-danger">Đã huỷ</div>
                    </div>
                    <div class="text-danger fw-bold mt-2">Đơn hàng đã huỷ. @(Model.LyDoHuyDon ?? "Không có lý do")</div>
                }
            </div>
        </div>
    </div>

    <!-- Order Details Card -->
    <div class="card mb-4 shadow-lg border-0 rounded-3">
        <div class="card-header bg-primary text-white fw-semibold">
            <h5 class="mb-0">Thông Tin Đơn Hàng</h5>
        </div>
        <div class="card-body bg-light">
            <p class="mb-2"><strong>Mã Đơn Hàng:</strong> @Model.Ma_Hoa_Don</p>
            <p class="mb-2"><strong>Ngày Tạo:</strong> @Model.Ngay_Tao.ToString("dd/MM/yyyy HH:mm")</p>
            <p class="mb-2"><strong>Tổng Tiền:</strong> @Model.Tong_Tien.ToString("N0") VNĐ</p>
            <p class="mb-2"><strong>Phí Ship:</strong> @Model.Phi_Ship.ToString("N0") VNĐ</p>
            <p class="mb-2"><strong>Tổng Tiền Thanh Toán:</strong> @(Model.Tong_Tien + Model.Phi_Ship) VNĐ</p>
            <p class="mb-2"><strong>Phương Thức Thanh Toán:</strong> @Model.Phuong_Thuc_Thanh_Toan</p>
            <p class="mb-2">
                <strong>Địa Chỉ:</strong>
                <span id="fullAddress" class="text-muted">
                    <span class="spinner-border spinner-border-sm me-1" role="status" id="addressLoading"></span>
                    Đang tải địa chỉ...
                </span>
            </p>
            <p class="mb-2"><strong>Ghi Chú Địa Chỉ:</strong> @(string.IsNullOrEmpty(Model.DiaChi?.Ghi_Chu) ? "Không có" : Model.DiaChi.Ghi_Chu)</p>
            <p class="mb-2"><strong>Ghi Chú Đơn Hàng:</strong> @(string.IsNullOrEmpty(Model.Ghi_Chu) ? "Không có" : Model.Ghi_Chu)</p>
        </div>
    </div>

    <!-- Order Items Card -->
    <div class="card mb-4 shadow-lg border-0 rounded-3">
        <div class="card-header bg-primary text-white fw-semibold">
            <h5 class="mb-0">Chi Tiết Sản Phẩm</h5>
        </div>
        <div class="card-body bg-light">
            <div class="table-responsive">
                <table class="table table-hover table-striped mb-0">
                    <thead class="bg-light">
                        <tr>
                            <th>Sản Phẩm</th>
                            <th>Size</th>
                            <th>Mức Độ</th>
                            <th>Lượng Đá</th>
                            <th>Topping</th>
                            <th>Số Lượng</th>
                            <th>Tổng Tiền</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.ChiTiets)
                        {
                            <tr>
                                <td>@item.Ten_San_Pham</td>
                                <td>@item.SizeName</td>
                                <td>@item.Muc_Do</td>
                                <td>@item.Ten_LuongDa</td>
                                <td>@(item.Toppings.Any() ? string.Join(", ", item.Toppings.Select(t => $"{t.Ten} (+{t.Gia:N0} VNĐ)")) : "Không có")</td>
                                <td>@item.So_Luong</td>
                                <td>@item.Tong_Tien.ToString("N0") VNĐ</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Vouchers Card -->
    @if (Model.Vouchers.Any())
    {
        <div class="card mb-4 shadow-lg border-0 rounded-3">
            <div class="card-header bg-primary text-white fw-semibold">
                <h5 class="mb-0">Voucher</h5>
            </div>
            <div class="card-body bg-light">
                <ul class="list-group list-group-flush">
                    @foreach (var voucher in Model.Vouchers)
                    {
                        <li class="list-group-item">@voucher.Ten (Giảm: @voucher.Gia_Tri_Giam%)</li>
                    }
                </ul>
            </div>
        </div>
    }
    <br/>
    <br/>
    <br/>
    <br/>
    <br/>
    <br/>
    <br/>
  

    <a class="btn btn-secondary mt-3 shadow-sm" asp-action="Index">Quay lại</a>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script>
        $(document).ready(function () {
            const diaChiRaw = '@diaChiRaw';
            console.log('diaChiRaw:', diaChiRaw);
            console.log('Split parts:', diaChiRaw ? diaChiRaw.split(',').map(p => p.trim()) : []);

            if (diaChiRaw) {
                const parts = diaChiRaw.split(',').map(p => p.trim());
                console.log('Parts length:', parts.length);

                const provinceId = '201'; // Hardcode vì chỉ Hà Nội

                if (parts.length >= 2 && parts.every(p => !isNaN(p))) {
                    const wardCode = parts[0]; // 11008
                    const districtId = parts[1]; // 1482
                    console.log('Parsed:', { wardCode, districtId, provinceId });

                    const baseUrl = 'https://localhost:7169/api/Shipping';

                    $.ajax({
                        url: `${baseUrl}/districts/${provinceId}`,
                        type: 'GET',
                        dataType: 'json',
                        success: function(districtsData) {
                            console.log('Districts API response:', districtsData);
                            let districtName = 'Unknown District';
                            if (districtsData && districtsData.data) {
                                const district = districtsData.data.find(d => String(d.DistrictID) === districtId);
                                if (district) {
                                    districtName = district.DistrictName;
                                }
                            }

                            $.ajax({
                                url: `${baseUrl}/wards/${districtId}`,
                                type: 'GET',
                                dataType: 'json',
                                success: function(wardsData) {
                                    console.log('Wards API response:', wardsData);
                                    let wardName = 'Unknown Ward';
                                    if (wardsData && wardsData.data) {
                                        const ward = wardsData.data.find(w => w.WardCode === wardCode);
                                        if (ward) {
                                            wardName = ward.WardName;
                                        }
                                    }

                                    const fullAddress = `${wardName}, ${districtName}, Hà Nội`;
                                    console.log('Full address:', fullAddress);
                                    $('#fullAddress').html(fullAddress);
                                    $('#addressLoading').hide();
                                },
                                error: function(xhr) {
                                    console.error('Lỗi gọi API wards:', xhr);
                                    $('#fullAddress').html('Lỗi tải địa chỉ chi tiết');
                                    $('#addressLoading').hide();
                                }
                            });
                        },
                        error: function(xhr) {
                            console.error('Lỗi gọi API districts:', xhr);
                            $('#fullAddress').html('Lỗi tải địa chỉ chi tiết');
                            $('#addressLoading').hide();
                        }
                    });
                } else {
                    console.log('Invalid address format. Parts:', parts);
                    $('#fullAddress').html(diaChiRaw || 'Địa chỉ không hợp lệ');
                    $('#addressLoading').hide();
                }
            } else {
                console.log('No address provided');
                $('#fullAddress').html('Không có địa chỉ');
                $('#addressLoading').hide();
            }
        });
    </script>
}

<style>
    .bg-gradient {
        background: linear-gradient(135deg, #007bff, #00c4ff);
    }

    .card {
        transition: box-shadow 0.3s ease;
    }

        .card:hover {
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

    .table th, .table td {
        vertical-align: middle;
        padding: 12px;
    }

    .table tbody tr:hover {
        background-color: #f8f9fa;
    }

    .order-tracker {
        display: flex;
        justify-content: space-between;
        align-items: center;
        position: relative;
        padding: 15px 0;
    }

    .order-step {
        text-align: center;
        flex: 1;
        position: relative;
        z-index: 1;
    }

    .dot {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 10px;
        font-size: 1.2rem;
        border: 2px solid;
    }

    .order-step.done .dot {
        background-color: #28a745;
        color: white;
        border-color: #28a745;
    }

    .order-step.active .dot {
        background-color: #007bff;
        color: white;
        border-color: #007bff;
    }

    .order-step.canceled .dot {
        background-color: #dc3545;
        color: white;
        border-color: #dc3545;
    }

    .label {
        font-size: 0.9rem;
    }

    .order-connector {
        position: absolute;
        top: 20px;
        left: 50%;
        width: calc(100% - 40px);
        height: 2px;
        background: #dee2e6;
        z-index: -1;
    }

        .order-connector.active {
            background: #28a745;
        }

        .order-connector.pending {
            background: #6c757d;
        }

    .text-success {
        color: #28a745 !important;
    }

    .text-danger {
        color: #dc3545 !important;
    }

    .text-secondary {
        color: #6c757d !important;
    }

    .timeline-icon {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 10px;
        font-size: 1.2rem;
        border-width: 2px;
    }

    .card-header.bg-primary {
        background-color: #007bff !important;
    }

    .btn-secondary {
        transition: background-color 0.3s ease;
    }

        .btn-secondary:hover {
            background-color: #5a6268;
        }

    body {
        background-color: #f4f6f9;
    }
</style> *@












@model FE.Models.DonHangTK

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Chi Tiết Đơn Hàng";

    var statusList = new List<object>
    {
        new { Key = "Chua_Xac_Nhan", Value = "Chờ xác nhận" },
        new { Key = "Chua_Thanh_Toan", Value = "Chưa Thanh Toán" },
        new { Key = "Da_Xac_Nhan", Value = "Đã xác nhận" },
        new { Key = "Dang_Xu_Ly", Value = "Đang xử lý" },
        new { Key = "Dang_Giao_Hang", Value = "Vận chuyển" },
        new { Key = "Hoan_Thanh", Value = "Hoàn thành" },
        new { Key = "Huy_Don", Value = "Đã huỷ" }
    };

    var statusDisplay = statusList.ToDictionary(s => (string)s.GetType().GetProperty("Key").GetValue(s), s => (string)s.GetType().GetProperty("Value").GetValue(s));

    var statuses = new[] { "Chua_Xac_Nhan", "Da_Xac_Nhan", "Dang_Xu_Ly", "Dang_Giao_Hang", "Hoan_Thanh" };
    var currentStatusIndex = Array.IndexOf(statuses, Model.Trang_Thai?.Trim());
    var isCancelled = Model.Trang_Thai?.Trim() == "Huy_Don";

    var diaChiRaw = Model.DiaChi?.Dia_Chi ?? "";
}

<div class="container mt-3">
    <a class="btn btn-sm btn-outline-secondary mb-3 shadow-sm" href="@Url.Action("Index")">← Quay lại</a>

    <h2 class="text-center mb-4 fw-bold text-primary">Chi Tiết Đơn Hàng #@Model.Ma_Hoa_Don</h2>

    <!-- Order Progress Timeline -->
    <div class="card mb-4 shadow-lg border-0 rounded-3">
        <div class="card-header bg-gradient text-white fw-semibold">
            <h4 class="mb-0">Tiến Trình Đơn Hàng</h4>
        </div>
        <div class="card-body">
            <div class="order-tracker @(isCancelled ? "canceled" : "")">
                @for (int i = 0; i < statuses.Length; i++)
                {
                    var isActive = !isCancelled && i <= currentStatusIndex;
                    var isPending = !isCancelled && i > currentStatusIndex;
                    var state = isCancelled ? "" : (i < currentStatusIndex ? "done" : (i == currentStatusIndex ? "active" : ""));
                    var iconClass = i switch
                    {
                        0 => "fas fa-clock",
                        1 => "fas fa-check-circle",
                        2 => "fas fa-coffee",
                        3 => "fas fa-truck",
                        4 => "fas fa-flag-checkered",
                        _ => ""
                    };
                    var statusColor = isCancelled ? "text-danger" : isActive ? "text-success" : "text-secondary";

                    <div class="order-step @state">
                        <div class="dot timeline-icon @statusColor bg-light border @statusColor">
                            @if (isCancelled)
                            {
                                <i class="fas fa-times-circle"></i>
                            }
                            else if (i < currentStatusIndex)
                            {
                                <i class="@iconClass"></i>
                            }
                            else
                            {
                                <span>@(i + 1)</span>
                            }
                        </div>
                        <div class="label fw-bold @statusColor">@statusDisplay[statuses[i]]</div>
                        @if (i < statuses.Length - 1)
                        {
                            <div class="order-connector @(isActive ? "active" : (isPending ? "pending" : ""))"></div>
                        }
                    </div>
                }
                @if (isCancelled)
                {
                    <div class="order-step canceled">
                        <div class="dot timeline-icon text-danger bg-light border text-danger">
                            <i class="fas fa-times-circle"></i>
                        </div>
                        <div class="label fw-bold text-danger">Đã huỷ</div>
                    </div>
                    <div class="text-danger fw-bold mt-2">Đơn hàng đã huỷ. @(Model.LyDoHuyDon ?? "Không có lý do")</div>
                }
            </div>
        </div>
    </div>

    <!-- Order Details Card -->
    <div class="card mb-4 shadow-lg border-0 rounded-3">
        <div class="card-header bg-primary text-white fw-semibold">
            <h5 class="mb-0">Thông Tin Đơn Hàng</h5>
        </div>
        <div class="card-body bg-light">
            <p class="mb-2"><strong>Mã Đơn Hàng:</strong> @Model.Ma_Hoa_Don</p>
            <p class="mb-2"><strong>Ngày Tạo:</strong> @Model.Ngay_Tao.ToString("dd/MM/yyyy HH:mm")</p>
            <p class="mb-2"><strong>Tổng Tiền:</strong> @Model.Tong_Tien.ToString("N0") VNĐ</p>
            <p class="mb-2"><strong>Phí Ship:</strong> @Model.Phi_Ship.ToString("N0") VNĐ</p>
            <p class="mb-2"><strong>Tổng Tiền Thanh Toán:</strong> @(Model.Tong_Tien + Model.Phi_Ship) VNĐ</p>
            <p class="mb-2"><strong>Phương Thức Thanh Toán:</strong> @Model.Phuong_Thuc_Thanh_Toan</p>
            <p class="mb-2">
                <strong>Địa Chỉ:</strong>
                <span id="fullAddress" class="text-muted">
                    <span class="spinner-border spinner-border-sm me-1" role="status" id="addressLoading"></span>
                    Đang tải địa chỉ...
                </span>
            </p>
            <p class="mb-2"><strong>Ghi Chú Địa Chỉ:</strong> @(string.IsNullOrEmpty(Model.DiaChi?.Ghi_Chu) ? "Không có" : Model.DiaChi.Ghi_Chu)</p>
            <p class="mb-2"><strong>Ghi Chú Đơn Hàng:</strong> @(string.IsNullOrEmpty(Model.Ghi_Chu) ? "Không có" : Model.Ghi_Chu)</p>
        </div>
    </div>

    <!-- Order Items Card -->
    <div class="card mb-4 shadow-lg border-0 rounded-3">
        <div class="card-header bg-primary text-white fw-semibold">
            <h5 class="mb-0">Chi Tiết Sản Phẩm</h5>
        </div>
        <div class="card-body bg-light">
            <div class="table-responsive">
                <table class="table table-hover table-striped mb-0">
                    <thead class="bg-light">
                        <tr>
                            <th>Sản Phẩm</th>
                            <th>Size</th>
                            <th>Mức Độ</th>
                            <th>Lượng Đá</th>
                            <th>Topping</th>
                            <th>Số Lượng</th>
                            <th>Tổng Tiền</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.ChiTiets)
                        {
                            <tr>
                                <td>@item.Ten_San_Pham</td>
                                <td>@item.SizeName</td>
                                <td>@item.Muc_Do</td>
                                <td>@item.Ten_LuongDa</td>
                                <td>@(item.Toppings.Any() ? string.Join(", ", item.Toppings.Select(t => $"{t.Ten} (+{t.Gia:N0} VNĐ)")) : "Không có")</td>
                                <td>@item.So_Luong</td>
                                <td>@item.Tong_Tien.ToString("N0") VNĐ</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Vouchers Card -->
    @if (Model.Vouchers.Any())
    {
        <div class="card mb-4 shadow-lg border-0 rounded-3">
            <div class="card-header bg-primary text-white fw-semibold">
                <h5 class="mb-0">Voucher</h5>
            </div>
            <div class="card-body bg-light">
                <ul class="list-group list-group-flush">
                    @foreach (var voucher in Model.Vouchers)
                    {
                        <li class="list-group-item">@voucher.Ten (Giảm: @voucher.Gia_Tri_Giam%)</li>
                    }
                </ul>
            </div>
        </div>
    }
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />


    <a class="btn btn-secondary mt-3 shadow-sm" asp-action="Index">Quay lại</a>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script>
        $(document).ready(function () {
            const diaChiRaw = '@diaChiRaw';
            console.log('diaChiRaw:', diaChiRaw);
            console.log('Split parts:', diaChiRaw ? diaChiRaw.split(',').map(p => p.trim()) : []);

            if (diaChiRaw) {
                const parts = diaChiRaw.split(',').map(p => p.trim());
                console.log('Parts length:', parts.length);

                // Kiểm tra định dạng: chỉ cần có ít nhất 2 phần
                if (parts.length >= 2) {
                    const wardCode = parts[0]; // e.g., '1B2727'
                    const districtId = parts[1]; // e.g., '3303'
                    const provinceId = '201'; // Hardcode Hà Nội
                    console.log('Parsed:', { wardCode, districtId, provinceId });

                    const baseUrl = 'https://localhost:7169/api/Shipping';

                    // Gọi API lấy danh sách quận
                    $.ajax({
                        url: `${baseUrl}/districts/${provinceId}`,
                        type: 'GET',
                        dataType: 'json',
                        success: function(districtsData) {
                            console.log('Districts API response:', districtsData);
                            let districtName = 'Unknown District';
                            if (districtsData && districtsData.data) {
                                const district = districtsData.data.find(d => String(d.DistrictID) === districtId);
                                if (district) {
                                    districtName = district.DistrictName;
                                }
                            }

                            // Gọi API lấy danh sách phường
                            $.ajax({
                                url: `${baseUrl}/wards/${districtId}`,
                                type: 'GET',
                                dataType: 'json',
                                success: function(wardsData) {
                                    console.log('Wards API response:', wardsData);
                                    let wardName = 'Unknown Ward';
                                    if (wardsData && wardsData.data) {
                                        const ward = wardsData.data.find(w => w.WardCode === wardCode);
                                        if (ward) {
                                            wardName = ward.WardName;
                                        }
                                    }

                                    const fullAddress = `${wardName}, ${districtName}, Hà Nội`;
                                    console.log('Full address:', fullAddress);
                                    $('#fullAddress').html(fullAddress);
                                    $('#addressLoading').hide();
                                },
                                error: function(xhr) {
                                    console.error('Lỗi gọi API wards:', xhr);
                                    $('#fullAddress').html('Lỗi tải địa chỉ chi tiết');
                                    $('#addressLoading').hide();
                                }
                            });
                        },
                        error: function(xhr) {
                            console.error('Lỗi gọi API districts:', xhr);
                            $('#fullAddress').html('Lỗi tải địa chỉ chi tiết');
                            $('#addressLoading').hide();
                        }
                    });
                } else {
                    console.log('Invalid address format. Parts:', parts);
                    $('#fullAddress').html(diaChiRaw || 'Địa chỉ không hợp lệ');
                    $('#addressLoading').hide();
                }
            } else {
                console.log('No address provided');
                $('#fullAddress').html('Không có địa chỉ');
                $('#addressLoading').hide();
            }
        });
    </script>
}

<style>
    .bg-gradient {
        background: linear-gradient(135deg, #007bff, #00c4ff);
    }

    .card {
        transition: box-shadow 0.3s ease;
    }

        .card:hover {
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

    .table th, .table td {
        vertical-align: middle;
        padding: 12px;
    }

    .table tbody tr:hover {
        background-color: #f8f9fa;
    }

    .order-tracker {
        display: flex;
        justify-content: space-between;
        align-items: center;
        position: relative;
        padding: 15px 0;
    }

    .order-step {
        text-align: center;
        flex: 1;
        position: relative;
        z-index: 1;
    }

    .dot {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 10px;
        font-size: 1.2rem;
        border: 2px solid;
    }

    .order-step.done .dot {
        background-color: #28a745;
        color: white;
        border-color: #28a745;
    }

    .order-step.active .dot {
        background-color: #007bff;
        color: white;
        border-color: #007bff;
    }

    .order-step.canceled .dot {
        background-color: #dc3545;
        color: white;
        border-color: #dc3545;
    }

    .label {
        font-size: 0.9rem;
    }

    .order-connector {
        position: absolute;
        top: 20px;
        left: 50%;
        width: calc(100% - 40px);
        height: 2px;
        background: #dee2e6;
        z-index: -1;
    }

        .order-connector.active {
            background: #28a745;
        }

        .order-connector.pending {
            background: #6c757d;
        }

    .text-success {
        color: #28a745 !important;
    }

    .text-danger {
        color: #dc3545 !important;
    }

    .text-secondary {
        color: #6c757d !important;
    }

    .timeline-icon {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 10px;
        font-size: 1.2rem;
        border-width: 2px;
    }

    .card-header.bg-primary {
        background-color: #007bff !important;
    }

    .btn-secondary {
        transition: background-color 0.3s ease;
    }

        .btn-secondary:hover {
            background-color: #5a6268;
        }

    body {
        background-color: #f4f6f9;
    }
</style>